[
  {
    "objectID": "VRF.html",
    "href": "VRF.html",
    "title": "VRF",
    "section": "",
    "text": "General Notes\n\nAllows separation of routing tables into distinct virtual tables\nCan be applied to interfaces, routing protocols, used for advanced techniques like MPLS L3VPNs\nFront door VRFs (FVRF)\n\nUsed to prevent recursive routing over tunnels without requiring separate routing protocols for under & overlay\nUnderlay networking kept in VRF table, overlay can freely form associations in global table or another VRF\nVery useful in DMVPN environments\nGreat article here\n\n\n\n\n\nUseful show/debug commands\n\nshow ip vrf &lt;name&gt; [detail] - Verify existing VRFs & their status\nshow ip vrf interfaces &lt;name&gt; Show interfaces participating in VRF table\nshow ip route vrf &lt;vrf-name&gt; - VRF routing table\nIn enable, routing-context vrf &lt;name&gt; - Puts you in config mode with all typical commands applying to that VRF, for example show ip route would show the table for the selected VRF\nPlenty more, as tons of commands have VRF flags\n\n\n\n\nStandard VRF-lite config\nvrf definition &lt;vrf-name&gt;\n address-family ipv4\n\ninterface gi0/0\n vrf forwarding &lt;vrf-name&gt;\n ip address !must be reassigned after attaching interface to VRF\n!\nrouter eigrp &lt;name&gt;\n address-family ipv4 unicast vrf &lt;vrf-name&gt; autonomous-system &lt;as&gt;\n  network 0.0.0.0\n!\nrouter ospf &lt;as&gt; vrf &lt;vrf-name&gt;\n network 0.0.0.0\n!\nrouter bgp 100\n neighbor 150.1.5.5 remote-as 100\n !\n address-family ipv4 vrf &lt;vrf-name&gt;\n  neighbor 150.1.5.5 activate\n\n\nStandard Front-door VRF config (FVRF)\nvrf definition &lt;vrf-name&gt;\n address-family ipv4\n!\nint gi0/0\n description WAN INTERFACE\n vrf forwarding &lt;vrf-name&gt;\n!\nint tu0\n tunnel vrf &lt;vrf-name&gt;\n!\n!if running IKEv1:\n!\ncrypto keyring VRF_AWARE_PSK vrf INET\n!\n!if running IKEv2:\n!\ncrypto ikev2 profile IKE-PROFILE\nmatch fvrf INET",
    "crumbs": [
      "CCNP",
      "L3 Technologies",
      "VRF"
    ]
  },
  {
    "objectID": "Syslog.html",
    "href": "Syslog.html",
    "title": "Syslog",
    "section": "",
    "text": "General Notes\n\nUsed to manage system logs and alerts\nCan be stored locally, sent to vty, console lines, or forwarded to an external syslog server\nLogging levels\n\nFor the logging trap command, these are the levels & their associated numbers:\nEmergency: 0\nAlert: 1\nCritical: 2\nError: 3\nWarning: 4\nNotice: 5\nInformational: 6\nDebug: 7\n\n\n\n\n\nUseful show commands\n\nshow logging - Shows information on local and external syslog\n\n\n\nStandard Syslog Config\nlogging buffered 90000 - ! Increase local logging buffer size\nlogging &lt;logging-server&gt;\nservice timestamps debug datetime localtime show-timezone msec\nservice timestamps log datetime localtime show-timezone msec\nlogging trap warning ! includes this level of message and all lower levels (warning to emergency)\nlogging source-interface loopback0\nexit\n!\nshow logging",
    "crumbs": [
      "CCNP",
      "Infrastructure Services",
      "Syslog"
    ]
  },
  {
    "objectID": "Redistribution.html",
    "href": "Redistribution.html",
    "title": "Redistribution",
    "section": "",
    "text": "General Notes\n\nRouters doing mutual redistribution will not readvertise routes between protocols (Ex: EIGRP &gt; OSPF &gt; EIGRP)\nRoutes will not be redistributed if they don’t exist in the RIB\nNot possible to create loops with a single redistribution point\nEIGRP and OSPF will not accept routes advertised from their own router ID for loop prevention\nTags can be used to prevent loops caused by advertising routes from one domain back into the same domain\nModifying AD can prevent loops caused by higher AD protocols being redistributed into lower AD protocols and then preferred through that protocol\nNormally applied with route-map to advertise specific routes, set tags, etc\n\n\n\n\nRedistribution per Protocol\n\nEIGRP\n\nRedistribution into EIGRP can be done anywhere in the topology\nRedistributed routes are marked external, AD of 170\nWhen redistributing into EIGRP, must assign metric either directly or with the default-metric command\n\nOSPF\n\nRedistribution can happen anywhere aside from stubby, totally stubby networks - redistributing router becomes ASBR and has type 4 LSA advertised to any areas outside of its own local area to ensure reachability to border router\nExternal routes will be LSA 5 in regular area, LSA 7 in NSSA and translated to type 5 at ABR\nBy default routes will be external type 2, e1 always preferred over e2 in OSPF algorithm\nMust use the subnets flag or only classful routes will be redistributed\n\nBGP\n\nRedistribution from BGP can be dangerous if using eBGP as IGPs will not be able to handle a full BGP table\nMust manually match externals if redistributing OSPF, otherwise only internal routes redistributed\n\n\n\n\n\nUseful show commands\n\nip route profile - Shows changes in routing topology, useful to see route flapping\n\n\n\n\nStandard Redistribution Config\nRouteMaps\nip prefix-list PL_REDIST seq 5 permit 10.10.10.0/24 ge 28\n!\nroute-map RM_REDIST permit 10  \nmatch ip address prefix-list PL_REDIST \nset tag 100\n!\nredistribute connected route-map RM_REDIST\nEIGRP\nredistribute connected\nredistribute static\nredistribute ospf 1 metric 10000 100 255 1 1500\ndefault-metric 10000 100 255 1 1500\nOSPF\nredistribute connected metric 10 subnets\nredistribute static metric 200 metric-type 1 subnets\nredistribute eigrp 1 metric 100 subnets\ndistance ospf external 171 ! for AD manipulation if required\nBGP\nredistribute connected\nredistribute static\nredistribute ospf 1 match external 1 external 2s",
    "crumbs": [
      "CCNP",
      "L3 Technologies",
      "Redistribution"
    ]
  },
  {
    "objectID": "Palo Alto Concepts & Links.html",
    "href": "Palo Alto Concepts & Links.html",
    "title": "Palo Alto Notes",
    "section": "",
    "text": "PAN-OS packet flow sequence\nPAN-OS CLI Cheat Sheets\nGenerate API key\nSecurity policy useful filters\nNewly added AD users don’t appear on the firewall immediately\nRemove admin login sessions\nPrint device config in XML\nMigrating config between locations or devices via API\nApp-ID and application dependency\nCustom applications & app override\nBrute force prevention on GP portal\n\n\n\nApp-ID\n\nShould be used where possible over service filtering - App-ID is more reliable for filtering traffic as it does not rely on just what ports the traffic is riding on\nWhere possible, using ‘application-default’ under service is also ideal - this will allow only the ports required for this application\nThe first few packets will be permitted based on the 6-tuple key1 defined by the rule until the app can be identified\nThis further reinforces using correct service filtering as otherwise unintended traffic will be permitted (e.g. ‘any’ service would permit any destination ports until app was identified)\n\nURL filtering\n\nOnly works when used on web traffic (80 & 443)\nCan work even without traffic being decrypted by inspecting the SNI2 field of the TLS handshake\nURL filters do not work properly when URLs exist in multiple custom URL groups\n\nWhen one URL matches multiple categories, this creates unpredictable results with URL filtering3\n\n\nAsymmetric routing\n\nBy default, PAs will not allow asymmetric traffic between zones - if a PA doesn’t get a SYN for the first packet of a TCP handshake, the traffic will be discarded\nYou can allow asymmetric traffic4, however this is done on a per-zone basis.\n\nProxy-ID\n\nUsed in VPN configurations where one side is a policy-based VPN (defining interesting traffic, source/destination)\nPalo Alto is strictly a route-based VPN and will by default advertise 0.0.0.0/0 as its interesting traffic - if the other side is policy-based, this won’t match and the tunnel will fail to come up unless proxy-id is used\n\nHits on Rules but No Logs\n\nFew possible causes for this occurrence\nFirst, improper log forwarding to Panorama if looking there or no logging on the rule in general\nSecond, rule is logging at end and, through gathering more information, the end of the session is marked as hitting another rule - there will still be a hit for the initial connection in this case but no log\nThird, this could be a licensing issue with a VM firewall causing no logs to be generated\n\n\n\n\nUseful commands\n\nfind command keyword &lt;keyword&gt; - Allows searching CLI for useful commands\nshow counters global filter yes packet-filter yes delta yes | match drop - This gives you any drop counters that have incremented since the command was last run and matches the PCAP filter - useful for finding the reason for dropped packets in a PCAP",
    "crumbs": [
      "Palo Alto",
      "Palo Alto Notes"
    ]
  },
  {
    "objectID": "Palo Alto Concepts & Links.html#footnotes",
    "href": "Palo Alto Concepts & Links.html#footnotes",
    "title": "Palo Alto Notes",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nThe 6-tuple key consists of the following: source-address, destination-address, source-port, destination-port, protocol, and security-zone.↩︎\nThe SNI field (server name indication) is transmitted in clear text during the TLS handshake - more detail on how PA inspects this located here.↩︎\nAttached article validates this.↩︎\nAttached article describes how to allow asymmetric traffic.↩︎",
    "crumbs": [
      "Palo Alto",
      "Palo Alto Notes"
    ]
  },
  {
    "objectID": "Netflow.html",
    "href": "Netflow.html",
    "title": "Netflow",
    "section": "",
    "text": "General Notes\n\nUsed to sample and observe network flow information\nTypically exported to a netflow collector which will display the information graphically with reports\nFlexible netflow\n\nUsed to allow more customization of the traffic parameters to be captured\nConsists of records, exporters, samplers and monitors\nRecords\n\nDefine what parameters will be captured by netflow\nCan use pre-defined records or define your own\n\nExporters\n\nUsed to set up exportation of the netflow information to the flow collector\n\nSamplers\n\nUsed to limit the number of monitored packets if desired for performance reasons\n\nMonitors\n\nUsed to apply netflow records to desired interfaces\nReferences specific flow record and flow exporter\n\n\n\n\n\n\nUseful show commands\n\nshow ip cache flow - Shows netflow information locally\nshow ip flow interface - Shows interfaces participating in netflow\nshow ip flow export - Shows information on exported flows\nshow flow record - Displays basic information about each flow record (flexible netflow)\nshow flow monitor - Displays basic information about each flow monitor (flexible netflow)\nshow flow exporter - Displays basic information about each flow exporter (flexible netflow)\n\n\n\n\nConfig\n\nBasic Netflow Configuration\nint fa 0/0\n ip flow [ingress|egress]\n exit\nip flow-export source lo 0\nip flow-export version [5|9]\nip flow-export destination &lt;collector-ip&gt; 5000\n\n\nFlexible Netflow Configuration\nflow exporter EXPORTER\n destination &lt;Collector-IP&gt;\n export-protocol netflow-v9\n source Vlan100\n transport udp 2055\n!\nflow record RECORD\n match ipv4 tos\n match ipv4 protocol\n match ipv4 source address\n match ipv4 destination address\n match transport source-port\n match transport destination-port\n match interface input\n collect interface output\n collect counter bytes\n collect counter packets\n!\nflow monitor IPv4_NETFLOW\n record RECORD\n exporter EXPORTER\n cache timeout active 60\n!\ninterface fa0/0\n ip flow monitor IPv4_NETFLOW input",
    "crumbs": [
      "CCNP",
      "Infrastructure Services",
      "Netflow"
    ]
  },
  {
    "objectID": "IPv6 First Hop Security.html",
    "href": "IPv6 First Hop Security.html",
    "title": "IPv6 First Hop Security",
    "section": "",
    "text": "General Notes\n\nFeatures to increase IPv6 layer 2 security, typically applied on switches\nNo broadcasts, but certain packets almost always flooded in IPv6 networks\n\nFF02::1 (All IPv6 hosts)\nFF02::2 (All IPv6 routers)\n\nFirst-hop security features assist in preventing exploits around common multicast addresses used by NDP, DHCPv6\n\n\n\n\nFeatures\n\nRA Guard\n\nAnalyzes RAs and filters traffic from unauthorized devices\nDoes not rely on binding table\nConfigured with ipv6 nd raguard attach-policy [policy-name] under interface\n\nDHCP v6 Guard\n\nBasically DHCP snooping in IPv6\nDoes not rely on binding table\nConfigured with ipv6 dhcp guard attach-policy [policy-name] under interface\n\nIPv6 Snooping\n\nRequired for following features that rely on the IPv6 binding table\nGlean populates bind table without verifying messages\nInspect gleans addresses and validates messages\nGuard gleans and inspects messages, drops RA and DHCP messages by default\nConfigured like:\n\nipv6 snooping policy &lt;name&gt;\n security-level [glean|inspect|guard]\n!\nint gi0/1\n ipv6 snooping attach-policy &lt;name&gt;\nND inspection\n\nInspects neighbor discovery messages and drops messages from hosts that already exist in the bind table but on different hardware addresses, preventing address spoofing\nRelies on IPv6 snooping\nConfigured with ipv6 nd inspection under interfaces\n\nSource/Prefix Guard\n\nBlocks traffic that does not come from an IPv6 address already known in the binding table\nRelies on IPv6 snooping\nConfigured with ipv6 source-guard under interfaces\n\n\n\n\n\nUseful show commands\n\nshow ipv6 nd raguard policy - Shows RA Guard details\nshow ipv6 dhcp guard policy - Shows DHCP v6 details\nshow ipv6 neighbors binding - Shows IPv6 bind table\n\n\n\n\nConfig\n\nStandard RA Guard Config\nipv6 nd raguard policy &lt;policy-name&gt;\n device-role host\n!\nint gi0/0\n ipv6 nd raguard attach-policy &lt;policy-name&gt;\n!\n!This will block all RAs on this port\n\n\nStandard DHCP v6 Guard Config\nipv6 dhcp guard policy DHCP_SERVER\n device-role server\nipv6 dhcp guard policy DHCP_CLIENT\n device-role client\n!\ninterface GigabitEthernet 0/1\n ipv6 dhcp guard attach-policy DHCP_SERVER\ninterface range GigabitEthernet 0/2 - 3\n ipv6 dhcp guard attach-policy DHCP_CLIENT\n!\n!This will only allow DHCP offers from the server ports",
    "crumbs": [
      "CCNP",
      "Infrastructure Security",
      "IPv6 First Hop Security"
    ]
  },
  {
    "objectID": "IP SLA & Tracking.html",
    "href": "IP SLA & Tracking.html",
    "title": "IP SLA & Tracking",
    "section": "",
    "text": "General Notes\n\nAllows monitoring of network performance and network availability testing with probes\nTrack objects allow you to dynamically control things like static routes, FHRP priorities, etc\nPossibilities for object tracking include:\n\nIP SLA instances\nInterface status\nGroups of objects\n\n\n\n\n\nUseful show commands\n\nshow ip sla configuration - Shows configuration for all IP SLAs set up on device\nshow ip sla statistics - Shows statistics for all IP SLAs set up on device\nshow track - Shows configuration and status of tracking object\n\n\n\n\nStandard IP SLA w/ track for HSRP Config\n! Tracking line protocols of WAN interfaces\ntrack 11 interface GigabitEthernet8 line-protocol\ntrack 12 interface FastEthernet0 line-protocol\n! Tracking ip routing status of tunnel interfaces for backup route\ntrack 21 interface Tunnel1 ip routing\ntrack 22 interface Tunnel2 ip routing\n! Track 23 will be up if both tunnels are not routing - set up for backup route to be installed\ntrack 23 list boolean and\n object 21 not\n object 22 not\n! Tracking for IP SLA 101\ntrack 100 ip sla 101 reachability\n delay down 15 up 60\n! Decrementing HSRP based on IP SLA and line protocols of WAN interfaces\nint vlan 100\n standby 1 track 11 decrement 10\n standby 1 track 12 decrement 10\n standby 1 track 100 decrement 10\n! Routing management traffic to secondary router if neither tunnel is routing\nip route 10.100.100.0 255.255.255.0 10.1.174.253 track 23\n! Testing reachability over DMVPN overlay and starting SLA\nip sla 101\n icmp-echo 172.16.1.254 source-interface Tunnel1\n request-data-size 100\n frequency 5\nip sla schedule 101 life forever start-time now",
    "crumbs": [
      "CCNP",
      "Infrastructure Services",
      "IP SLA & Tracking"
    ]
  },
  {
    "objectID": "Fitness & Lifestyle General Notes.html",
    "href": "Fitness & Lifestyle General Notes.html",
    "title": "Fitness & Lifestyle Notes",
    "section": "",
    "text": "Meditation and mindfulness training seem to be quite effective at lowering cortisol1.\nExercise (both cardio and lifting weights) improve cognitive function significantly2.\nWeightlifting/strength training have strong anti-depressive effects3.\nSauna use has significant health benefits, increasing life span and lowering CVD risk4.\nGaining muscle seems to be just as possible at 85+ as it is at 65-755.",
    "crumbs": [
      "Fitness & Lifestyle",
      "Fitness & Lifestyle Notes"
    ]
  },
  {
    "objectID": "Fitness & Lifestyle General Notes.html#footnotes",
    "href": "Fitness & Lifestyle General Notes.html#footnotes",
    "title": "Fitness & Lifestyle Notes",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nMeditation/mindfulness performed the best out of several stress management interventions in this meta-analysis.↩︎\nMeta-analysis showing improvements in memory, attention, information processing, etc. Another study showing increased creativity, and another showing improved learning after resistance training.↩︎\nLarge magnitude depression reduction during this study. Even lower-intensity strength training shows the same.↩︎\nReview of sauna health benefits.↩︎\nNo difference between age groups observed in this study.↩︎\nThe largest coffee meta-analysis I’ve found shows health improvements with normal consumption (less than 5 cups a day).↩︎\nSome supporting studies.↩︎\nLarge meta-analysis of RCTs.↩︎\nTons of studies on this, but here’s one example.↩︎\nLarge meta-analysis on this topic, and RCT with similar topic & results.↩︎\nEnergy compensation study.↩︎\nDiet break meta-analysis.↩︎\nThe following stronger by science article has information supporting this number.↩︎\nCell Reports Medicine study reference.↩︎\nProtein timing (pre, post workout) had no impact on muscle growth in this study.↩︎\nPre-workout carb study for crossfit showed no difference - this is probably even more true for most typical strength training routines, as crossfit incurs more of a cardio burden than strength training.↩︎\nStudy on this by Eric Helms.↩︎\nStudy showing delayed myonuclear addition after strength training.↩︎\nStronger by science reference.↩︎\nPre-print study investigating rest times.↩︎\nRCT suggesting this.↩︎\nPre-print for now.↩︎\nDrop set study.↩︎\nSimilar results in this study, even with front squats having less volume.↩︎\nA few different PubMed articles related to this.↩︎\nShown in adolescents and adult USAF.↩︎\nShown in dancers and other athletes.↩︎\nShoulder pain study and other meta-analyses on fear-related pain beliefs.↩︎\nReview on training load and injury.↩︎\nNon-symptomatic disc herniations are a good example of this.↩︎\nMost herniations resolve on their own, with more severe herniations slightly less likely to regress on their own. Even in cases of unresolved herniation, there is no linear relationship between bulging/herniated discs and injury/pain[^9].↩︎",
    "crumbs": [
      "Fitness & Lifestyle",
      "Fitness & Lifestyle Notes"
    ]
  },
  {
    "objectID": "DMVPN.html",
    "href": "DMVPN.html",
    "title": "DMVPN",
    "section": "",
    "text": "General Notes\n\nUsed for large-scale, scalable deployment of mGRE tunnels in a hub-and-spoke topology\nCan establish connectivity through NAT, DHCP\nUtilizes NHRP (Next Hop Resolution Protocol)\n\nNHS (next-hop server) is statically defined on the spoke routers\nEach spoke router then dynamically registers with the hub(s) and forms tunnel to hub(s)\nHub will populate NHRP cache with spoke information and allow communication between all nodes\nIn phase 2, 3, hub will assist with spoke-to-spoke tunnels by sending resolution, redirect NHRP messages to spokes\n\nCommon to advertise summary route from hub, keep all spokes as stubs\nFront door VRFs used to bypass recursive routing issues with overlay\n\n\n\n\nDMVPN Phases\n\nPhase 1\n\nAll traffic between spokes in this design must transit the hub, no spoke-spoke tunnels are formed\n\nPhase 2\n\nAllows spoke-to-spoke traffic by making all tunnels (including spokes) multipoint\nThis allows spokes to form tunnels directly to each other\nMust not have routing protocol use next-hop-self or the tunnels will not form\nDoes NOT work with summarization - since the RIB will not have a route to the other spokes, all traffic will transit the hub\nIf using OSPF, network type must be broadcast or non-broadcast to prevent changing next-hops\n\nIn this scenario the spokes must be set at priority 0 to prevent them becoming DRs - if spokes become DRs the network will not function as they cannot multicast between each other\n\n\nPhase 3\n\nAllows spoke-to-spoke traffic by using NHRP redirect and shortcut commands that allow NHRP to rewrite next hops in the RIB\nMain benefit over phase 2 is allowing summarization from hubs to spokes - spokes will still be able to form tunnels to each other in phase 3 even with a default route from the hub\n\n\n\n\n\nUseful show commands\n\nshow dmvpn [detail] - shows tunnel status, peers, up/down time, etc\nshow ip nhrp [brief] - shows NHRP cache, NHRP-specific details useful for phase 2, 3\nshow ip route next-hop-override - shows NH overrides for DMVPN phase 3\nshow crypto isakmp sa; show crypto ike2 sa; show crypto ipsec sa - for troubleshooting IPsec when used with DMVPN\n\n\n\n\nConfig\n\nDMVPN Phase 1 Configuration (No IPsec)\nHub Config\n! Essential\ninterface Tunnel100\nip address 192.168.100.11 255.255.255.0\nip nhrp map multicast dynamic\nip nhrp network-id 100\ntunnel source GigabitEthernet0/1\ntunnel mode gre multipoint\n\n! Discretionary\nbandwidth 4000\nip mtu 1400\nip tcp adjust-mss 1360\nip nhrp authentication NHRPAUTH\nno ip split-horizon eigrp 100 ! necessary for EIGRP\ntunnel key 100 ! necessary in multi-hub designs\nSpoke Config\ninterface Tunnel100\nip address 192.168.100.31 255.255.255.0\nip nhrp network-id 100\nip nhrp nhs &lt;TunnelIP&gt; nbma &lt;PublicIP&gt; multicast\ntunnel source GigabitEthernet0/1\ntunnel destination &lt;PublicIP&gt;\n\n! Discretionary\nbandwidth 4000\nip mtu 1400\nip tcp adjust-mss 1360\nip nhrp authentication NHRPAUTH\ntunnel key 100 ! necessary in multi-hub designs\n\n\nDMVPN Phase 2 Configuration (No IPsec)\nHub Config\n!same as Phase 1, but including:\n\nno ip next-hop-self eigrp 100\n\n!so that hub doesn't list itself as NH for spokes\nSpoke Config\n!same as Phase 1, but including:\n\ntunnel mode gre multipoint\n\n!so that spokes can form direct tunnels\n\n\nDMVPN Phase 3 Configuration (No IPsec)\nHub Config\n!same as Phase 1, but including:\n\nip nhrp redirect\n\n!so that hub will forward redirect messages to spokes after initial traffic, \nallowing spoke-to-spoke tunnels to form\nSpoke Config\n!same as Phase 1, but including:\n\nip nhrp shortcut\ntunnel mode gre multipoint\n\n!to allow the spokes to install NHRP next hops into the routing table and form direct tunnels\n\n\nDMVPN IKEv1 IPsec Configuration\nVRFless\ncrypto isakmp policy 10\n encr aes 128\n hash sha256\n authentication pre-share\n group 16\n!\ncrypto isakmp key DMVPN_PSK address 0.0.0.0  \n!\ncrypto ipsec transform-set ESP-AES-256-SHA-512 esp-aes 256 esp-sha512-hmac \n mode transport\n!\ncrypto ipsec profile DMVPN_PROFILE\n set transform-set ESP-AES-256-SHA-512\n!\ninterface Tunnel0\n tunnel protection ipsec profile DMVPN_PROFILE\nFVRF\n!same as above, but instead of crypto isakmp key:\ncrypto keyring VRF_AWARE_PSK vrf UNDERLAY_TRANSPORT \n  pre-shared-key address 0.0.0.0 0.0.0.0 key DMVPN_PSK\n\n\nDMVPN IKEv2 IPsec Configuration (See IPsec page for deep dive)\nVRFless\ncrypto ikev2 keyring DMVPN-KEYRING \npeer ANY\naddress 0.0.0.0 0.0.0.0\npre-shared-key CISCO456\n!\ncrypto ikev2 profile DMVPN-IKE\nmatch identity remote address 0.0.0.0\nauthentication remote pre-share\nauthentication local pre-share\nkeyring local DMVPN-KEYRING\n!\ncrypto ipsec transform-set SET1 esp-aes 256 esp-sha-hmac\nmode transport\n!\ncrypto ipsec profile DMVPN-IPSEC\nset transform-set SET1\nset ikev2-profile DMVPN-IKE\n!\ninterface Tunnel0\ntunnel protection ipsec profile DMVPN-IPSEC\nFVRF\n!Same as above, but under crypto ikev2 profile:\n match fvrf INET\n\n\nUsing FVRF with DMVPN\n\nSee VRF page for details on that",
    "crumbs": [
      "CCNP",
      "VPN & Encryption",
      "DMVPN"
    ]
  },
  {
    "objectID": "CoPP.html",
    "href": "CoPP.html",
    "title": "CoPP",
    "section": "",
    "text": "General Notes\n\nStands for Control Plane Policing\nUsed to protect the control plane of network equipment from being saturated with less preferred traffic, DOS attempts, etc\nPolicy-maps function in top-down fashion like ACLs\nclass-default will match all traffic not matched earlier in a policy-map\nMatch any vs Match all\n\nUsed in class-maps, behavior differenet when matching multiple access groups\nMatch any functions as boolean OR, match all functions as boolean AND\n\n\n\n\n\nUseful show commands\n\nshow policy-map control-plane input - Verify number of packets hitting COPP policy\n\n\n\n\nStandard CoPP Config\n! Identify traffic with ACLs\n!\nip access-list extended COPP-ICMP-ACL-EXAMPLE\n permit udp any any range 33434 33463 ttl eq 1\n permit icmp any any unreachable\n permit icmp any any echo\n permit icmp any any echo-reply\n permit icmp any any ttl-exceeded\n exit\nip access-list extended COPP-MGMT-TRAFFIC-ACL-EXAMPLE\n permit udp any eq ntp any\n permit udp any any eq snmp\n permit tcp any any eq 22\n permit tcp any eq 22 any established\n permit tcp any any eq 23\n exit\nip access-list extended COPP-ROUTING-PROTOCOLS-ACL-EXAMPLE\n permit tcp any eq bgp any established\n permit eigrp any host 224.0.0.10\n permit ospf any host 224.0.0.5\n permit ospf any host 224.0.0.6\n permit pim any host 224.0.0.13\n permit igmp any any\n!\n! Create class maps to define traffic classes\n!\nclass-map match-all COPP-ICMP-CLASSMAP-EXAMPLE\n match access-group name COPP-ICMP-ACL-EXAMPLE\nclass-map match-all COPP-MGMT-TRAFFIC-CLASSMAP-EXAMPLE\n match access-group name COPP-MGMT-TRAFFIC-ACL-EXAMPLE\nclass-map match-all COPP-ROUTING-PROTOCOLS-CLASSMAP-EXAMPLE\n match access-group name COPP-ROUTING-PROTOCOLS-ACL-EXAMPLE\n!\n! Create policy map to define service policy\n!\npolicy-map COPP-POLICYMAP-EXAMPLE\n class COPP-MGMT-TRAFFIC-CLASSMAP-EXAMPLE\n  police 32000 conform-action transmit exceed-action transmit violate-action transmit\n class COPP-ROUTING-PROTOCOLS-CLASSMAP-EXAMPLE\n  police 34000 conform-action transmit exceed-action transmit violate-action transmit\n class COPP-ICMP-CLASSMAP-EXAMPLE\n  police 8000 conform-action transmit exceed-action transmit violate-action drop\n!\n! Apply policy to control plane\n!\ncontrol-plane\n service-policy input COPP-POLICYMAP-EXAMPLE",
    "crumbs": [
      "CCNP",
      "Infrastructure Security",
      "CoPP"
    ]
  },
  {
    "objectID": "Azure Networking (AZ-700).html",
    "href": "Azure Networking (AZ-700).html",
    "title": "Azure Networking (AZ-700)",
    "section": "",
    "text": "Azure Networking Fundamentals\n\nVirtual Network (VNET)\n\nSupernet of network subnets existing in one region only - can be IPv4 RFC1918 or IPv6\nBy breaking VNET into subnets, you can assign different routing tables and network security groups to them\nAzure steals 5 IPs from all subnets (Network, Broadcast, Gateway and 2 for DNS)\n\nIn a /24 these are Network: .0, Gateway: .1, Azure DNS: .2-3, Broadcast: .255\n\nPublic IPs are a separate resource that can be assigned to particular vNICs\nVNet peering allows communication of different VNets over the Azure backbone\n\nCan also peer between VNETs with VPN network gateway, however this traffic is sent across public internet instead of Microsoft backbone, costs more, has bandwidth limitations and higher hop count\nThe benefit to using VPN network gateways is that they allow for encrypted traffic (VNET peering is unencrypted) and can also peer to on-prem networks\nIf desired, VNET peers can only allow traffic one direction (only from remote/only to remote VNET)\nIP space must not overlap\nUnless you use NVAs to broker the connections, VNET peerings do not ‘daisy chain’ through each other - these peerings are non-transitive\n\ne.g. if VNET1 & VNET 3 are peered to VNET2, they can talk to VNET2 but not each other\n\nThe other exception to this (aside from NVAs) is when connecting to on-prem - this traffic can ‘daisy chain’ through the VNET connecting to on-prem if if you configure the entry VNET to ‘AllowGatewayTransit/Use this virtual network’s gateway or Route Server’ and the remote VNET to ‘UseRemoteGateways/Use the remote virtual network’s gateway or Route Server’ for the peering to the entry VNET\nSince network peering is non-transitive, hub & spoke topologies are common in Azure network architecture\nThe hub peers to all spoke VNETs and routes traffic through a central NVA/Azure firewall - this is known as ‘service chaining’\nThis hub & spoke setup is enabled by custom UDR routing traffic to the central NVA/Firewall\n\nTo connect Azure to on-prem, can use S2S VPN (policy-based or route-based VPN) with Azure VPN gateway or to another virtual networking appliance (CSR, etc). Can also use Azure Express Route.\n\n\n\nPublic IPs\n\nBasic SKU allows all traffic by default and can be dynamically or statically assigned, requires NSG to lock down traffic\nStandard SKU is always static and inaccessible by default, requires NSG to allow access and allows zone redundancy\nPublic IPs in Azure are always associated with a private IP\n\n\n\nAzure Routing\n\nSoftware-defined routing - L2 functionally doesn’t exist when considering Azure routing as all traffic goes through Azure as the default gateway, not within the same subnet\nAzure automatically populates route tables with system routes to the internet and to the local VNET\nWhen forwarding traffic through an NVA (Network Virtual Appliance), such as a VM firewall or load balancer, the ‘IP Forwarding’ checkbox must be enabled on the NIC of the VM. If this is not checked, it will not be able to forward traffic from other devices\n\nAnother caveat with NVAs - because of the way NICs work in a software-defined network like Azure, adding multiple NICs does not increase performance and can even break symmetric routing\nMost reference designs for deploying NVAs will only include 1 NIC\n\nUDR - User-defined routes, made by modifying the route table(s) in Azure\nAzure route hop types:\n\nVirtual network - Routes between subnets/hosts within a VNET\nInternet - Routes to the internet\nNone - Null0, dropped traffic\nVirtual network gateway - Used for ExpressRoute and VPNs\nVirtual appliance - Route to an Azure VM used as a network appliance\n\nFor AD, User defined route is preferred, followed by BGP route and lastly by system/default routes\n‘Effective routes’ for each VM NIC an easy way to see what routes are actually being used by an appliance\nTo force internet traffic to egress over a tunnel to an on-prem location (e.g. to transit an on-prem firewall) a Powershell command is required, Set-AzVirtualNetworkGatewayDefaultSite. For traffic going through an Azure NVA to the internet, this is not required - this only comes up if internet traffic is forced over a VPN tunnel.\nRoute Server - Azure routing resource that simplifies routing between multiple NVAs, useful in more complex routing scenarios\n\nCommunicates with NVAs over BGP and updates Azure route table, prevents maintenance of many different UDRs to NVAs and can allow connectivity to multiple NVAs without LBs via ECMP\nOne caveat to this is that when using NVAs with a route server, even if you install a specific route for a subnet within a VNET through BGP, Azure will default to sending this traffic directly within the VNET. To force this traffic through the firewall you would need a UDR to give it higher AD and force it to be chosen as the preferred route.\n\n\n\n\nRoute tables\n\nAzure resource for specifying routes\nBy default has some Azure-populated routes to local subnets, the internet for basic connectivity that can be overridden by user routes\n\n\n\nPublic & Private Endpoints\n\nAzure PaaS services by default route over public internet\nService endpoints allow connections to Azure PaaS services over Microsoft’s private backbone\nPrivate endpoints & private links work the same, except they also allow access over private connections to on-prem networks, allowing you to completely disable public IPs if desired, and allows you to only connect to a specific instance of a service\nPrivate endpoints/links are generally a better solution if private access is required to resources\nThey work by changing the resolution of a service to a CNAME pointing to ‘&lt;service-name&gt;.privatelink.windows.net’ from the default ‘&lt;service-name&gt;.windows.net’\nThis ‘privatelink’ record then resolves to the private IP - DNS resolution required for private endpoints to function\nPrivate endpoints are currently unaffected by NSGs (they ignore NSG rules)\nPrivate endpoints are the attachment points into the VNET & subnet, whereas private links are the attachment points into a specific resource (Storage account, for example) - both are required for private connectivity to a resource\nOne private link can connect to multiple private endpoints\nPrivate link service (PLS) is different than just a private link itself - this is used for private connectivity to resources in a VNET you do not have access to through peering or site-to-site VPN\n\nThis can be useful when connecting to vendor resources\nMust use a standard load balancer - cannot directly attach to other resources than an Azure LB\nPLS uses its own subnet to source NAT traffic before sending to the front end of the LB\n\n\n\n\nNetwork Watcher\n\nAn Azure feature that allows monitoring and diagnostics of Azure networks, connections to on-prem networks, and displays diagrams of connectivity\nAllows testing of IP flows, viewing next-hops, displays effective security rules, allows packet captures and can be used to troubleshoot connections and VPN gateways\n\n\n\nSubnet Delegation\n\nSome services can have subnets delegated to them directly, effectively ‘injecting’ a managed PaaS service into your VNET\nThese may require specific subnet names to function\nThey also may or may not allow you to manually use the subnet for other VMs\n\n\n\nAzure DNS\n\nAzure-Provided Default\n\nBy default, all private DNS in Azure handled by Azure-provided nameservers automatically\nAzure ‘wireserver’ (168.63.129.16) handles default name resolution for all VMs\nDefault private DNS always ends with .internal.cloudapp.net and are scoped to a single VNET\nOnly accepts queries from Azure resources\n\nTo access from on-prem, create DNS server to act as resolver in Azure and conditionally forward to that which can then forward to the wireserver or use Azure DNS Private Resolver\n\n\nAzure Private DNS\n\nAllows custom DNS suffixes, manual DNS record creation and can resolve across VNETs\nGlobal - any region, subscription, VNET, tenant can use a private DNS zone (with right permissions)\nCan only resolve Azure NS lookups however, cannot resolve on-prem queries without DNS resolver in Azure\nWhen overwriting a record with a manual entry, the automatic DNS record is removed\nA VNET can only automatically register to one private DNS zone, but a single private DNS zone can be used by many different VNETs for registration\nOne VNET can use multiple DNS zones for resolution, just not for registration\n\n\n \n\n3rd-Party VM DNS Server\n\nTypical solution, allowing syncing of domains between on-prem and Azure\nAlternative would be a newer Azure feature ‘Azure DNS Private Resolver’\n\n\n\n\n\nAzure Network Services\n\nNAT Gateway\n\nBy default Azure will NAT traffic the public IP associated with a resource (either PIP for a VM or an LB), however resources without a public IP associated will be NATed to an ephemeral public IP provided by Azure\nIt’s possible to set up a NAT GW resource for a specific subnet in Azure - this will NAT all outbound traffic to the same public IP address\nNote that NAT GWs are for outbound sessions and don’t provide NAT for any inbound connection other than established sessions - that would require an assigned PIP to an LB or the resource itself\nNAT GWs are zonal - it’s best to create a NAT GW for each zone you want to support and to assign resources in the same availability zone to the subnet using the NAT GW\n\nThis means that you would have to organize your subnets by zone, otherwise the NAT GW will not line up with the zone and could go down while the resources in another zone are still live\n\n\n\n\nAzure Virtual WAN\n\nManaged virtual WAN service for an ‘easy mode’ hub & spoke topology in Azure\nCan incorporate multiple VPN/ER/VNETs and dynamically handles routing\nAll of the functionality of Azure Virtual WAN can be provided without it, but it adds easier management to things like peering many VNETs/ERs/Network Gateways, adding/updating route tables and integrating with NVAs to update routes\nEssentially functions as a hub VNET in a normal hub & spoke topology but with additional management features layered on\nAlso allows transitive networking directly between spoke VNETs (not possible with traditional self-managed hub & spoke Azure topology, traffic must go through hub)\nWhen creating a virtual hub, address space must be allocated for routing between the subnets that will be connected to the hub - the Microsoft recommended subnet size is /23, though it defaults to /16\nAzure Virtual WAN hub has its own route table\n\nAll VNETs added to hub can associate (learn routes) or propagate (add routes) to/from the Azure Virtual WAN\n\nYou can define custom routes within the Azure Virtual WAN hub - by default all VNETs can talk to all other VNETs in the WAN, but this can be restricted with custom routes\nHybrid network connections (S2S, P2S VPN, ER) are made directly through hub appliance\nThese connections are assigned gateway ‘scale units’, which essentially function as SKUs by defining available bandwidth for a connection type\n\nScale units for VPN are 500Mbps per unit, 2Gbps per unit for ER\n\nUnlike a typical VNET, you cannot simply deploy a VM into a AZ Virtual WAN - if you want an NVA to filter your traffic, it has to be one of the Azure partner products (Zscaler, Checkpoint, or Azure firewall)\nWhen creating multiple hubs within a single Virtual WAN, the hubs automatically have connectivity to each other with no added configuration\nSKUs are ‘Basic’ (provides connectivity only for site-to-site connections) or ‘Standard’ (provides connectivity for ER, P2S, VNET to VNET, Azure NVA/Azure firewall)\n\n\n\n\nAzure VPNs/On-Prem Connectivity\n\nVNET Gateway (Virtual Network Gateway/VPN Gateway)\n\nUsed for IPSec connectivity to on-prem (or other VNETs) - available in many SKUs with options for different throughputs, tunnel amounts, zone redundancy options and BGP support - also used for ExpressRoute (covered later)\nRequires its own dedicated subnet named ‘GatewaySubnet’, typically /27\nOnly one VPN gateway and one ExpressRoute gateway possible per each VNET\nWith anything other than the ‘Basic’ SKU, you can change your SKU to cheaper/more expensive options without requiring a redeployment of the resource\nConsists of 2 managed VMs in the background, though this is transparent to the Azure user\nBy default, operates in active-standby HA configuration, but this can be configured as active-active instead if desired\nWhen connecting to on-prem (not another VNET) an additional resource is required, ‘Local Network Gateway’ which is used to configure details of the remote network\nMultiple tunnels can be formed to one VPN gateway, but all will share the same throughput limitations on the SKU selected\nSupports both policy-based (legacy, only in Basic SKU) and route-based IPSec VPN types\nVPN routes are automatically added to VNETs when adding a new VNET-to-VNET gateway connection\nBasic SKU VPN gateways are now deprecated and can only be created via CLI\nSite to Site VPN Basic Setup Process:\n\n\n\n\nPoint to Site VPN (Client VPN)\n\nUsed to connect to a single computer as opposed to a site-to-site VPN, used for telecommuting to Azure\nTunnel protocol options are OpenVPN, SSTP and IKEv2 - OpenVPN has the widest compatibility\n\nSSTP is only available for Windows, IKE for Macintosh\n\nAuth methods are Cert, Azure AD, RADIUS\nWhen adding a new peered network to the VNET where the P2S connection is terminated, the P2S configuration must be redownloaded to the client for them to be able to reach the peer\n\nThis is a pretty significant limitation as it makes it very painful to use this feature if new VNET peerings are regularly created\n\n\n\n\nExpressRoute\n\nPrivate site-to-site connection into Azure, alternative to VPN gateway\nAlways active-active pair of connections\nBuild-in redundancy and very high speed (up to 100Gbps) options available\nUses BGP for dynamic routing\n\nMicrosoft publishes BGP communities for services in specific regions that can be used for route manipulation\n\nSupports BFD for circuit failure detection\nNot encrypted by default, but can be encrypted with MACsec or IPsec\nCan choose billing options of unlimited data in/out, or unlimited inbound and metered outbound\nPerformance SKUs are ‘standard’ (1Gbps, 4 circuits), ‘high performance’ (2Gbps, 8 circuits) and ‘ultra performance’ (10Gbps, 16 circuits)\nEach ExpressRoute circuit allows 10 virtual networks to link to it with local or standard service models - premium allow up to 100 depending on the circuit size (see here)\nConnection models are ‘Cloud Exchange Co-Lo’, ‘Point to Point’, ‘Any to Any’ or ‘ExpressRoute Direct’ - all go through service providers except for ExpressRoute Direct which connects directly to Microsoft\nConnecting direct to Microsoft can offer much more bandwidth but is also much more expensive\nService models are ‘Local’, ‘Standard’, and ‘Premium’\n\nLocal only allows connectivity to a specific region but is much cheaper and allows for use of the unlimited billing model (unlimited in/out)\nStandard allows connectivity to any region in a larger geopolitical space (EU, North America)\nPremium allows connectivity to all regions, private connectivity to O365 and use of Global Reach, but is more expensive\n\nGlobal Reach allows connecting through the Microsoft backbone for your own on-prem location, bypassing the typical transit requirements of going through Azure VNETs\nExpressRoute FastPath can allow bypassing the VNET gateway and routing traffic direct to specific VMs, ideal for extreme low latency requirements but requires the Ultra Performance gateway SKU to function\nExpressRoute Setup Process:\n\n\n\n\n\nAzure Network Security\n\nAzure Firewall\n\nLayer 3-7 stateful cloud-native firewall resource within Azure that integrates with Azure monitoring\nStandard SKU supports DNAT, network and application rule types, threat intelligence, FQDN support, and has built-in HA\nPremium offers the above and also includes IDS/IPS functionality, TLS inspection, web categories and URL filtering\nMust create a subnet called ‘AzureFirewallSubnet’ with a mask of /26 or larger\nBy default FW will SNAT any traffic destined to non-RFC 1918 IPs, however this can be changed\nYou can also link a NAT Gateway to the AzureFirewallSubnet and have this handle SNAT for the firewall\nWhen determining rule precedence, DNAT rules are first, then network rules, then application rules\nDNAT rules are for destination NAT through the firewall, network rules are for basic inbound/outbound 5 tuple filtering and application rules are for filtering traffic based on FQDN\nRules can be configured as part of RCG (Rule Collection Groups)\nRules can also be enforced by policy through a separate resource - these resources can also be nested underneath each other as parent and child policies\nChild policies inherit any RCGs from the parent and could add more if desired without affecting the parent policy\n\n\n\nWeb Application Firewall\n\nWAF is a PaaS firewall for web applications like Application Gateways, Azure Front Doors\nIt can be applied directly to resources or via policy to multiple resources, much like Azure firewall\nWhen applying to an individual resource, it exists under the resource itself, however when creating WAF as a policy it exists as a separate resource that can be applied to multiple of the same resource type (i.e. multiple AGW or multiple Azure front doors, but not both)\n\n\n\nNetwork Security Groups\n\nBasic Azure ACLs, although they are session-based and stateful\n5 tuple filtering (source/destination IP/port, protocol [TCP, UDP]) but no application awareness\nApplication Security Groups can be used to easily apply inbound/outbound traffic rules to groups of VMs with similar functions - function like tags for VMs to allow manipulation of traffic within an NSG\nASGs are applied through the VM resource pane but apply at the NIC level, not to the VM resource\nCan monitor NSGs through flow logs stored in an Azure storage account (in JSON format) or through log analytics workspace\nThese flow logs require Network Watcher be enabled for the region and Microsoft.Insights be enabled for the subscription\n\n\n\n\nAzure Load Balancing Services\n\nLoad Balancer\n\nLoad balances traffic to backend pool of VMs based on specific load balancing algorithms\nL4, operates based on 5-tuple (source/destination IP/port, protocol [TCP, UDP]) but no application awareness\nHealth probes ensure load balancers only forward traffic to healthy VMs\nSupports both balancing traffic to VMs and destination NATing directly to individual VMs if desired\nBasic SKU only allows balancing to an availability set, whereas standard has higher uptime requirements and much more flexibility for its backend pools\nCan be used for internal resources with private IP addressing or external with public (cannot be mixed on one LB)\nEach VM can be a member of only one internal LB backend pool and one external LB backend pool\nCan implement session persistence (sticky sessions) in Azure LBs\nBy using HA ports, can load balance to many different ports simultaneously without having to create rules for each individual port (will distribute all flows to backend regardless of port)\n\nThis is useful in scenarios such as hosting multiple NVA firewalls in a backend pool to balance traffic - the load balancer will automatically ensure traffic is kept stateful with flow symmetry\nOnly works with standard, internal load balancers\n\nFloating IP will allow the backend member to see the destination IP as the front end IP of the load balancer - normally this would be obscured by Azure with the destination appearing as the VM’s IP, from the VM’s perspective\nCan allocate specific numbers of ports/IPs for outbound connections through the load balancer with outbound rules\nCan load balance globally between multiple regional load balancers by creating an LB, selecting ‘global’ tier and using the regional LBs as the backend pool - example below\n\n\n\nNote that only specific home regions can be used for a global LB\n\n\n\nApplication Gateway\n\nAn regional Azure L7 HTTP/S load balancer that allows the LB to route traffic based on HTTP headers, URLs and other attributes\n\nFor multi-region workloads, use Azure Front Door\n\nCan be used internally or externally\nCan use app service, IPs and FQDNs on backend pool, not just VMs like a regular Azure LB\nCan also use on-prem resources or public IPs, DNS names in backend - all you need is reachability\nRequires a dedicated subnet\nSupports many more advanced ADC features compared to Azure LB; see below for details\nStandard V1 SKU supports URL-based routing, multi-site hosting, web application firewalls, TLS offloading, session affinity (sticky sessions), custom error pages, and fully private access\nStandard V2 SKU supports the above but must use a public IP (and optionally private as well), also supports autoscaling, zone redundancy, static VIPs, integration with AKS controllers and Azure Key vault, HTTP/S header rewriting and custom web application firewall rules\n\n\n\n\nAzure Front Door\n\nA global layer 7 load balancer that supports content acceleration and high availability across Microsoft’s backbone network, allowing fast connectivity from anywhere on earth - operates in any Azure region\nUses similar design as AGW with different vernacular - frontend is the same, origin group = backend pool, origin = backend target and routes = rules\nA common configuration would be to have application gateways at the regional level in the origin group (backend), globally load balanced by an Azure Front Door instance\nClassic V1 SKU supports global layer 7 HTTP/S/2, heath probes, URL-path based routing, multi-site hosting, cookie affinity, SSL offloading, custom domains and URL rewriting/redirection\nStandard/Premium V2 SKU allows for all the V1 features along with caching of web solutions on different Azure POPs, CDN optimization, and custom WAF rules\nWith Front Door custom domains, you validate domain ownership with a text record in the domain\nIf using custom domains, Azure will manage SSL certificates for you\n\n\n\nAzure Traffic Manager\n\nLike Azure Front Door, a global load balancer, however it leverages DNS for this traffic distribution\nWhen a domain used in traffic manager is queried, traffic manager will examine its routing rules and determine which backend target to return to the query - this allows traffic manager to control how traffic is sent to the backend without being inline of the data stream (other than the DNS resolution)\nThese rules can select the backend based on many methods, including priority, weight, performance (lowest latency), geographic location, subnet, etc\nSupports health probing on different protocols (HTTP, HTTPS, TCP) and allows specific path configuration, timeout settings\n\nYou can also disable health probing for an endpoint if desired\n\nBackends can be internal Azure app services, external IPs/FDQNs or nested (TM within TM), covered below\nCan nest profiles within each other and use a child profile as an endpoint in a parent profile - Azure doc",
    "crumbs": [
      "Azure",
      "Azure Networking (AZ-700)"
    ]
  },
  {
    "objectID": "AAA.html",
    "href": "AAA.html",
    "title": "AAA",
    "section": "",
    "text": "General Notes\n\nAuthentication, authorization and accounting\nFramework for controlling access to resources, monitoring usage, ensuring correct permissions\nif-authenticated\n\nUsed with the aaa authorization command as a suffix to allow access to higher privilege commands even if the AAA server is unreachable\nwithout the if-authenticated suffix, the device will continually try to poll the AAA server for authorization and running any commands will be a painfully slow process\n\n\n\n\n\nUseful Debugs\n\ndebug aaa authentication - Debug all AAA auth\ndebug radius authentication - Debug for radius auth\ndebug tacacs authentication - Debug for tacacs auth\ndebug aaa protocol local - Debug local authentication\n\n\n\n\nStandard AAA Config\nusername &lt;user&gt; privilege 15 secret &lt;pass&gt; ! good idea to have local auth as backup\n!\naaa new-model\naaa group server tacacs+ &lt;group-name&gt;\n server-private 10.20.5.35 single-connection key &lt;key&gt;\n ip vrf forwarding Mgmt-intf\n ip tacacs source-interface GigabitEthernet0\n!\n! alternatively can define the server like this\n!\ntacacs server &lt;serv-name&gt;\n address ipv4 10.20.5.35\n key &lt;key&gt;\naaa group server tacacs+ &lt;group-name&gt;\n server name &lt;serv-name&gt;\n ip tacacs source-interface GigabitEthernet0\n!\naaa authentication login &lt;list-name&gt; group &lt;group-name&gt; local\naaa authorization exec &lt;list-name&gt; group &lt;group-name&gt; local if-authenticated\naaa authorization commands 15 &lt;list-name&gt; group &lt;group-name&gt; local if-authenticated\naaa accounting commands 1 &lt;list-name&gt; start-stop group &lt;group-name&gt;\naaa accounting commands 15 &lt;list-name&gt; start-stop group &lt;group-name&gt;\naaa session-id common\n!\n! using the list-name 'default' will apply the AAA methods to all lines without additional config\n!\nline vty 0 4\nlogin authentication &lt;list-name&gt;",
    "crumbs": [
      "CCNP",
      "Infrastructure Security",
      "AAA"
    ]
  },
  {
    "objectID": "Azure Basics (AZ-900).html",
    "href": "Azure Basics (AZ-900).html",
    "title": "Azure Basics (AZ-900)",
    "section": "",
    "text": "Azure Acronyms\n\nACU - Azure compute unit - way to compare CPU performance across different SKUs\nSKU - Stock keeping unit - describes particular type of purchasable product (VM SKU)\nRBAC - Rule-based access control - authorization control system in Azure\nRG - Resource groups - folders in Azure for organizing resources\nASG - Application security group - group of like resources for use with NSG rules\nARM - Azure resource manager - single management plane for all of Azure\nACI - Azure container instance - Useful for small scale use of containers in Azure\nAKS - Azure kubernetes service - Used for container orchestration and management\nACR - Azure kubernetes registry - Used to keep track of valid container images\nUDR - User-defined routes - made by modifying the route table(s) in Azure\nNVA - Network virtual appliance - Network VM such as Cisco CSR, Palo Alto VM-100\nP2S - Point to site - Method for connecting individual hosts to Azure via VPN\nER - Express route - Private link connectivity to Azure through an ISP\nNSG - Network security group - Azure stateful ACL\nCDN - Content delivery network - places copies of cached data at edge nodes in many locations, allowing better latency and performance\n\n\n\n\nInteracting with Azure\n\nAccess Methods\n\nAzure Portal\n\nWeb GUI for managing Azure\nAll aspects of Azure are possible to manage through the portal\n\nAzure CLI\n\nText-only interface for Azure with Bash\nAllows for automation and greater efficiency than the portal\n\nAzure PowerShell\n\nAlso possible to interact with Azure through PowerShell\nPowerShell is also useful for many other windows tasks, which makes skills with PowerShell more transferrable outside of Azure than the CLI or Portal\n\nCloud Shell\n\nAllows access to either a Bash (Azure CLI) or PowerShell terminal through the web or mobile app\nHas dedicated storage, allowing persistent data between sessions\nAccessed via the shell icon at the top right corner of the web portal\nSometimes bugs out and needs to be refreshed with clear\n\nAzure Mobile App\n\nAnother option for interaction with Azure - can access basic portal functions and the Azure cloud shell via Mobile\n\n\n\n\nARM & ARM Templates\n\nARM stands for Azure Resource Manager\nAll configuration in Azure is brokered through Azure resource manager control plane - the Azure portal, PowerShell, CLI, REST APIs all interact with Azure through ARM\nEnsures consistency between all forms of configuration by keeping control plane consistent\nAll Azure resources actually created with JSON ARM templates which are visible in Azure under ‘Automation &gt; Export Template’\nTemplates are JSON files that define infrastructure configurations for Azure resources\nIdempotent, declarative and reusable\nVery useful for automation of Azure\nKey sections for ARM templates:\n\nSchema - Defines ARM template version\nContent Version - Optional, for declaring version of that specific template\nParameters - Allows parameterization of template\nVariables - Defines reusable variables in the template\nResources - Specifies Azure resource being deployed/modified, including type, name, location and properties\nOutputs - Defines what returns after ARM template completes, such as resource IDs or strings\n\nExample ARM template:\n\n                    {\n              \"$schema\": \"https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#\",\n              \"contentVersion\": \"1.0.0.0\",\n              \"parameters\": {\n                \"storageAccountType\": {\n                  \"type\": \"string\",\n                  \"defaultValue\": \"Standard_LRS\",\n                  \"allowedValues\": [\n                    \"Standard_LRS\",\n                    \"Standard_GRS\",\n                    \"Standard_ZRS\"\n                  ],\n                  \"metadata\": {\n                    \"description\": \"Storage Account type\"\n                  }\n                }\n              },\n              \"variables\": {\n                \"storageAccountName\": \"[concat('storage', uniqueString(resourceGroup().id))]\"\n              },\n              \"resources\": [\n                {\n                  \"type\": \"Microsoft.Storage/storageAccounts\",\n                  \"apiVersion\": \"2019-06-01\",\n                  \"name\": \"[variables('storageAccountName')]\",\n                  \"location\": \"[resourceGroup().location]\",\n                  \"sku\": {\n                    \"name\": \"[parameters('storageAccountType')]\"\n                  },\n                  \"kind\": \"StorageV2\",\n                  \"properties\": {}\n                }\n              ],\n              \"outputs\": {\n                \"storageAccountName\": {\n                  \"type\": \"string\",\n                  \"value\": \"[variables('storageAccountName')]\"\n                }\n              }\n            }\n\n\n\nCloud Computing Fundamentals\n\nCloud Computing Vocabulary\n\nHigh Availability - Cloud computing allows near-instant failover, as you can abstract the applications from the hardware much more than in traditional deployments\nReliability/Fault Tolerance/Disaster Recovery - Resiliency through deployment in multiple locations/regions and avoiding single points of failure\n\nAzure is auto-healing - if a node or disk fails, services will migrate\nAzure always stores 3 copies of any data\nAzure allows auto-scale to scale capacity\nWhen considering reliability, you must design for failure scenarios\n\nDesigns considering HA and DR should utilize multiple regions, availability zones\n\n\nScalability - The ability of servers/services to increase/decrease resources as needed - with Azure you can set up auto-scaling to accomplish this for you\n\nHorizontal scaling - ‘scaling out’, adding additional VMs for increased demands\nVertical scaling - ‘scaling up’, increasing resources (CPU, RAM) on a particular host\n\nPredictability - With cloud deployments predictability can be ensured (via scaling, HA, load balancing etc) to provide a consistent user experience - costs are also predictable thanks to cost tracking analytics and resource usage forecasting\n\nAzure has specific SKUs, ACUs that will always perform the same way\nAPIs and templates are consistent between regions\nUsing templates and automation can assist in keeping things predictable\n\nSecurity - Cloud security is maintained through typical proper security best-practices like regular patching, account management, MFA, etc, however some of this can be offloaded to Microsoft with Azure and Azure Advisor will recommend best-practices as well\nGovernance - Standardizing your environments, meeting regulatory requirements and maintaining compliance with your policies\nManageability - Refers to both direct management of cloud resources through the portal, CLI, APIs etc and also monitoring and templating your deployments\n\n\n\nCapEx vs OpEx\n\nCapEx is capital expenditure - paying upfront for hardware\n\nOne key factor with CapEx is that you need to build out the hardware to account for peak capacity whereas OpEx can scale to load\n\nOpEx is operational expenditure - you pay for what you use\n\nCloud is consumption-based and OpEx\n\n\n\n\nIAAS, PAAS & SAAS\n\nIAAS - infrastructure as a service - VM in the cloud would be an example\n\nAzure handles compute, network and storage in their DCs\nMost flexible as you have access to the OS to change whatever you need\n\nPAAS - platform as a service - app services, serverless functions and logic apps\nSAAS - software as a service - O365 - pay purely for the application\n\n\n\nPrivate, Public & Hybrid Clouds\n\nPrivate cloud\n\nOwned by the enterprise itself\nCapEx, accessed locally\n\nPublic cloud\n\nAzure, AWS, GCP\nOpEx, accessed over the internet, many regions\n\nHybrid cloud\n\nCombination of both public and private cloud\nCan use Azure Arc for management with Azure platform in private cloud\n\n\n\n\n\nAzure Architecture, Containers & Resources\n\nRegions and Availability Zones\n\nRegions & Region Pairs\n\nRegions defined by 2ms round-trip latency (e.g. West US, East US, UK South, etc)\nChoosing regions close to intended users ensures lower latency, better performance\nData sovereignty requirements for certain organizations/governments may mean data has to say in certain regions\nUsing multiple regions for DR is a good idea to avoid the possibilities of natural disasters or failures affecting all services\nAzure has region pairs for replication that are located within the same regional boundaries (e.g. West US, East US & Canada Central, Canada East)\nAzure will not deploy updates to both members of a region pair at the same time to avoid causing issues in both locations\n\nAvailability Zones\n\nAvailability zones allow redundancy within regions\nThe different availability zones protect against datacenter-level problems affecting services within a region - can choose from 3 different availability zones in a subscription\nZonal assets like VMs allow you to choose availability zone\nZone redundant assets (usually Azure native services) deploy to all 3 zones by default\n\n\n\n\nResource Groups\n\nFunction like folders for organizing resources in Azure\nResources all must live in one and only one resource group\nCan have many different resources from different regions in one resource group\nUsually best to group resources based on usage - i.e. all resources for one firewall (VM, disk, public IP, NIC, etc) in one resource group\nCan apply RBAC, policies, budgets based on resource groups\n\n\n\nVirtual Machines\n\nVirtualized machine, example of IAAS\nVMs are their own resource in Azure but require other resources to function\nOther resources are data disks, OS disks, vNICs, NSGs, Public IPs, vNETs, etc\nPriced per hour and become more expensive the more CPU/RAM allocated to it\n\n\n\nScale Sets\n\nA pool of identical, load balanced VMs, used for auto-scaling horizontally\nCan be run at a very large scale of potentially thousands of VMs\n\n\n\nContainers\n\nOperate like lightweight virtual machines that share the OS kernel but have their own file systems and processes. Highly efficient compared to VMs as the resources used for the OS only required once for multiple containers - also start up quickly which allows them to be effective for dynamic scaling. They also run in a consistent fashion across multiple cloud vendors and on-prem clouds. They can be implemented at a small scale in Azure with ACI (Azure Container Instance), or, if more orchestration is required with AKS (Azure Kubernetes Service).\n\n\n\nApp Services\n\nPAAS offering used to build web and mobile apps and APIs directly in the cloud without the need for containers or VMs. Infrastructure management is abstracted and managed by Azure. Highly scalable and provides built-in HA and load balancing.\nCan be connected into a VNET via networking tab, requiring a subnet within the VNET in the same region as the app service\nIf connecting to a different region, connecting to the VNET requires P2S VPN gateway integration\nWeb Apps - Website and online apps hosted by Azure - auto-scaling and load balancing\nWeb Apps for Containers - Similar to Web Apps above but containerized and portable between different environments\nAPI Apps - Used to allow API to your backend for programmatic interfacing\n\n\n\nAzure Functions/Serverless\n\nAnother infrastructure-abstracted method of running code in Azure, triggering based on certain events or triggers. Azure functions require you to write the code, whereas Azure logicapps are drag and drop and can be done by anyone without coding experience.\n\n\n\n\nAzure Storage\n\nStorage Accounts\n\nDifferent storage service types are queue, table, files and container blobs\nUnique Azure namespace with its own web address\ncompanyname.&lt;storagetype&gt;.core.windows.net, for example\nExists in particular regions - care should be taken to make sure it exists in the same region as resources using it\nPerformance\n\nStandard - always general purpose V2\nPremium - options are block blob, page blob and files\n\nBlock blobs are for unstructured data\nPage blobs are for VHDs of Azure VMs\nAzure files is a managed file share service accessed over SMB or NFS\n\n\nRedundancy\n\nAll data in Azure has minimum of 3 copies regardless of redundancy tier\nLRS - Locally Redundant Storage - basic protection against rack failures\nZRS - Zone Redundant Storage - protects against DC failures\nGRS - Geo Redundant Storage - protects against region failures\nGZRS - Combines GRS & ZRS - protects against all failure scenarios\nPremium storage types can only use LRS, ZRS\n\n\n\n\nBlob Storage\n\n‘Binary Large Object’ - basically any type of files you want\nBlock blobs - Store unstructured data, binary files up to 4.7TB\nAppend blobs - Optimized for ‘append’ operations - ideal for logging\nPage blobs - Mainly used for VHDs, can be up to 8TB in size\n3 different pricing tiers - Hot (for frequently accessed files), Cold (Lower storage cost but higher access times), Archive (Very low cost and high access times)\nCan automate moving blobs from hot to cold, archive or delete based on file age/last modified date\n\n\n\nDisk storage\n\nComes in 4 types: HDD, Standard SSD, Premium SSD and Ultra Disk\nAzure ensures data is redundant, backed up and always accessible\n\n\n\nFile Transfers to Azure\n\nAzCopy - Command-line utility for copying files to Azure\nazcopy cp \"filename.mp4\" \"https://mystorage.blob.core.windows.net/contain\nStorage Explorer - GUI utility that allows drag & drop like Windows explorer\nAzure File Sync - Syncs SMB fileshares between Azure & on-prem automatically\nAzure Data Box - Offline data transfer method for large file transfers to Azure, an encrypted data storage solution shipped to your location - files added and moved to Azure once device is shipped back\nAzure Migrate - helps to assess and migrate on-prem resources into Azure - will help with compatibility, sizing, estimating cost and migration of resources\n\n\n\n\nAzure IAM & Management\n\nEntra ID\n\nIAM (Identity & Access Management) service for Azure that provides an identity repository, including users, groups, policies and security features\nTenant is a dedicated instance of Entra ID representing an organization, created when signing up for Azure\nEach tenant is distinct - users belong to only one tenant but can be guests on other tenants\nSubscriptions are billing entities that use one specific Entra ID tenant - tenants can have multiple subscriptions under them\nCan set budget, RBAC and policy at subscription level - this will be inherited by RGs within the subscription or overridden at the RG level\nSubscriptions can be separated for different environments (prod & test) or budget control for different cost centers\nGroups can either be assigned manually, dynamically assigned based on user attributes (for example ‘Department:HR’ assigning a user to an HR group) or dynamic based on device\nSimilar to groups, administrative units can be manually or dynamically assigned and are a way of scoping management responsibilities of administrators within a subscription\n\n\n\nAzure ADDS\n\nFully managed PAAS solution for active directory in Azure\nUseful for migration of legacy on-prem applications to cloud that don’t support modern entra-id authentication methods (OAuth 2.0)\nSupport traditional ADDS features like group policy, LDAP, NTLM and Kerberos\nNeeds to act as a completely separate domain, cannot extend existing AD forest to Azure ADDS\nAs an alternative, you can host your AD DS in a virtual machine in Azure instead and extend your domain into Azure that way\n\n\n\nManagement Groups\n\nAllows setting budget, RBAC and policy at a higher level than subscriptions\nCan choose particular management groups for certain subscriptions, RBAC, policies and budget will be inherited by subscriptions and RGs in subscriptions\nRoot is always at the top - can create up to 6 levels below this\n\n\n\nConditional Access\n\nPremium feature in Entra ID that uses if/then logic to allow access to defined applications\nOften paired with MFA\nConditions selected from a policy to determine access, including\n\nUser/group\nApplication\nLocation (IP)\nApproved device\nMFA requirements\n\n\n\n\nAzure Governance\n\nAllows you to control what users can and cannot do through defined policies in Azure, preventing creation/modification of resources that don’t comply with the polices\nRBAC (Role-Based Access Control) allows you define user’s access to resources (allow access to specific resource groups, services with read or read/write permissions)\nLocks prevent the modification or deletion of subscriptions or resources\nLocks can be ReadOnly locks or CanNotDelete locks and are inherited by lower resources (e.g. applying a lock to a resource group would apply to all resources in group)\nBlueprints are templates for creating standard Azure environments from scratch\n\n\n\nAzure Policy\n\nPolicy assignment allows enforcing policies at different levels of Azure deployment (management group, subscription, resource group, resource)\nPolicy definitions define the evaluation criteria and whether they should be allowed or denied\nInitiative definitions are collections of policies with a specific goal\n\n\n\nTags\n\nConsist of a name and value pair\nUp to 50 tags can be assigned to a resource\nTags are not inherited from higher resources\n\n\n\nAzure Bastion\n\nPaaS Jumphost solution in Azure\nConnect to Bastion host via HTML5 browser, connection secured with TLS\nAllows you to access VMs without allowing any access through NSGs/adding any Public IPs\n\n\n\nPasswordless Auth\n\nReplacing password prompt with alternative auth\nMFA from authenticator app is one option\nAnother is a hardware key like a Yubikey\n\n\n\nSSPR\n\nSelf-Service Password Reset - allows users to reset their own Azure passwords\nCan use email, mobile app, mobile auth, phone numbers as reset methods\nBy default, administrators will require at least two methods to reset their passwords for security reasons\n\n\n\n\nAzure Monitoring & Pricing\n\nAzure Monitor\n\nDashboard in Azure that gathers telemetry from Azure resources\nLog Analytics stores and queries Azure monitor data (using KQL queries)\nApplication insights provides performance insights for web apps\nMonitor alerts notifies you of unexpected events (such as VM unresponsive, high app latency, VM using excessive CPU, etc)\n\n\n\nAzure Service Health\n\nDashboard in the Azure portal that notifies you of any service issues with the Azure platform, what regions the issues are in, and can be set up to alert you of such issues\n\n\n\nAzure Pricing\n\nAzure Cost Management\n\nDashboard in Azure for management of costs\nWill offer recommendations to improve your cost\n\nPricing Factors\n\nResource sizing, resource types, location, and bandwidth in/out of Azure all influence your pricing in Azure\nTo help predict your prices, you can use the Azure pricing calculator\n\nReserved Instances/Capacity\n\nYou can reserve instances or capacity in Azure to pay less money by committing to 1 to 3 years instead of monthly usage\n\n\n\n\n\nAzure DR, Backups & Update Management\n\nDevice Registration\n\nCan register devices with Azure Entra ID tenant - can manage these devices with Microsoft Intune as well\n\nUpdate Management\n\nAzure can evaluate VM compliance for updates on Windows & Linux machines and schedule deployments and reboots for these updates\n\nDesired State Configuration (DSC)\n\nCan be used to enforce desired state on VMs through automation\nVMs are added to the DSC, which will then enforce configuration based on declared desired state via Powershell scripts\n\nAzure Backups\n\nNative feature in Azure that allows you to create automated backups of VMs, On-premise machines, SQL servers and restore from backups if required\n\nAzure Site Recovery\n\nAllows recovery of Azure resources from one region to another in case of a disaster\nCan be configured to fail over many resources at once\n\n\n\n\nAzure Database Fundamentals\n\nAzure SQL\n\nDatabase-as-a-service - hardware & infrastructure managed by Azure\n\nAzure Database for MySQL, PostGreSQL\n\nOpen-source MySQL & PostGreSQL implementation in Azure\nPAAS - service infrastructure managed by Azure\nPostGres most commonly used in finance and manufacturing, as it offers automated failover functionality\n\nDatabase Migration Services\n\nAzure tool to migrate Microsoft SQL to Azure SQL\n\nCosmos DB\n\nAzure DB that allows global access to database with low latency\nAllows automatic scaling\nSupports SQL, MongoDB and Cassandra\nDownside is it can be very expensive\n\n\n\n\nOther Azure Features/Services\n\nAzure Marketplace\n\nMicrosoft and other partner offerings in Azure, such as VMs, templates and services\n3rd party integrations into Azure to make it easier to use their tools (PA VMs, CSRs, etc)\n\nAzure Advisor\n\nAzure function that provides recommendations to improve cost, security and availability/reliability\nIt’s a good idea to follow the advisor’s recommendations unless you have specific reasons not to\n\nMicrosoft Defender for Cloud\n\nA separate portal in Azure that provides threat alerts, policy and compliance metrics and a security score\n\nAzure DDOS Protection\n\nAzure has a default DDOS protection service for all Azure resources exposed to the public internet\n\nExternal Guest Access\n\nCan create a new account for an external user, or invite user as guest to Azure tenant\n\nARC\n\nAllows bringing Azure ARM control plane to other clouds or on-prem clouds\n\nAzure Virtual Desktop\n\nVirtualized version of Windows running 100% in the cloud\n\nAzure Sentinel\n\nAzure-native SIEM",
    "crumbs": [
      "Azure",
      "Azure Basics (AZ-900)"
    ]
  },
  {
    "objectID": "BGP.html",
    "href": "BGP.html",
    "title": "BGP",
    "section": "",
    "text": "AD 200 for iBGP, 20 for eBGP\nForms connection over TCP port 179 - does not need direct connection\nOnly advertises best routes, all others not advertised\nBest-path Algorithm\n\nWeight (Highest)\nLocal Preference (Highest)\nOriginated locally\nAS_PATH (Shortest)\nOrigin code (IGP &gt; EGP &gt; ?)\nMED (Lowest)\nPath (eBGP &gt; iBGP)\nIGP metric (Lowest)\nRoute age (Oldest, only compared when routes from different eBGP peers)\nRID (Lowest)\n\n\nWe Love Oranges AS Oranges Mean Pure Refreshment\n\niBGP\n\nTTL of 255 by default\nDoes not change next-hop by default - can be changed with neighbor &lt;ip-address | peer-group-name&gt; next-hop-self\nUses split horizon1 for loop prevention\n\neBGP\n\nTTL of 1 by default - can be increased with neighbor &lt;ip&gt; ebgp-multihop 255\nCan also use neighbor &lt;ip&gt; ttl-security hops &lt;hop-count&gt;\nDifference between above is that eBGP-multihop sets the maximum range allowed, whereas TTL-security sets the exact range\nIf peering with different update source but not through additional hops, can use neighbor &lt;ip&gt; disable-connected-check\nDoes change next-hop by default\n\nPeer groups\n\nCan be used when multiple neighbors have the same requirements\nUse neighbor &lt;name&gt; peer-group to set up peer-group, then perform config under neighbor &lt;name&gt; &lt;command&gt;\nPeer groups applied to neighbor with neighbor &lt;ip&gt; peer-group &lt;name&gt;\nCan check with show ip bgp peer-group\nPeer groups are natively set up on the back end to limit CPU usage - only purpose is simplification of config\n\nECMP\n\nCan enable load-balancing with maximum paths &lt;path#&gt; command\nOnly takes effect when many parameters on routes match - Weight, local preference, AS-PATH (both numbers and lengths), origin code, MED, IGP metric\n\nExact match of prefix in route table required for advertisement - configuring null route to prefix common\nPublic range for 2-byte AS: 1 - 64511, Private range: 64512 - 65535\n\nAlso 4-byte ASs available now due to exhaustion of 2-byte ASs\n\nGood idea to change update source to a loopback interface with neighbor &lt;ip&gt; update-source &lt;loopback&gt;\nclear ip bgp * soft useful to refresh route table without tearing down neighborships\nSelectively advertise default route with neighbor &lt;IP&gt; default-originate [route-map &lt;CONDITION&gt;]\nAdvertise a different AS to a peer than router bgp AS with neighbor &lt;IP&gt; local-as &lt;OldAS&gt; - useful in migration\nneighbor &lt;IP&gt; fall-over can be used to immediately tear down session if IGP route to neighbor disappears",
    "crumbs": [
      "CCNP",
      "L3 Technologies",
      "BGP"
    ]
  },
  {
    "objectID": "BGP.html#footnotes",
    "href": "BGP.html#footnotes",
    "title": "BGP",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nBGP split horizon prevents loops in iBGP by disallowing advertisements received from one peer to be advertised on to another. This makes full mesh a requirement for iBGP unless using route reflectors and/or confederation↩︎",
    "crumbs": [
      "CCNP",
      "L3 Technologies",
      "BGP"
    ]
  },
  {
    "objectID": "DHCP.html",
    "href": "DHCP.html",
    "title": "DHCP",
    "section": "",
    "text": "General Notes\n\nUsed to assign IP addresses to hosts without requiring static assignments locally\nCan operate outside of subnet with ip helper-address on interface to forward DHCP requests to the server\n\nThis also exists in v6 as ipv6 dhcp relay destination &lt;v6-IP&gt;\n\nWith IPv6, both stateful and stateless DHCP exist\n\nStateful advertises IPv6 addresses, prefixes, gateways etc like a typical DHCP server in v4\nStateless allows hosts to configure their own address, gateway etc locally with SLAAC and only advertises other information such as DNS, TFTP server, etc\nStateless DHCP is configured with ipv6 nd other-config-flag under interface on segment that will advertise the information\n\nDORA\n\nDiscover - Broadcast by client discover DHCP server on segment using port 67\nOffer - Server responds offering IP, SN Mask, gateway, DNS using port 68\nRequest - Client requests to use offered information\nAcknowledge - Server acknowledges and agrees, records information\n\nSARR - IPv6 DORA equivalent\n\nSolicit - Client sends v6 DHCP request to all-DHCPv6-server solicit node multicast address FF02::1:2\nAdvertise - Server responds with unicast ADVERTISE message to client\nRequest - Client requests to use offered information\nReply - Server acknowledges and agrees, records information (if stateful)\n\n\n\n\n\nUseful show commands/debugs\n\nshow ip dhcp binding - When using a local DHCP server on a router, see DHCP binding info\nshow ip dhcp conflict - Show any IPs conflicting with DHCP\ndebug ip dhcp server packet - See DHCP traffic in flow\nshow ipv6 dhcp binding - Same but for v6\nshow ipv6 dhcp interface - Show interfaces advertising v6 address information\n\n\n\n\nStandard DHCP Config\nIPv4\nip dhcp excluded-address 10.8.8.1 10.8.8.10\n!\nip dhcp pool POOL-A\nnetwork 10.8.8.0 255.255.255.0\ndefault-router 10.8.8.1\ndns-server 192.168.1.1\nIPv6\nipv6 dhcp pool DHCPV6POOL\naddress prefix 2001:DB8:A:A::/64\ndns-server 2001:DB8:B:B::1\ndomain-name cisco.com\n!\ninterface GigabitEthernet0/0\nipv6 dhcp server DHCPV6POOL ! required to advertise IPs in v6 unlike v4",
    "crumbs": [
      "CCNP",
      "Infrastructure Services",
      "DHCP"
    ]
  },
  {
    "objectID": "EIGRP.html",
    "href": "EIGRP.html",
    "title": "EIGRP",
    "section": "",
    "text": "General Notes\n\nAD 90 internal, 170 external\nMulticast 224.0.0.10 standard for hellos, port number 88\nUses DUAL (Diffusing Update Algorithm)\nK values (metric parameters) must match for neighbor relationship to form\n\nK values set with the metric weights command - should be left default\nBy default uses bandwidth (slowest in path) & delay (cumulative) to compose metric\n\nOnly advertises best routes, all others not advertised\nHello and hold timers do not need to match for adjacency (unlike OSPF)\nCan manually define neighbors (like in BGP) to send hellos unicast instead of multicast\nSuccessor route - best path\nSuccessor - First next-hop along successor route\nConfig can be performed classic (route eigrp 100) or named (router eigrp &lt;name&gt;) modes\n\nCan convert to named mode with eigrp upgrade-cli, hitless conversion\n\nOnly IGP that can do unequal cost load-balancing\n\nAll routes must meet feasibility condition\nCandidacy for routes can be modified with variance command\n\nFeasibility condition:\n\nReported distance (RD - neighbor’s distance to node) must be shorter than feasible distance (FD - distance locally) to prevent loops\nIf conditions passed, route is considered feasible successor and included in EIGRP topology table for fast failover in reconvergence event\n\nWhen using named-mode in IPv6, all interfaces automatically advertised into EIGRP when address-family initiated\n\nCan be shut down individually or under af-interface default with shutdown, then no shutdown under interfaces you want advertised\n\n\n\n\n\nFeatures\n\nAuthentication\n\nSupports both MD5 & SHA-256 auth (named) or just MD5 (classic)\nMD5 configuration done with key chain in global config\nKey-id numbers must match for successful auth\nApplied under physical interfaces in classic mode or af-interfaces in named mode\n\nkey chain MD5_KEYS\n key 1\n  key-string MD5_PASS\n!\nrouter eigrp MULTI-AF\n !\n address-family ipv4 unicast autonomous-system 100\n  !\n  af-interface default\n   authentication mode hmac-sha-256 SHA_DEFAULT\n  exit-af-interface\n  !\n  af-interface GigabitEthernet1.58\n   authentication mode md5\n   authentication key-chain MD5_KEYS\n  exit-af-interface\n\n\nSummarization\n\nPossible anywhere in topology\nConfigured with summary-address &lt;network&gt; &lt;mask&gt; under af-interface in named mode, under physical interface in classic mode\nLeak map can be used to leak longer mask prefixes included in summary\n\nsummary-address 0.0.0.0 0.0.0.0 leak-map &lt;route-map&gt;\n\nNull0 installed on router to match summary address to prevent loops\nCan define metric on summary-address with the summary-metric command under topology base\n\n\n\nRoute filtering\n\nPossible anywhere in topology\nCommonly performed with distribute-list prefix &lt;prefix-list&gt; &lt;in/out&gt; &lt;interface&gt;\nCan also use route-maps to match on tags, metric\n\nFor example:\n\nroute-map FILTER_ON_TAGS deny 10\n match tag 4\n!\nroute-map FILTER_ON_TAGS permit 20\n!\nrouter eigrp 100\n distribute-list route-map FILTER_ON_TAGS in\n\n\n\nSplit horizon\n\nPrevents advertisements of prefixes out same interface they’re received\nUsed for loop prevention (along with feasibility condition, router-id)\nCan turn off (useful for hub & spoke) with no ip split-horizon eigrp &lt;AS&gt;\n\n\n\nDefault routing\n\nCan be advertised with quad 0 summary route under interface\nCan also be redistributed from static route\n\n\n\nStub\n\nPrevents advertisment of anything other than connected routes by default\nPrevents site from being used for transit\nBreaks query domain\nBest used when sites have no downstream neighbors\nCan use leak-maps to advertise normally suppressed routes\n\n\n\nStub-site\n\nAllows advertisement of routes learned on LAN but not WAN interfaces\nLimits EIGRP query-domain and prevents site from being used for transit\nEnabled with eigrp stub-site\n\nMutually exclusive with eigrp stub\n\nInterfaces towards hub/WAN identified with stub-site wan-interface under af-interface\n\n\n\nOffset-lists\n\nCan be used to increase metric for a specific route/interface\nConfigured under topology base with:\n\noffset-list &lt;access-list&gt; in &lt;metric&gt; &lt;interface&gt;\n\n\n\n\nRedistribution\n\nSee Redistribution page for details on that\n\n\n\n\n\nUseful debug/show commands\n\nshow ip eigrp interface brief - Displays interfaces participating in EIGRP, RTT, pending routes, etc\nshow ip eigrp neighbors - Displays neighbors and neighbor states\nshow ip eigrp topology all-links - Displays EIGRP topology table, successors, feasible successors\nshow ip protocols - Shows various information about active routing protocols\ndebug eigrp packet - Debugs basically everything EIGRP\naccess-list 111 permit eigrp any any, followed by debug ip packet detail 111 - for packet debugging\n\n\n\n\nStandard EIGRP Config\nrouter eigrp NAME\n !\n address-family ipv4 unicast autonomous-system 100\n  !\n  af-interface default\n   passive-interface\n  exit-af-interface\n  !\n  af-interface GigabitEthernet0/1\n   no passive-interface\n  exit-af-interface\n  !\n  topology base\n  exit-af-topology\n  network 10.1.1.2 255.255.255.255\n  eigrp router-id 150.1.5.5\n exit-address-family",
    "crumbs": [
      "CCNP",
      "L3 Technologies",
      "EIGRP"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Bren’s Networking Notes",
    "section": "",
    "text": "Hi all,\nI put this site together to host notes created during my time studying for the CCNP ENARSI exam. The CCNP navigation follows the flow of the ENARSI exam blueprint.\nSince then, I’ve also expanded it to include some Azure notes, some Palo Alto notes and some fitness & lifestyle notes. I hope you find something useful or informative here.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "index.html#about-me",
    "href": "index.html#about-me",
    "title": "Bren’s Networking Notes",
    "section": "About me",
    "text": "About me\nI’m a network engineer with a passion for learning based in beautiful British Columbia, Canada. Aside from tech, I love weightlifting, hiking and gaming. You can find me on my LinkedIn or on my YouTube channel below.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "IPsec & GRE VPN.html",
    "href": "IPsec & GRE VPN.html",
    "title": "IPsec & GRE VPN",
    "section": "",
    "text": "GRE\n\nStands for Generic Route Encapsulation\nTunneling method that can tunnel many different protocols inside GRE header\nUsed as default encapsulation method for Cisco tunnel interfaces\nIP protocol type 47 used in IP header\n\nSecurity features of IPSec\n\nData origin authentication\n\nVerifying where packet came from\n\nData integrity\n\nEnsuring packet wasn’t changed in transit\n\nConfidentiality\n\nEncryption, preventing packet from being intercepted and read\nPrevented by limited allowed window\n\nConfidentiality is the mainly thought-of core feature\n\nIPSec uses symmetric key encryption\nPoint-to-point tunnels in almost all cases, GETVPN can be P2MP\nTunnel keys dynamically negotiated through IKE\nIKEv2 is superior but not supported by all platforms\n\n\n\n\nPhase one establishes ISAKMP SA, secure tunnel to negotiate phase two through\nPhase two establishes IPsec SA, tunnel used to protect actual data traffic\nIn Phase 1:\n\nAuthentication either PSK (Pre-shared key) or certificate based\nDH1 used to exchange crypto keys\n\nHigher DH group number is more secure\n\nEncryption algorithms used to protect traffic\n\nPossibilities include DES, 3DES, AES-128, AES-256, etc\n\nHash algorithm used to ensure packet wasn’t modified in transit\n\nIKEv1 supports MD5, SHA-1\n\nTunnel lifetime is negotiated\nIKE parameters must match in order for phase 1 to complete successfully\nMain mode and aggressive mode both options for completing this step\n\nMain mode preferred as aggressive has security issues\n\n\nIn Phase 2, following are negotiated:\n\nSecurity protocol\n\nESP (Encapsulating Security Payload) or AH (Authentication Header)\nAH does not support encryption, rarely used\n\nEncapsulation modes\n\nTunnel or transport\nTunnel adds new IP header, used for actually tunneling traffic\nTransport mode used for host-to-host applications or combined with GRE which does the tunneling itself\n\nEncryption (used for actual data traffic, not just tunnel)\n\nDES, 3DES, AES-128, AES-256, etc\n\nAuthentication (hashing)\n\nMD5, SHA, etc\n\nCombination of the above called IPsec Transform Set\nOnly performed in QM (quick mode)\n\nUDP 500 (ISAKMP), 4500 (NAT-T) are ports used to establish control plane\n\n4500 is only used with NAT-T2\n\nIPsec data plane uses IP protocol 50 (ESP), 51 (AH) in the IP header",
    "crumbs": [
      "CCNP",
      "VPN & Encryption",
      "IPsec & GRE VPN"
    ]
  },
  {
    "objectID": "IPsec & GRE VPN.html#footnotes",
    "href": "IPsec & GRE VPN.html#footnotes",
    "title": "IPsec & GRE VPN",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nDiffie Hellman - asymmetric key algorithm used for IPsec, SSL, SSH and others. Peers create public and private keys, exchange public key and generate symmetric key (shared secret) with their own private key and peer’s public key.↩︎\nNAT-Traversal add an additional UDP header which encapsulates the IPsec ESP header. Since this header is not encrypted it allows NAT without breaking packet integrity requirements of IPsec.↩︎",
    "crumbs": [
      "CCNP",
      "VPN & Encryption",
      "IPsec & GRE VPN"
    ]
  },
  {
    "objectID": "MPLS.html",
    "href": "MPLS.html",
    "title": "MPLS",
    "section": "",
    "text": "General Notes\n\nUses shim headers inserted between IP and MAC headers to switch packets - labels\nAllows for BGP-free core in SP network where connectivity between BGP nodes is achieved by label switching\nMPLS labels switched hop by hop (think ethernet, not IP)\nLDP - Label Distribution Protocol used for MPLS operation\n\nUses all-routers multicast (224.0.0.2), TCP port 646 src and dst for Hellos, unicast to neighbors once TCP session established\nUDP also used for initial discovery messages\nLDP requires CEF in order to exchange labels\nOnly IGP-learned or local routes are labelled, BGP routes not assigned a label\n\nPHP\n\nPenultimate Hop Popping - popping MPLS label on second to last router to avoid unnecessary overhead (processing shim header & IP)\nIn order to facilitate this, LDP routers advertise routes they own with an implicit null/POP label (label value of 3) that tells neighbors to pop LDP labels before sending for these routes\n\nLIB - Label Information Base - functions like L3 RIB\nLFIB - Label Forward Information Base - functions like L3 FIB\nLSR - Label Switched Router - any router that participates in MPLS\nLSP - Label Switched Path - path through LSRs labelled packet takes throughout MPLS domain\nMP-BGP (VPNv4) used with VRFs and LDP to form MPLS L3VPNs\nRSVP - Resource Reservation Protocol - used for traffic engineering\nMPLS packet format\n\nProtocol identifier (PID) in layer-2 frame specifies that an MPLS packet will follow\nBottom-of-stack bit in shim header indicates whether additional labels follow\nNesting of LDP labels used for MPLS VPN, MPLS TE (Traffic Engineering)\n\n\n\n\n\nMPLS L3VPN\n\nHigh level steps\n\nEstablish LSP between PEs using an IGP and LDP\nExchange routes with customer between PE-CE using IGP or BGP\nExchange customer routes between PEs with iBGP and an MPLS VPN label using VPNv4 AF (address family)\nLabel switch between the PE routers using LDP transport label\n\nMPLS L3VPN details\n\nUses MP-BGP between PE (provider edge) routers which tag packets with VPNv4 address\nUses VRFs to peer with customers over BGP or IGP\nIf using IGP instead of BGP for CE peering, must redistribute into BGP VPNv4 AF\nVPNv4 address family in iBGP used to form neighborships and share VPNv4 routes\nVPNv4 neighbor relationships must be formed from a loopback with a /32 mask\nnext-hop-self not required when running VPNv4 address family, does it for you automatically\nCombination of RD (route distinguisher) and IPv4 address makes up VPNv4 address\nVPNv4 address only used by MP-BGP, transparent to P routers in core\nPE routers tag traffic with two MPLS labels, inner VPN label defining customer and outer LDP label used for label switching\nP (provider) routers perform label switching along LSP but do not require MP-BGP, do not read VPN labels, only read outer LDP label\nCE (customer edge) routers - do not see MPLS labels, connect to PE routers\nRoute reflectors function in the exact same way, still needed for iBGP peering using VPNv4 if not running a full mesh topology\nIn order to load balance when using RRs in L3VPN, both routes to the same destination must be using different RDs, otherwise only one best path is chosen\nWhen running L3VPN via OSPF & CE router is using a VRF with OSPF, capability vrf-lite must be entered under router OSPF process or routes will not be installed by OSPF - this is because they have a special ‘downward’ bit flagged when transiting L3VPN that disallows them to be installed to vrf-aware OSPF to prevent loops in VPNv4 backbone\n\nOSPF Domain-ID\n\nOSPF routes redistributed from VRF into VPNv4 BGP will show up as inter-area routes when learned by peers - by default BGP redistributed routes would show up as E2\nHowever, the above is only true if your OSPF process id (router ospf &lt;x&gt;) matches or you manually set the domain-ID\nDomain-ID set with domain-id &lt;x&gt; under router ospf\nWith domain-ID not matching, OSPF routes will show up as E2\nCan be used for traffic engineering if CE is peering with multiple PEs, as OSPF will always prefer IA routes over E2 routes\n\nOSPF Sham Link\n\nUsed to allow OSPF routes across L3VPN to show up as intra-area instead of inter-area\nUsed in scenarios where CE has a backdoor route to another network connected to the MPLS & MPLS should be preferred\nConfigured by creating a /32 loopback route on both PEs, advertising this into BGP within the VRF (NOT VPNv4) and using the area 1 sham-link &lt;SRC&gt;&lt;DST&gt; cost X command under OSPF\nThe loopbacks used for the sham link must not be advertised into the OSPF process\n\n\n\n\n\nUseful show commands/debugs\n\nshow mpls interfaces - shows interfaces participating in LDP\nshow mpls ldp neighbor - shows LDP neighbors\nshow mpls ldp binding - shows LDP label bindings to prefixes\nshow mpls forwarding-table - shows LFIB\nshow bgp vpnv4 unicast all - checking that VPNv4 routes being sent/received\ndebug mpls ldp transport events - self-explanatory\ndebug bgp vpnv4 unicast updates - useful for troubleshooting VPNv4 issues\n\n\n\n\nConfig\n\nStandard MPLS Config\nrouter ospf 1\n mpls ldp autoconfig\n\n\nExtended MPLS Config\nmpls ldp router-id Loopback0 force\n!\nint gi0/1\nmpls ip\nmpls ldp discovery transport-address interface\n!\nmpls ldp password required\nmpls ldp neighbor 150.1.5.5 password CISCO\nmpls ldp neighbor 150.1.6.6 password CISCO\n!\naccess-list 10 permit 150.1.0.0 0.0.255.255\n!\nno mpls ldp advertise-labels\nmpls ldp advertise-labels for 10\n\n\nStandard L3VPN MPLS Config (PE config, OSPF to CE)\nip vrf VPN_A\n rd 1:1\n route-target export 1:1\n route-target import 1:1\n\ninterface Loopback0\n ip address 150.1.7.7 255.255.255.255\n!\n!\ninterface GigabitEthernet0/2\n ip vrf forwarding VPN_A\n ip address 155.1.79.7 255.255.255.0\n!\nrouter ospf 10 vrf VPN_A\n redistribute bgp 100 subnets\n network 0.0.0.0 255.255.255.255 area 0\n!\nrouter ospf 1\n mpls ldp autoconfig\n router-id 150.1.7.7\n network 0.0.0.0 255.255.255.255 area 0\n!\nrouter bgp 100\n bgp log-neighbor-changes\n no bgp default ipv4-unicast\n neighbor 150.1.5.5 remote-as 100\n neighbor 150.1.5.5 update-source Loopback0\n !\n address-family vpnv4\n  neighbor 150.1.5.5 activate\n  neighbor 150.1.5.5 send-community extended\n exit-address-family\n !\n address-family ipv4 vrf VPN_A\n  redistribute ospf 10\n exit-address-family\n\n\nL3VPN Internet Access Config\ninterface GigabitEthernet0/0\ndescription INTERNET_EXAMPLE\n ip address 10.0.0.1 255.255.255.252\n!\nip route vrf VPN_A 0.0.0.0 0.0.0.0 GigabitEthernet 0/0 10.0.0.2 global\nip route 0.0.0.0 0.0.0.0 GigabitEthernet 0/0 10.0.0.2\n!\nrouter bgp 100\naddress-family ipv4 vrf VPN_A\n default-information originate\n redistribute static\n!\nrouter ospf 10 vrf VPN_A\n default-information originate\n!\ninterface GigabitEthernet0/0\n ip nat outside\n!\ninterface GigabitEthernet0/1\n ip nat inside\n!\ninterface GigabitEthernet0/2\n ip nat inside\n!\nip access-list standard VPN_LOOPBACKS\n permit 150.1.0.0 0.0.255.255\n!\nip nat inside source list VPN_LOOPBACKS interface GigabitEthernet0/0 vrf VPN_A overload\n\n\nMPLS Config Explanation\n\nmpls ip - used to enable LDP on an interface or globally on the router\nmpls ldp router-id Loopback0 force - used to force the router-id used for LDP\nrouter ospf 1; mpls ldp autoconfig - used to automatically enable LDP on OSPF interfaces\nmpls ldp discovery transport-address interface - used to enable TCP connection over the physical interface IP instead of router-id\nmpls ldp neighbor &lt;IP&gt; password &lt;password&gt;; mpls ldp password required - configuring a password and making the password a requirement\nno mpls ldp advertise-labels; mpls ldp advertise-labels for 10 - only allow labels to be generated for a specific ACL (10 in this case)",
    "crumbs": [
      "CCNP",
      "VPN & Encryption",
      "MPLS"
    ]
  },
  {
    "objectID": "OSPF.html",
    "href": "OSPF.html",
    "title": "OSPF",
    "section": "",
    "text": "General Notes\n\nAD 110 for internal & external\nMulticast 224.0.0.5 for all OSPF routers, 224.0.0.6 for all DR/BDRs, port number 89\nAdvertises all routes to all nodes in area to build a topology before deciding best path\nHello and hold timers must match for adjacency (unlike EIGRP)\nAdjacency formed, DBD (database descriptor) packet sent describing LSDB (link-state database)\n\nOnce other neighbor determines which LSAs they’re missing, LSR (link-state request) packet sent to ask for missing LSAs and sync database\nAll OSPF routers in an area must share a common view of the database for OSPF to function\n\nDR/BDR Election\n\nNo real prepending - the only way to ensure a node does not become DR is by removing it from the election\nThis is done with ip ospf priority 0 under the interface you don’t want to become DR/BDR\n\nOSPF LSA Types\n\nType 1 - Router LSA\n\nGenerated by all OSPF routers, advertised intra-area, describes routers’ own interfaces, neighbors\n\nType 2 - Network LSA\n\nGenerated by DRs, advertised intra-area, describes routers on its segment\n\nType 3 - Summary LSA\n\nGenerated by ABRs, advertised inter-area to describe reachable networks to another area\n\nType 4 - ASBR Summary LSA\n\nGenerated by ABRs, adverised inter-area to describe how to reach an ASBR advertising external networks\n\nType 5 - External Summary LSA\n\nGenerated by ASBRs, advertised inter-area to describe external routes\n\nType 7 - NSSA External Summary LSA\n\nSame as above but generated in a NSSA where Type 5 LSAs are not allowed, reflooded as a Type 5 LSA if recieved by an ABR\n\n\nUse show ip ospf border-routers to see both ABRs, ASBRs in the OSPF process\nFor point-to-point links, add ip ospf network point-to-point under interface to save overhead on DR/BDR election\n\nNull output after the slash in State column of show ip ospf neighbor indicates point-to-point link\n\nLoopbacks automatically advertised as /32s regardless of subnet mask\n\nCan make the loopback point-to-point to advertise the full subnet\n\nBy default all links greater than 100Mbps will have the same reference cost\n\nTo change this, change reference bandwidth under router ospf config with auto-cost reference bandwidth &lt;value&gt;\nThis should match on all devices in topology to prevent loops, but is not required for adjacency\n\nMetric can be modified directly with cost on interface (ip ospf cost &lt;cost&gt;), or indirectly by changing interface bandwidth\nCost can also be configured per-neighbor under router ospf with neighbor &lt;ip&gt; cost &lt;cost&gt;\nTo form a neighborship, area, SN mask, stub flag, authentication and hello/dead timers must match\nNeighborships in a good state in 2-way for drothers on broadcast segments or Full for all other links\n\nAll other states indicate an issue if they persist\nStuck in ExStart, Exchange states usually indicates an MTU issue\n\n\n\n\n\nFeatures\n\nAuthentication\n\nSupports plaintext (pointless), MD5 & HMAC-SHA auth\nHMAC-SHA configuration done with key chain in global config\nMD5 configuration done under interface or for an entire area under router ospf\nKey-id numbers must match for successful auth\n\nkey chain OSPF_KEYS\n key 1\n  key-string &lt;psk&gt;\n  cryptographic-algorithm hmac-sha-256\n!\nint gi0/0\nip ospf authentication message-digest\nip ospf message-digest-key 1 md5 &lt;psk&gt;\n!\nint gi0/1\nip ospf authentication key-chain OSPF_KEYS\n\n\nSummarization\n\nPossible only at ABRs, ASBRs\nTo summarize LSA 3 as originated by ABR, use area &lt;area#&gt; range &lt;ip & mask&gt;\n\nThe area used in the above command is the area the prefix is originated in - the summary will apply to all areas aside from this\nCan add not-advertise prefix to prevent advertising prefixes in range, form of route filtering\n\nTo summarize LSA 5 at ASBR, use summary-address &lt;ip & mask&gt;\nLeak map can be used to leak longer mask prefixes included in summary\n\nsummary-address 0.0.0.0 0.0.0.0 leak-map &lt;route-map&gt;\n\nNull0 installed on router to match summary address for both LSA 3 and LSA 5 summaries\n\n\n\nRoute filtering\n\nInter-area filtering possible only at ABRs, filtering LSA3s\nPerformed with area &lt;area#&gt; filter-list prefix &lt;prefix-list&gt; [in|out]\nInter-area filtering also possible with area range and not-advertise flag as described above\nCan also use distribute lists to filter inbound into the RIB, not the OSPF database\n\nCan match on many values with route-maps, such as interface, ip address, ip next-hop, ip route-source, metric, route-type and tag\nFor example:\n\naccess-list 3 permit 155.1.146.0\naccess-list 4 permit 155.1.0.4\n!\nroute-map DENY_VLAN146_FROM_R4 deny 10\n match ip address 3\n match ip next-hop 4\n!         \nroute-map DENY_VLAN146_FROM_R4 permit 20\n!\nrouter ospf 1\n distribute-list route-map DENY_VLAN146_FROM_R4 in\n\nNote again distribute-lists ONLY AFFECTS LOCAL RIB, not OSPF database\nEasy to create traffic black holes if not careful with this feature\n\n\n\n\nDefault routing\n\nCan be advertised with default-information originate [always]\nalways flag allows advertisement even if default not in local route table\n\n\n\nStub areas\n\nTwo types, stubby and totally stubby\n\nStubby prevents advertisement of LSA 5 (Externals) into the area\n\nConfigured with area &lt;area#&gt; stub under router ospf\n\nTotally stubby prevents advertisements of LSA 3 (summary) & LSA 5 into the area\n\nConfigured with area &lt;area#&gt; stub no-summary under router ospf\n\nOnly ABR needs no-summary, rest of area just stub\n\n\n\nABR advertises default route into stub area for reachability\nMust be configured on all routers in stub area\n\n\n\nNSSA\n\nTwo types, NSSA and totally NSSA\n\nNSSA prevents LSA5 advertisements but allows redistribution of externals\n\nConfigured with area &lt;area#&gt; nssa under router ospf\nDoes not advertise default route from ABR by default\nCan use area &lt;area#&gt; nssa default-information-originate to advertise default\n\nTotally NSSA prevents LSA3, 5 but allows redistribution of externals\n\nConfigured with area &lt;area#&gt; nssa no-summary under router ospf\nAdvertises default route from ABR\n\n\nExternals originated in these areas will be LSA7s instead of LSA5s, translated to LSA5 at ABR\n\n\n\nVirtual links\n\nCan be used to repair discontiguous networks or for traffic engineering\nUnder OSPF, configure area &lt;area#&gt; virtual-link &lt;neighbor RID&gt; on both nodes\nThe IP used is the router ID, not the address used for OSPF peering\nTo keep virtual-links stable, it’s a good idea to manually define the router ID (as is best practice anyways)\n\n\n\nRedistribution\n\nSee Redistribution page for details on that\n\n\n\n\n\nUseful debugs/show commands\n\nshow ip ospf interface brief - Displays interfaces participating in OSPF, areas, cost, etc\nshow ip ospf neighbors - Displays neighbors and neighbor states\nshow ip ospf database - Displays OSPF database information\nshow ip ospf database router self-originate - Useful to see routes advertised by local device\nshow ip ospf - Displays detailed information about OSPF protocols, timers, metric reference values, etc\nshow ip protocols - Shows various information about active routing protocols\ndebug ip ospf adj - OSPF adjacency formation\ndebug ip ospf packet - All OSPF packets\n\n\n\n\nStandard OSPF Config\nint gi0\nip ospf network point-to-point\nip ospf 1 area 0\n\nrouter ospf 1\n router-id 1.1.1.1\n passive-interface default\n no passive-interface gi0\n network 150.1.5.0 0.0.0.255 area 0",
    "crumbs": [
      "CCNP",
      "L3 Technologies",
      "OSPF"
    ]
  },
  {
    "objectID": "PBR.html",
    "href": "PBR.html",
    "title": "PBR",
    "section": "",
    "text": "General Notes\n\nConditional forwarding of packets based on something other than destination IP\nPossible filters include source IP, source & destination IP, protocol type (TCP, UDP, ICMP)\nDownsides are operational complexity, increased load on router\nCan specify multiple next-hops - when done the first will be used if the next-hop is adjacent, otherwise it will use the second, third, etc\nIf you want to use a non-adjacent route, you must use the recursive flag when configuring the route-map set statement\nUsing the default flag will cause the next-hop value to be set only for routes not within the router’s RIB\nCan also combine PBR with IP SLA & Tracking to ensure reachability of next-hops\nLocal PBR\n\nThis is a PBR for traffic sourcing from the router (normally not subject to policy routing)\nConfiguration is the same as a typical PBR but applied with ip local policy route-map &lt;rm-name&gt;\n\n\n\n\n\nUseful show/debug commands\n\nshow ip policy - Show PBR details\nshow ip local policy - Show local PBR details\ndebug ip policy - Shows policy-based decisions in real time\n\n\n\n\nStandard PBR Config\nip access-list extended AL_PBR\n permit ip 10.1.1.0 0.0.0.255 10.5.5.0 0.0.0.255\n!\nroute-map RM_PBR-TRANSIT permit 10\n match ip address ACL-PBR\n set ip [default] next-hop 10.23.1.3 &lt;optional second IP&gt;\n!\ninterface GigabitEthernet0/1\n ip policy route-map PBR-TRANSIT\n\n\nPBR with IP SLA & Tracking Config\nip sla 1\nicmp-echo 10.3.3.2\nip sla schedule 1 life forever start-time now\n!\ntrack 1 ip sla 1 reachability\n!\nip access-list standard ACL\n permit ip 10.2.2.0/24 10.1.1.1/32\n!\nroute-map PBR\n match ip address ACL\n set ip next-hop verify-availability 10.3.3.2 track 1\n!\ninterface GigabitEthernet0/1\n ip policy route-map PBR-TRANSIT",
    "crumbs": [
      "CCNP",
      "L3 Technologies",
      "PBR"
    ]
  },
  {
    "objectID": "SNMP.html",
    "href": "SNMP.html",
    "title": "SNMP",
    "section": "",
    "text": "General Notes\n\nStands for Simple Network Management Protocol\nMain versions in-use are v2c and v3\nv2c does not support encryption and uses a community string for authentication\nv3 supports both mode advanced authentication and data encryption\nSNMP traps are unreliable, SNMP informs are reliable and must be confirmed by receiving host\nGood article on v3 SNMP\nifindex persist\n\nUsed to prevent SNMP index IDs from changing when devices are rebooted or new line cards are attached\nConfigured with snmp ifmib ifindex persist\n\n\n\n\n\nUseful show commands\n\nshow snmp host - Displays the SNMP notifications sent as traps, the version of SNMP, and the host IP address of the notifications\nshow snmp group - Displays SNMP group information (v3)\nshow snmp user - Displays SNMP user information (v3)\n\n\n\n\nConfig\n\nStandard SNMP v2c Config\nsnmp ifmib ifindex persist\nsnmp-server location &lt;location&gt; \nsnmp-server contact &lt;contact-details&gt;\nsnmp-server community &lt;community-string&gt; [RO|RW] [ACL]\nsnmp-server enable traps\nsnmp-server host 10.1.100.100 [traps|informs] version 2c &lt;community-string&gt;\n\n\nStandard SNMP v3 Config\nsnmp ifmib ifindex persist\nsnmp-server location &lt;location&gt; \nsnmp-server contact &lt;contact-details&gt;\nno snmp-server system-shutdown ! prevents device being shutdown via SNMP\nsnmp-server view &lt;view-name&gt; iso included ! iso included allows all values\nsnmp-server group &lt;group-name&gt; v3 priv read &lt;view-name&gt; write &lt;view-name&gt;\nsnmp-server user &lt;user-name&gt; &lt;group-name&gt; v3 auth sha &lt;password&gt; priv aes 256 &lt;password&gt;\nsnmp-server host 10.1.100.100 version 3 priv &lt;user-name&gt;",
    "crumbs": [
      "CCNP",
      "Infrastructure Services",
      "SNMP"
    ]
  },
  {
    "objectID": "uRPF.html",
    "href": "uRPF.html",
    "title": "uRPF",
    "section": "",
    "text": "General Notes\n\nStands for Unicast Reverse Path Forwarding\nUsed to eliminate spoofed packets on a network by validating the return network path of ingress traffic\nRequires CEF to be enabled on the device\n\n\n\n\nuRPF Modes\n\nStrict mode\n\nIf the return path to the source IP of the traffic does not match the ingress interface, the traffic will be discarded\nConfigured with the rx flag on the ip verify unicast source command\n\nLoose mode\n\nIf a return path to the source IP of the traffic does not exist in the routing table, the traffic will be discarded\nConfigured with the any flag on the ip verify unicast source command\n\nAllow-default\n\nUsed to allow a default route to be used as a return path - by default this is not allowed with uRPF\nConfigured with the allow-default flag on the ip verify unicast source command\n\n\n\n\n\nUseful debugs\n\nshow cef interface &lt;interface-name&gt; - Will show whether CEF, uRPF is enabled\n\n\n\n\nStandard uRPF Config\nint gi0/0\nip verify unicast source reachable-via [rx | any] [allow-default]",
    "crumbs": [
      "CCNP",
      "Infrastructure Security",
      "uRPF"
    ]
  }
]