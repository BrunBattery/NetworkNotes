{"title":"BGP","markdown":{"yaml":{"title":"BGP","format":{"html":{"toc":true,"toc-depth":5,"css":"styles.css"}},"editor_options":{"markdown":{"mode":"gfm"}}},"headingText":"General Notes","containsRefs":false,"markdown":"\n\n\n- AD 200 for iBGP, 20 for eBGP\n- Forms connection over TCP port 179 - does not need direct connection\n- Only advertises best routes, all others not advertised\n- **Best-path Algorithm**\n\t1. Weight (Highest)\n\t2. Local Preference (Highest)\n\t3. Originated locally\n\t4. AS_PATH (Shortest)\n\t5. Origin code (IGP > EGP > ?)\n\t6. MED (Lowest)\n\t7. Path (eBGP > iBGP)\n\t8. IGP metric (Lowest)\n\t9. Route age (Oldest, only compared when routes from different eBGP peers)\n\t10. RID (Lowest)\n\t- **W**e **L**ove **O**ranges **AS** **O**ranges **M**ean **P**ure **R**efreshment\n- **iBGP**\n\t- TTL of 255 by default\n\t- Does not change next-hop by default - can be changed with `neighbor <ip-address | peer-group-name> next-hop-self`\n\t- Uses split horizon^[BGP split horizon prevents loops in iBGP by disallowing advertisements received from one peer to be advertised on to another. This makes full mesh a requirement for iBGP unless using route reflectors and/or confederation] for loop prevention\n- **eBGP**\n\t- TTL of 1 by default - can be increased with `neighbor <ip> ebgp-multihop 255`\n\t- Can also use `neighbor <ip> ttl-security hops <hop-count>`\n\t- Difference between above is that `eBGP-multihop` sets the *maximum range* allowed, whereas `TTL-security` sets the *exact range*\n\t- If peering with different update source but not through additional hops, can use `neighbor <ip> disable-connected-check`\n\t- Does change next-hop by default\n- **Peer groups** \n\t- Can be used when multiple neighbors have the same requirements\n\t- Use `neighbor <name> peer-group` to set up peer-group, then perform config under `neighbor <name> <command>`\n\t- Peer groups applied to neighbor with `neighbor <ip> peer-group <name>`\n\t- Can check with `show ip bgp peer-group`\n\t- Peer groups are natively set up on the back end to limit CPU usage - only purpose is simplification of config\n- **ECMP**\n\t- Can enable load-balancing with `maximum paths <path#>` command\n\t- Only takes effect when many parameters on routes match - Weight, local preference, AS-PATH (both numbers and lengths), origin code, MED, IGP metric\n- Exact match of prefix in route table required for advertisement - configuring null route to prefix common\n- Public range for 2-byte AS: 1 - 64511, Private range: 64512 - 65535\n\t- Also 4-byte ASs available now due to exhaustion of 2-byte ASs\n- Good idea to change update source to a loopback interface with `neighbor <ip> update-source <loopback>`\n- `clear ip bgp * soft` useful to refresh route table without tearing down neighborships\n- Selectively advertise default route with `neighbor <IP> default-originate [route-map <CONDITION>]`\n- Advertise a different AS to a peer than `router bgp` AS with `neighbor <IP> local-as <OldAS>` - useful in migration\n- `neighbor <IP> fall-over` can be used to immediately tear down session if IGP route to neighbor disappears\n\n---\n\n#### Features\n\n##### Summarization\n- Primarily done with the `aggregate address <prefix> <mask>` command\n\t- Only works for prefixes already in BGP table\n\t- Router performing summary installs null route into table for aggregate\n\t- Should be used with `as-set` suffix - this will include AS-PATH information and prevent loops/suboptimal routes\n\t\t- Inherits community values of any specific prefixes\n\t\t- For example, if one of four specific prefixes has a `no-export` community, summary with `as-set` will as well\n\t\t- These can be modified or stripped with `attribute-map` suffix\n\t\t- Can also use `advertise-map` suffix to select specific prefix which will determine attributes of summary\n\t- By default does not suppress specific prefixes - `summary-only` at the end of command will\n\t- Prefixes summarized in this way have *ATOMIC_AGGREGATE* attribute assigned\n\t- Also assigned *AGGREGATOR* attribute specifying AS number and RID of aggregator\n\t- Can selectively suppress specific prefixes with `suppress-map` - all prefixes in map will be suppressed:\n```\nip prefix-list SUPPRESS_PREFIX 150.1.1.0/24\n!\nroute-map SUPPRESS_MAP permit 10\n match ip address prefix-list SUPPRESS_PREFIX\n!\nrouter bgp 200\t\n aggregate-address 150.1.0.0 mask 255.255.0.0 suppress-map SUPPRESS_MAP as-set\n```\n\t- Can also use `unsuppress-map` combined with summary-only to advertise specific prefixes\n\t- Since this is per-neighbor it can be used for inbound path manipulation - you would advertise the same summary prefix to multiple neighbors and use an unsuppress map towards the preferred peer for inbound traffic:\n```\nip prefix-list NET_1 permit 10.0.1.0/24 \n!\nroute-map UNSUPPRESS_MAP permit 10\n match ip address prefix-list NET_1\n!\t\t\nrouter bgp 200\n aggregate-address 10.0.0.0 255.255.252.0 summary-only as-set\n neighbor 155.1.37.7 unsuppress-map UNSUPPRESS_MAP\n```\n\t- Alternatively, can advertise a summary prefix in IGP with the `network` command - commonly done with a static null route\n\n##### Route Reflection\n- Used to bypass full mesh requirement in iBGP\n- Configured with `neighbor <ip> route-reflector-client` on route reflector\n- Reflector must have full mesh if full reachability is required (unless using multiple reflectors)\n- Abide by following 3 rules:\n1.  Routes learned from eBGP peers can be sent to other eBGP peers, clients, and non-clients.\n2.  Routes learned from client peers can be sent to eBGP peers, other client peers, and non-clients.\n3.  Routes learned from non-client peers can be sent to eBGP peers, and client peers,Â _but not other non-clients_.\n- Functions like DR/BDR in OSPF by default - does not insert itself into transit path\n- `next-hop-self` command only affects eBGP routes when used with route reflectors\n\n##### Confederation\n- Used to reduce full-mesh BGP requirements by splitting one public AS into smaller sub-as\n- Sub-as use eBGP advertisement rules between each other, removing full mesh requirement\n- Notable exception to eBGP behavior is that *next-hop is not modified* between confederation peers\n- Configured by using sub-as with `router bgp` command and using `bgp confederation identifier <as>` under router bgp\n- Other sub-as defined with `bgp confederation peers <sub-as>` under router bgp\n- Can be used in combination with route reflection\n\n##### Communities\n- Activated for transport to peers with `neighbor <ip> send-community`\n- Made more readable with global config command `ip bgp-community new-format`\n- Applied to prefixes with `set community <value1> <value2> ... <valueN>` in route-map\n- To add communities without affecting existing, use `set community additive <value1> <value2> ... <valueN>`\n- Matched with `community-lists` - like ACLs, both standard and expanded (extended) versions\n\t- Standard version uses 1-99, only permits or denies communities\n```\nip community-list 1 permit 100:10 100:20\nip community-list 1 deny no-export\n```\n\t- Standard version uses AND logic with multiple communities in one line, OR logic with multiple lines\n\t- Expanded version functions the same but adds **regular expression** functionality\n- **Sample config of setting community:**\n```\nip as-path access-list 1 permit 60$\n!\nroute-map SET_COMMUNITY permit 10\n match as-path 1\n set community 100:200\n!\nroute-map SET_COMMUNITY permit 100\n!\nrouter bgp 200\n neighbor 155.1.45.4 send-community\n neighbor 155.1.45.4 route-map SET_COMMUNITY out\n```\n- **Sample config of matching community:**\n```\nip community-list standard 100:200 permit 100:200\n!\nroute-map SET_LOCAL_PREFERENCE permit 10\n match community 100:200\n set local-preference 200\n!\nroute-map SET_LOCAL_PREFERENCE permit 100\n!\nrouter bgp 100\n neighbor 155.1.13.3 route-map SET_LOCAL_PREFERENCE in\n```\n- **Well-known communities:**\n\t- **no-advertise**\n\t\t- Set with `set community no-advertise`\n\t\t- Signals to not advertise the prefix with this community to *any peer*\n\t- **no-export**\n\t\t- Set with `set community no-export`\n\t\t- Signals to not export this prefix from the AS - can be advertised *within AS only*\n\t- **local-as**\n\t\t- Set with `set community local-as`\n\t\t- Functions the same as `no-export` but also disallows advertisement *between confederation sub-as*\n- Deleting communities done with a `community-list` referencing community to be deleted, then using `set comm-list <comlist> delete` under route-map\n\n##### Next-hop modification\n- Other than next-hop-self, you can also manually define next-hop with a route-map:\n```\nroute-map SET_NEXT_HOP_FROM_R8 permit 10\nset ip next-hop 155.1.58.8\n!\nrouter bgp 100\nneighbor 155.1.58.8 route-map SET_NEXT_HOP_FROM_R8 in\n```\n\n##### BGP regexp\n- Can be used to search for specifc AS-PATHs in table - for example: `show ip bgp regexp ^$`\n- Above will show prefixes originated locally with the AS. Cheat sheet [here.](http://gponsolution.com/bgp-regular-expressions-cheat-sheet.html)\n- Can be used to filter with ACLs with ip as-path: `ip as-path access-list 1 permit _54$`\n- Then use `match as-path` under a route-map to apply modifications\n\n##### BGP backdoor\n- Created to prefer links via IGP over eBGP (raises AD of specific prefix to 200)\n- Configured with `network <subnet> mask <netmask> backdoor` under router BGP\n\n##### Conditional Advertising\n- Allows advertising based on existence of another prefix in table\n- Configured with `neighbor <IP> advertise-map MAP1 [non-exist|exist-map] MAP2`\n- First map is prefix to advertise, second is prefix to monitor\n- BGP checks on existence of MAP2 every 60 seconds\n\n##### Conditional Route Injection\n- Functions similar to unsuppress map in allowing specific prefix advertisement from aggregate\n- Difference is it can be configured on routers not originating the aggregate route\n- One map matches aggregate and router originating summary, other map matches specific prefix to advertise\n- Configuration:\n```\nip prefix-list INJECT_PREFIX permit 10.0.1.0/24\nip prefix-list AGGREGATE permit 10.0.0.0/22\nip prefix-list ROUTE_SOURCE permit 155.1.37.3/32\n!\nroute-map INJECT_MAP permit 10\n set ip address prefix-list INJECT_PREFIX\n set origin igp\n!\nroute-map EXIST_MAP permit 10\n match ip address prefix-list AGGREGATE\n match ip route-source prefix-list ROUTE_SOURCE\n! \nrouter bgp 300\n bgp inject-map INJECT_MAP exist-map EXIST_MAP\n```\n\n##### Route Filtering\n- Preferably done per-neighbor with route-maps, but can be applied directly with prefix list or ACL\n- `neighbor 155.1.79.9 route-map FROM_R9 in` for a route-map, with a deny in the route-map\n- `neighbor 192.10.1.254 prefix-list BLOCK_222 in` for prefix-list\n- `neighbor 192.10.1.254 distribute-list BLOCK_222 in` can be used for ACL filtering, not recommended\n\n##### Maximum prefix\n- `maximum-prefix` can be used to limit allowed prefix # from a peer\n- By default shuts down connection, can use `warning-only` or `restart <minutes>` prefixes if desired\n- For example: `neighbor 155.1.108.10 maximum-prefix 20 80 restart 3`\n\n##### BGP Dampening\n- Can be used to prevent table instability from flapping routes\n- Assigned to all prefixes with `bgp dampening [<Half_Life> <ReuseLimit> <SuppressLimit> <MaximumSuppressTime>]`\n- Can also be assigned to specific prefixes with route-maps:\n```\nip as-path access-list 100 permit _100$\n!\nroute-map DAMPENING\n match as-path 100\n set dampening 4 750 2000 16\n!\nrouter bgp 200\n bgp dampening route-map DAMPENING\n```\n\n##### BGP Outbound Route Filtering\n- Allows you to push a route filter to a remote neighbor\n- Benefit is decrease in unnecessary route information as filtering occurs on neighbor before prefixes sent\n- Both peers must have ORF capability enabled for it to function\n- Verified locally with: `show ip bgp neighbors <ip>`, remotely with: `show ip bgp neighbors <ip> received prefix-filter`\n```\nip prefix-list ORF deny 112.0.0.0/8\nip prefix-list ORF permit 0.0.0.0/0 le 32\n!\nrouter bgp 100\n neighbor 155.1.45.5 capability orf prefix-list both\n neighbor 155.1.45.5 prefix-list ORF in\n```\n- **See Redistribution page for details on that**\n\n---\n\n#### Useful debug/show commands\n- `show ip bgp` - Displays BGP table and attributes for each route\n- `show ip bgp summary` - Displays BGP neighbors, prefixes received from them, ASs, etc\n- `show ip bgp neighbor <ip-address> [advertised-routes|received-routes]` - See routes sent, received from peer\n- `show ip protocols` - Shows various information about active routing protocols\n- `debug ip bgp` - Debug all BGP address families, information\n- `debug ip bgp updates` - Debug BGP updates specifically\n\t\n---\n\n#### BGP Attributes\n\n##### Weight\n- Only used on the router where it is configured\n- Used to affect outbound routing.\n- Higher value is better - default is 0 (32768 if originated locally)\n- Highest in BGP path selection algorithm\n- Cisco proprietary\n- Configuration:\n```\nroute-map SET_WEIGHT\n match ip address|ip as-path ...\n set weight 100\n!\nrouter bgp 100\n neighbor <ip> route-map SET_WEIGHT in\n !\n neighbor <ip> weight <weight>\n```\n\n##### Local Preference\n- Locally significant (to the AS), does not transit outside AS.\n- Used to affect outbound routing.\n- Higher value is better - defaults to 100\n- Configuration:\n```\nroute-map SET_LP\n match ip address|ip as-path ...\n set local-preference 1000\n !\nrouter bgp 100\n neighbor <ip> route-map SET_LP in\n !\n bgp default local-preference <locpref>\n```\n\n##### AS-PATH\n- Changed for each AS prefix transits through\n- Used to affect inbound routing\n- Can be used to influence path selection with as-path prepending\n- Can be ignored with `bgp bestpath as-path ignore` - this is dangerous and not recommended\n- Can be limited in length with `bgp maxas-limit <#>`\n- Configuration:\n```\nroute-map PREPEND\n match ip address|ip as-path ...\n set as-path prepend 100 100 100\n\t!\nrouter bgp 100\n neighbor <ip> route-map PREPEND out\n```\n\n##### Origin Code\n- Rarely used to influence path selection - inflexible\n- IGP > EGP > Incomplete\n- Could affect inbound or outbound routing\n- Configuration:\n```\nroute-map ORIGIN\n match ip address|ip as-path ...\n set origin [igp|egp|incomplete]\n\t\nrouter bgp 100\n neighbor <ip> route-map ORIGIN out\n```\n\n##### MED\n- By default only compared when originating from same AS\n- Lowest is best - defaults to 0\n- Used to affect inbound routing\n- Can use `bgp always-compare-med` under router BGP to allow comparison of MED between different ASs\n- Configuration:\n```\nroute-map MED\n match ip address|ip as-path ...\n set metric 1000\n\t\nrouter bgp 100\n neighbor <ip> route-map MED out\n```\n\n---\n\n#### Standard BGP Config\n```\nrouter bgp 100\n bgp router-id 4.4.4.4\n ! iBGP Neighbor\n neighbor 150.1.1.1 remote-as 100\n neighbor 150.1.1.1 update-source loopback0\n neighbor 155.1.1.1 route-reflector-client\n neighbor 155.1.1.1 next-hop-self # will only affect eBGP routes for RR clients\n ! eBGP Neighbor\n neighbor 150.1.3.3 remote-as 200\n neighbor 150.1.3.3 update-source loopback0\n neighbor 150.1.3.3 ebgp-multihop\n neighbor 150.1.3.3 send-community both\n neighbor 150.1.3.3 route-map FROM_R3 in\n neighbor 150.1.3.3 route-map TO_R3 in\n !\n network 155.1.4.0 255.255.255.0 route-map SET_COMMUNITY_50\n network 150.1.4.0 255.255.255.0\n!\nip prefix-list BGP_PREPEND_1 seq 5 permit 150.1.4.0/24\n!\nip prefix-list DEFAULT seq 5 permit 0.0.0.0/0\n!\nroute-map FROM_R3 deny 10\n match ip address prefix-list DEFAULT\n!\nroute-map FROM_R3 permit 10000\n!\nroute-map TO_R3 permit 10\n match ip address prefix-list BGP_PREPEND_1\n set as-path prepend 100 100 100 100\n!\nroute-map TO_R3 permit 10000\n!\nroute-map SET_COMMUNITY_50 permit 10\n set community 50\n```\n---"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"markdown"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","filters":["quarto"],"toc":true,"toc-depth":5,"css":["styles.css"],"output-file":"BGP.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.2.335","theme":"solar","fontsize":"1.1em","monofontcolor":"rgb(185, 143, 13)","monobackgroundcolor":"rgb (185, 143, 13)","code-block-bg":true,"code-block-border-left":true,"code-copy":true,"title":"BGP","editor_options":{"markdown":{"mode":"gfm"}}},"extensions":{"book":{"multiFile":true}}}}}