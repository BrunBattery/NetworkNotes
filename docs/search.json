[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Bren’s Networking Notes",
    "section": "",
    "text": "Hi all,\nI threw this page together to host some notes I’ve created during my time studying for CCNP ENARSI. The navigation follows the flow of the exam blueprint. I didn’t cover all material with my notes as some of it was rote for me at this point; I tried to make notes on what I needed reinforced or might come back to later. I hope you find something useful or informative here."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "BGP.html",
    "href": "BGP.html",
    "title": "BGP",
    "section": "",
    "text": "General Notes\n\nAD 200 for iBGP, 20 for eBGP\nForms connection over TCP port 179 - does not need direct connection\nOnly advertises best routes, all others not advertised\nBest-path Algorithm\n\nWeight (Highest)\nLocal Preference (Highest)\nOriginated locally\nAS_PATH (Shortest)\nOrigin code (IGP > EGP > ?)\nMED (Lowest)\nPath (eBGP > iBGP)\nIGP metric (Lowest)\nRoute age (Oldest, only compared when routes from different eBGP peers)\nRID (Lowest)\n\n\nWe Love Oranges AS Oranges Mean Pure Refreshment\n\niBGP\n\nTTL of 255 by default\nDoes not change next-hop by default - can be changed with neighbor <ip-address | peer-group-name> next-hop-self\nUses split horizon1 for loop prevention\n\neBGP\n\nTTL of 1 by default - can be increased with neighbor <ip> ebgp-multihop 255\nCan also use neighbor <ip> ttl-security hops <hop-count>\nDifference between above is that eBGP-multihop sets the maximum range allowed, whereas TTL-security sets the exact range\nIf peering with different update source but not through additional hops, can use neighbor <ip> disable-connected-check\nDoes change next-hop by default\n\nPeer groups\n\nCan be used when multiple neighbors have the same requirements\nUse neighbor <name> peer-group to set up peer-group, then perform config under neighbor <name> <command>\nPeer groups applied to neighbor with neighbor <ip> peer-group <name>\nCan check with show ip bgp peer-group\nPeer groups are natively set up on the back end to limit CPU usage - only purpose is simplification of config\n\nECMP\n\nCan enable load-balancing with maximum paths <path#> command\nOnly takes effect when many parameters on routes match - Weight, local preference, AS-PATH (both numbers and lengths), origin code, MED, IGP metric\n\nExact match of prefix in route table required for advertisement - configuring null route to prefix common\nPublic range for 2-byte AS: 1 - 64511, Private range: 64512 - 65535\n\nAlso 4-byte ASs available now due to exhaustion of 2-byte ASs\n\nGood idea to change update source to a loopback interface with neighbor <ip> update-source <loopback>\nclear ip bgp * soft useful to refresh route table without tearing down neighborships\nSelectively advertise default route with neighbor <IP> default-originate [route-map <CONDITION>]\nAdvertise a different AS to a peer than router bgp AS with neighbor <IP> local-as <OldAS> - useful in migration\nneighbor <IP> fall-over can be used to immediately tear down session if IGP route to neighbor disappears\n\n\n\n\nFeatures\n\nSummarization\n\nPrimarily done with the aggregate address <prefix> <mask> command\n\nOnly works for prefixes already in BGP table\nRouter performing summary installs null route into table for aggregate\nShould be used with as-set suffix - this will include AS-PATH information and prevent loops/suboptimal routes\n\nInherits community values of any specific prefixes\nFor example, if one of four specific prefixes has a no-export community, summary with as-set will as well\nThese can be modified or stripped with attribute-map suffix\nCan also use advertise-map suffix to select specific prefix which will determine attributes of summary\n\nBy default does not suppress specific prefixes - summary-only at the end of command will\nPrefixes summarized in this way have ATOMIC_AGGREGATE attribute assigned\nAlso assigned AGGREGATOR attribute specifying AS number and RID of aggregator\nCan selectively suppress specific prefixes with suppress-map - all prefixes in map will be suppressed:\n\nip prefix-list SUPPRESS_PREFIX 150.1.1.0/24\n!\nroute-map SUPPRESS_MAP permit 10\n match ip address prefix-list SUPPRESS_PREFIX\n!\nrouter bgp 200  \n aggregate-address 150.1.0.0 mask 255.255.0.0 suppress-map SUPPRESS_MAP as-set\n\nCan also use unsuppress-map combined with summary-only to advertise specific prefixes\nSince this is per-neighbor it can be used for inbound path manipulation - you would advertise the same summary prefix to multiple neighbors and use an unsuppress map towards the preferred peer for inbound traffic:\n\nip prefix-list NET_1 permit 10.0.1.0/24 \n!\nroute-map UNSUPPRESS_MAP permit 10\n match ip address prefix-list NET_1\n!       \nrouter bgp 200\n aggregate-address 10.0.0.0 255.255.252.0 summary-only as-set\n neighbor 155.1.37.7 unsuppress-map UNSUPPRESS_MAP\n\nAlternatively, can advertise a summary prefix in IGP with the network command - commonly done with a static null route\n\n\n\n\nRoute Reflection\n\nUsed to bypass full mesh requirement in iBGP\nConfigured with neighbor <ip> route-reflector-client on route reflector\nReflector must have full mesh if full reachability is required (unless using multiple reflectors)\nAbide by following 3 rules:\n\n\nRoutes learned from eBGP peers can be sent to other eBGP peers, clients, and non-clients.\nRoutes learned from client peers can be sent to eBGP peers, other client peers, and non-clients.\nRoutes learned from non-client peers can be sent to eBGP peers, and client peers, but not other non-clients.\n\n\nFunctions like DR/BDR in OSPF by default - does not insert itself into transit path\nnext-hop-self command only affects eBGP routes when used with route reflectors\n\n\n\nConfederation\n\nUsed to reduce full-mesh BGP requirements by splitting one public AS into smaller sub-as\nSub-as use eBGP advertisement rules between each other, removing full mesh requirement\nNotable exception to eBGP behavior is that next-hop is not modified between confederation peers\nConfigured by using sub-as with router bgp command and using bgp confederation identifier <as> under router bgp\nOther sub-as defined with bgp confederation peers <sub-as> under router bgp\nCan be used in combination with route reflection\n\n\n\nCommunities\n\nActivated for transport to peers with neighbor <ip> send-community\nMade more readable with global config command ip bgp-community new-format\nApplied to prefixes with set community <value1> <value2> ... <valueN> in route-map\nTo add communities without affecting existing, use set community additive <value1> <value2> ... <valueN>\nMatched with community-lists - like ACLs, both standard and expanded (extended) versions\n\nStandard version uses 1-99, only permits or denies communities\n\nip community-list 1 permit 100:10 100:20\nip community-list 1 deny no-export\n\nStandard version uses AND logic with multiple communities in one line, OR logic with multiple lines\nExpanded version functions the same but adds regular expression functionality\n\nSample config of setting community:\n\nip as-path access-list 1 permit 60$\n!\nroute-map SET_COMMUNITY permit 10\n match as-path 1\n set community 100:200\n!\nroute-map SET_COMMUNITY permit 100\n!\nrouter bgp 200\n neighbor 155.1.45.4 send-community\n neighbor 155.1.45.4 route-map SET_COMMUNITY out\n\nSample config of matching community:\n\nip community-list standard 100:200 permit 100:200\n!\nroute-map SET_LOCAL_PREFERENCE permit 10\n match community 100:200\n set local-preference 200\n!\nroute-map SET_LOCAL_PREFERENCE permit 100\n!\nrouter bgp 100\n neighbor 155.1.13.3 route-map SET_LOCAL_PREFERENCE in\n\nWell-known communities:\n\nno-advertise\n\nSet with set community no-advertise\nSignals to not advertise the prefix with this community to any peer\n\nno-export\n\nSet with set community no-export\nSignals to not export this prefix from the AS - can be advertised within AS only\n\nlocal-as\n\nSet with set community local-as\nFunctions the same as no-export but also disallows advertisement between confederation sub-as\n\n\nDeleting communities done with a community-list referencing community to be deleted, then using set comm-list <comlist> delete under route-map\n\n\n\nNext-hop modification\n\nOther than next-hop-self, you can also manually define next-hop with a route-map:\n\nroute-map SET_NEXT_HOP_FROM_R8 permit 10\nset ip next-hop 155.1.58.8\n!\nrouter bgp 100\nneighbor 155.1.58.8 route-map SET_NEXT_HOP_FROM_R8 in\n\n\nBGP regexp\n\nCan be used to search for specifc AS-PATHs in table - for example: show ip bgp regexp ^$\nAbove will show prefixes originated locally with the AS. Cheat sheet here.\nCan be used to filter with ACLs with ip as-path: ip as-path access-list 1 permit _54$\nThen use match as-path under a route-map to apply modifications\n\n\n\nBGP backdoor\n\nCreated to prefer links via IGP over eBGP (raises AD of specific prefix to 200)\nConfigured with network <subnet> mask <netmask> backdoor under router BGP\n\n\n\nConditional Advertising\n\nAllows advertising based on existence of another prefix in table\nConfigured with neighbor <IP> advertise-map MAP1 [non-exist|exist-map] MAP2\nFirst map is prefix to advertise, second is prefix to monitor\nBGP checks on existence of MAP2 every 60 seconds\n\n\n\nConditional Route Injection\n\nFunctions similar to unsuppress map in allowing specific prefix advertisement from aggregate\nDifference is it can be configured on routers not originating the aggregate route\nOne map matches aggregate and router originating summary, other map matches specific prefix to advertise\nConfiguration:\n\nip prefix-list INJECT_PREFIX permit 10.0.1.0/24\nip prefix-list AGGREGATE permit 10.0.0.0/22\nip prefix-list ROUTE_SOURCE permit 155.1.37.3/32\n!\nroute-map INJECT_MAP permit 10\n set ip address prefix-list INJECT_PREFIX\n set origin igp\n!\nroute-map EXIST_MAP permit 10\n match ip address prefix-list AGGREGATE\n match ip route-source prefix-list ROUTE_SOURCE\n! \nrouter bgp 300\n bgp inject-map INJECT_MAP exist-map EXIST_MAP\n\n\nRoute Filtering\n\nPreferably done per-neighbor with route-maps, but can be applied directly with prefix list or ACL\nneighbor 155.1.79.9 route-map FROM_R9 in for a route-map, with a deny in the route-map\nneighbor 192.10.1.254 prefix-list BLOCK_222 in for prefix-list\nneighbor 192.10.1.254 distribute-list BLOCK_222 in can be used for ACL filtering, not recommended\n\n\n\nMaximum prefix\n\nmaximum-prefix can be used to limit allowed prefix # from a peer\nBy default shuts down connection, can use warning-only or restart <minutes> prefixes if desired\nFor example: neighbor 155.1.108.10 maximum-prefix 20 80 restart 3\n\n\n\nBGP Dampening\n\nCan be used to prevent table instability from flapping routes\nAssigned to all prefixes with bgp dampening [<Half_Life> <ReuseLimit> <SuppressLimit> <MaximumSuppressTime>]\nCan also be assigned to specific prefixes with route-maps:\n\nip as-path access-list 100 permit _100$\n!\nroute-map DAMPENING\n match as-path 100\n set dampening 4 750 2000 16\n!\nrouter bgp 200\n bgp dampening route-map DAMPENING\n\n\nBGP Outbound Route Filtering\n\nAllows you to push a route filter to a remote neighbor\nBenefit is decrease in unnecessary route information as filtering occurs on neighbor before prefixes sent\nBoth peers must have ORF capability enabled for it to function\nVerified locally with: show ip bgp neighbors <ip>, remotely with: show ip bgp neighbors <ip> received prefix-filter\n\nip prefix-list ORF deny 112.0.0.0/8\nip prefix-list ORF permit 0.0.0.0/0 le 32\n!\nrouter bgp 100\n neighbor 155.1.45.5 capability orf prefix-list both\n neighbor 155.1.45.5 prefix-list ORF in\n\nSee Redistribution page for details on that\n\n\n\n\n\nUseful debug/show commands\n\nshow ip bgp - Displays BGP table and attributes for each route\nshow ip bgp summary - Displays BGP neighbors, prefixes received from them, ASs, etc\nshow ip bgp neighbor <ip-address> [advertised-routes|received-routes] - See routes sent, received from peer\nshow ip protocols - Shows various information about active routing protocols\ndebug ip bgp - Debug all BGP address families, information\ndebug ip bgp updates - Debug BGP updates specifically\n\n\n\n\nBGP Attributes\n\nWeight\n\nOnly used on the router where it is configured\nUsed to affect outbound routing.\nHigher value is better - default is 0 (32768 if originated locally)\nHighest in BGP path selection algorithm\nCisco proprietary\nConfiguration:\n\nroute-map SET_WEIGHT\n match ip address|ip as-path ...\n set weight 100\n!\nrouter bgp 100\n neighbor <ip> route-map SET_WEIGHT in\n !\n neighbor <ip> weight <weight>\n\n\nLocal Preference\n\nLocally significant (to the AS), does not transit outside AS.\nUsed to affect outbound routing.\nHigher value is better - defaults to 100\nConfiguration:\n\nroute-map SET_LP\n match ip address|ip as-path ...\n set local-preference 1000\n !\nrouter bgp 100\n neighbor <ip> route-map SET_LP in\n !\n bgp default local-preference <locpref>\n\n\nAS-PATH\n\nChanged for each AS prefix transits through\nUsed to affect inbound routing\nCan be used to influence path selection with as-path prepending\nCan be ignored with bgp bestpath as-path ignore - this is dangerous and not recommended\nCan be limited in length with bgp maxas-limit <#>\nConfiguration:\n\nroute-map PREPEND\n match ip address|ip as-path ...\n set as-path prepend 100 100 100\n    !\nrouter bgp 100\n neighbor <ip> route-map PREPEND out\n\n\nOrigin Code\n\nRarely used to influence path selection - inflexible\nIGP > EGP > Incomplete\nCould affect inbound or outbound routing\nConfiguration:\n\nroute-map ORIGIN\n match ip address|ip as-path ...\n set origin [igp|egp|incomplete]\n    \nrouter bgp 100\n neighbor <ip> route-map ORIGIN out\n\n\nMED\n\nBy default only compared when originating from same AS\nLowest is best - defaults to 0\nUsed to affect inbound routing\nCan use bgp always-compare-med under router BGP to allow comparison of MED between different ASs\nConfiguration:\n\nroute-map MED\n match ip address|ip as-path ...\n set metric 1000\n    \nrouter bgp 100\n neighbor <ip> route-map MED out\n\n\n\n\nStandard BGP Config\nrouter bgp 100\n bgp router-id 4.4.4.4\n ! iBGP Neighbor\n neighbor 150.1.1.1 remote-as 100\n neighbor 150.1.1.1 update-source loopback0\n neighbor 155.1.1.1 route-reflector-client\n neighbor 155.1.1.1 next-hop-self # will only affect eBGP routes for RR clients\n ! eBGP Neighbor\n neighbor 150.1.3.3 remote-as 200\n neighbor 150.1.3.3 update-source loopback0\n neighbor 150.1.3.3 ebgp-multihop\n neighbor 150.1.3.3 send-community both\n neighbor 150.1.3.3 route-map FROM_R3 in\n neighbor 150.1.3.3 route-map TO_R3 in\n !\n network 155.1.4.0 255.255.255.0 route-map SET_COMMUNITY_50\n network 150.1.4.0 255.255.255.0\n!\nip prefix-list BGP_PREPEND_1 seq 5 permit 150.1.4.0/24\n!\nip prefix-list DEFAULT seq 5 permit 0.0.0.0/0\n!\nroute-map FROM_R3 deny 10\n match ip address prefix-list DEFAULT\n!\nroute-map FROM_R3 permit 10000\n!\nroute-map TO_R3 permit 10\n match ip address prefix-list BGP_PREPEND_1\n set as-path prepend 100 100 100 100\n!\nroute-map TO_R3 permit 10000\n!\nroute-map SET_COMMUNITY_50 permit 10\n set community 50\n\n\n\n\n\n\nFootnotes\n\n\nBGP split horizon prevents loops in iBGP by disallowing advertisements received from one peer to be advertised on to another. This makes full mesh a requirement for iBGP unless using route reflectors and/or confederation↩︎"
  },
  {
    "objectID": "bgp.html",
    "href": "bgp.html",
    "title": "BGP",
    "section": "",
    "text": "- AD 200 for iBGP, 20 for eBGP\n- Forms connection over TCP port 179\n- Only advertises best routes, all others not advertised\n- **Best-path Algorithm**\n1. Weight (Highest)\n\n2. Local Preference (Highest)\n\n3. Originated locally\n\n4. AS_PATH (Shortest)\n\n5. Origin code (IGP \\> EGP \\> ?)\n\n6. MED (Lowest)\n\n7. Path (eBGP \\> iBGP)\n\n8. IGP metric (Lowest)\n\n9. Route age (Oldest, only compared when routes from different eBGP peers)\n\n10. RID (Lowest)\n\n- \\*\\*W\\*\\*e \\*\\*L\\*\\*ove \\*\\*O\\*\\*ranges \\*\\*AS\\*\\* \\*\\*O\\*\\*ranges \\*\\*M\\*\\*ean \\*\\*P\\*\\*ure \\*\\*R\\*\\*efreshment\n- **iBGP**\n- TTL of 255 by default\n\n- Does not change next-hop by default - can be changed with \\`neighbor \\<ip-address \\| peer-group-name\\> next-hop-self\\`\n\n- Uses split horizon\\^\\[BGP split horizon prevents loops in iBGP by disallowing advertisements recieved from one peer to be advertised on to another. This makes full mesh a requirement for iBGP unless using route reflectors and/or confederation\\] for loop prevention\n- **eBGP**\n- TTL of 1 by default - can be increased with \\`neighbor \\<ip\\> ebgp-multihop 255\\`\n\n- Can also use \\`neighbor \\<ip\\> ttl-security hops \\<hop-count\\>\\`\n\n- Difference between above is that \\`eBGP-multihop\\` sets the \\*maximum range\\* allowed, whereas \\`TTL-security\\` sets the \\*exact range\\*\n\n- If peering with different update source but not through additional hops, can use \\`neighbor \\<ip\\> disable-connected-check\\`\n\n- Does change next-hop by default\n- **Peer groups**\n- Can be used when multiple neighbors have the same requirements\n\n- Use \\`neighbor \\<name\\> peer-group\\` to set up peer-group, then perform config under \\`neighbor \\<name\\> \\<command\\>\\`\n\n- Peer groups applied to neighbor with \\`neighbor \\<ip\\> peer-group \\<name\\>\\`\n\n- Can check with \\`show ip bgp peer-group\\`\n\n- Peer groups are natively set up on the back end to limit CPU usage - only purpose is simplification of config\n- **ECMP**\n- Can enable load-balancing with \\`maximum paths \\<path#\\>\\` command\n\n- Only takes effect when many parameters on routes match - Weight, local preference, AS-PATH (both numbers and lengths), origin code, MED, IGP metric\n- Exact match of prefix in route table required for advertisement - configuring null route to prefix common\n- Good idea to change update source to a loopback interface with `neighbor <ip> update-source <loopback>`\n- `clear ip bgp * soft` useful to refresh route table without tearing down neighborships\n- Selectively advertise default route with `neighbor <IP> default-originate [route-map <CONDITION>]`\n- Advertise a different AS to a peer than `router bgp` AS with `neighbor <IP> local-as <OldAS>` - useful in migration\n- `neighbor <IP> fall-over` can be used to immediately tear down session if IGP route to neighbor disappears\n---\n- **Summarization**\n- Primarily done with the \\`aggregate address \\<prefix\\> \\<mask\\>\\` command\n\n    - Only works for prefixes already in BGP table\n\n    - Router performing summary installs null route into table for aggregate\n\n    - Should be used with \\`as-set\\` suffix - this will include AS-PATH information and prevent loops/suboptimal routes\n\n        - Inherits community values of any specific prefixes\n\n        - For example, if one of four specific prefixes has a \\`no-export\\` community, summary with \\`as-set\\` will as well\n\n        - These can be modified or stripped with \\`attribute-map\\` suffix\n\n        - Can also use \\`advertise-map\\` suffix to select specific prefix which will determine attributes of summary\n\n    - By default does not suppress specific prefixes - \\`summary-only\\` at the end of command will\n\n    - Prefixes summarized in this way have \\*ATOMIC_AGGREGATE\\* attribute assigned\n\n    - Also assigned \\*AGGREGATOR\\* attribute specifying AS number and RID of aggregator\n\n    - Can selectively suppress specifc prefixes with \\`suppress-map\\` - all prefixes in map will be suppressed:\n\n        \\`\\`\\`\n\n        ip prefix-list SUPPRESS_PREFIX 150.1.1.0/24\n\n        !\n\n        route-map SUPPRESS_MAP permit 10\n\n        match ip address prefix-list SUPPRESS_PREFIX\n\n        !\n\n        router bgp 200  \n\n        aggregate-address 150.1.0.0 mask 255.255.0.0 suppress-map SUPPRESS_MAP as-set\n\n        \\`\\`\\`\n\n    - Can also use \\`unsuppress-map\\` combined with summary-only to advertise specific prefixes \\^66c6ab\n\n    - Since this is per-neighbor it can be used for inbound path manipulation:\n\n    \\`\\`\\`\n\n        ip prefix-list NET_1 permit 10.0.1.0/24\n\n        !\n\n        route-map UNSUPPRESS_MAP permit 10\n\n        match ip address prefix-list NET_1\n\n        !       \n\n        router bgp 200\n\n        aggregate-address 10.0.0.0 255.255.252.0 summary-only as-set\n\n        neighbor 155.1.37.7 unsuppress-map UNSUPPRESS_MAP\n\n    \\`\\`\\`\n\n- Alternatively, can advertise a summary prefix in IGP with the \\`network\\` command - commonly done with a static null route\n- **Route Reflection**\n- Used to bypass full mesh requirement in iBGP\n\n- Configured with \\`neighbor \\<ip\\> route-reflector-client\\` on route reflector\n\n- Reflector must have full mesh if full reachability is required (unless using multiple reflectors)\n\n- Abide by following 3 rules:\n\n1. Routes learned from EBGP peers can be sent to other EBGP peers, clients, and non-clients.\n\n2. Routes learned from client peers can be sent to EBGP peers, other client peers, and non-clients.\n\n3. Routes learned from non-client peers can be sent to EBGP peers, and client peers, \\_but not other non-clients\\_.\n\n- Functions like DR/BDR in \\[\\[OSPF\\]\\] by default - does not insert itself into transit path\n\n- Can be forced to transit RR with \\`next-hop-self\\` command if desired\n- **Communities**\n- Activated for transport to peers with \\`neighbor \\<ip\\> send-community\\`\n\n- Made more readable with global config command \\`ip bgp-community new-format\\`\n\n- Applied to prefixes with \\`set community \\<value1\\> \\<value2\\> ... \\<valueN\\>\\` in route-map\n\n- To add communities without affecting existing, use \\`set community additive \\<value1\\> \\<value2\\> ... \\<valueN\\>\\`\n\n- Matched with \\`community-lists\\` - like ACLs, both standard and expanded (extended) versions\n\n    - Standard version uses 1-99, only permits or denies communities\n\n    \\`\\`\\`\n\n    ip community-list 1 permit 100:10 100:20\n\n    ip community-list 1 deny no-export\n\n    \\`\\`\\`\n\n    - Standard version uses AND logic with multiple communities in one line, OR logic with multiple lines\n\n    - Expanded version functions the same but adds \\*\\*regular expression\\*\\* functionality \\^\\[\\[\\[BGP#\\^f8087d\\|BGP regexp\\]\\]\\]\n\n- \\*\\*Sample config of setting community:\\*\\*\n\n    \\`\\`\\`\nip as-path access-list 1 permit 60$\n!\nroute-map SET_COMMUNITY permit 10\nmatch as-path 1\nset community 100:200\n!\nroute-map SET_COMMUNITY permit 100\n        !\nrouter bgp 200\nneighbor 155.1.45.4 send-community\nneighbor 155.1.45.4 route-map SET_COMMUNITY out\n    \\`\\`\\`\n\n- \\*\\*Sample config of matching community:\\*\\*\n\n    \\`\\`\\`\n\n    ip community-list standard 100:200 permit 100:200\n!\nroute-map SET_LOCAL_PREFERENCE permit 10\nmatch community 100:200\nset local-preference 200\n!\nroute-map SET_LOCAL_PREFERENCE permit 100\n!\nrouter bgp 100\nneighbor 155.1.13.3 route-map SET_LOCAL_PREFERENCE in\n    \\`\\`\\`\n\n- \\*\\*Well-known communities:\\*\\*\n\n    - \\*\\*no-advertise\\*\\*\n\n        - Set with \\`set community no-advertise\\`\n\n        - Signals to not advertise the prefix with this community to \\*any peer\\*\n\n    - \\*\\*no-export\\*\\*\n\n        - Set with \\`set community no-export\\`\n\n        - Signals to not export this prefix from the AS - can be advertised \\*within AS only\\*\n\n    - \\*\\*local-as\\*\\*\n\n        - Set with \\`set community local-as\\`\n\n        - Functions the same as \\`no-export\\` but also disallows advertisement \\*between confederation sub-as\\*\n\n- Deleting communities done with a \\`community-list\\` referencing community to be deleted, then using \\`set comm-list \\<comlist\\> delete\\` under route-map\n- **Confederation**\n- Used to reduce full-mesh BGP requirements by splitting one public AS into smaller sub-as\n\n- Sub-as use eBGP advertisement rules between each other, removing full mesh requirement\n\n- Notable exception to eBGP behavior is that \\*next-hop is not modified\\* between confederation peers\n\n- Configured by using sub-as with \\`router bgp\\` command and using \\`bgp confederation identifier \\<as\\>\\` under router bgp\n\n- Other sub-as defined with \\`bgp confederation peers \\<sub-as\\>\\` under router bgp\n\n- Can be used in combination with route reflection\n- **Next-hop modification**\n- Other than next-hop-self, you can also manually define next-hop with a route-map:\n\n    \\`\\`\\`\n\n    route-map SET_NEXT_HOP_FROM_R8 permit 10\n\n    set ip next-hop 155.1.58.8\n\n    !\n\n    router bgp 100\n\n    neighbor 155.1.58.8 route-map SET_NEXT_HOP_FROM_R8 in\n\n    \\`\\`\\`\n- **BGP regexp** ^f8087d\n- Can be used to search for specifc AS-PATHs in table - for example: \\`show ip bgp regexp \\^\\$\\`\n\n- Above will show prefixes originated locally with the AS. Cheat sheet \\[here.\\](http://gponsolution.com/bgp-regular-expressions-cheat-sheet.html)\n\n- Can be used to filter with ACLs with ip as-path: \\`ip as-path access-list 1 permit \\_54\\$\\`\n\n- Then use \\`match as-path\\` under a route-map to apply modifications\n- **BGP backdoor**\n- Created to prefer links via IGP over eBGP (raises AD of specific prefix to 200)\n\n- Configured with \\`network \\<subnet\\> mask \\<netmask\\> backdoor\\` under router BGP\n- **Conditional Advertising**\n- Allows advertising based on existence of another prefix in table\n\n- Configured with \\`neighbor \\<IP\\> advertise-map MAP1 \\[non-exist\\|exist-map\\] MAP2\\`\n\n- First map is prefix to advertise, second is prefix to monitor\n\n- BGP checks on existence of MAP2 every 60 seconds\n- **Conditional Route Injection**\n- Functions similar to \\[\\[BGP#\\^66c6ab\\|unsuppress map\\]\\] in allowing specific prefix advertisement from aggregate\n\n- Difference is it can be configured on routers not originating the aggregate route\n\n- One map matches aggregate and router originating summary, other map matches specific prefix to advertise\n\n- Configuration:\n\n    \\`\\`\\`\n\n    ip prefix-list INJECT_PREFIX permit 10.0.1.0/24\nip prefix-list AGGREGATE permit 10.0.0.0/22\nip prefix-list ROUTE_SOURCE permit 155.1.37.3/32\n!\nroute-map INJECT_MAP permit 10\nset ip address prefix-list INJECT_PREFIX\nset origin igp\n!\nroute-map EXIST_MAP permit 10\nmatch ip address prefix-list AGGREGATE\nmatch ip route-source prefix-list ROUTE_SOURCE\n!\nrouter bgp 300\nbgp inject-map INJECT_MAP exist-map EXIST_MAP\n    \\`\\`\\`\n- **Route Filtering**\n- Preferably done per-neighbor with route-maps, but can be applied directly with prefix list or ACL\n\n- \\`neighbor 155.1.79.9 route-map FROM_R9 in\\` for a route-map, with a deny in the route-map\n\n- \\`neighbor 192.10.1.254 prefix-list BLOCK_222 in\\` for prefix-list\n\n- \\`neighbor 192.10.1.254 distribute-list BLOCK_222 in\\` can be used for ACL filtering, not recommended\n- **Maximum prefix**\n- \\`maximum-prefix\\` can be used to limit allowed prefix \\# from a peer\n\n- By default shuts down connection, can use \\`warning-only\\` or \\`restart \\<minutes\\>\\` prefixes if desired\n\n- For example: \\`neighbor 155.1.108.10 maximum-prefix 20 80 restart 3\\`\n- **BGP Dampening**\n- Can be used to prevent table instability from flapping routes\n\n- Assigned to all prefixes with \\`bgp dampening \\[\\<Half_Life\\> \\<ReuseLimit\\> \\<SuppressLimit\\> \\<MaximumSuppressTime\\>\\]\\`\n\n- Can also be assigned to specific prefixes with route-maps:\n\n    \\`\\`\\`\n\n    ip as-path access-list 100 permit \\_100\\$\n!\nroute-map DAMPENING\nmatch as-path 100\nset dampening 4 750 2000 16\n!\nrouter bgp 200\nbgp dampening route-map DAMPENING\n    \\`\\`\\`\n- **BGP Outbound Route Filtering**\n- Allows you to push a route filter to a remote neighbor\n\n- Benefit is decrease in unnecessary route information as filtering occurs on neighbor before prefixes sent\n\n- Both peers must have orf capability enabled for it to function\n\n- Verified locally with: \\`show ip bgp neighbors \\<ip\\>\\`, remotely with: \\`show ip bgp neighbors \\<ip\\> received prefix-filter\\`\n\n    \\`\\`\\`\n\n    ip prefix-list ORF deny 112.0.0.0/8\n\n    ip prefix-list ORF permit 0.0.0.0/0 le 32\n\n    !\n\n    router bgp 100\n\n    neighbor 155.1.45.5 capability orf prefix-list both\n\n    neighbor 155.1.45.5 prefix-list ORF in\n\n    \\`\\`\\`\n- **See [[Redistribution#^e6bf27|redistribution]] for details on that**\n---\n- **Useful debugs**\n- \\`debug ip bgp\\`\n\n- \\`debug ip bgp updates\\`\n---\n#### BGP Attributes:\n##### Weight\n- Only used on the router where it is configured\n- Used to affect outbound routing.\n- Higher value is better - default is 0 (32768 if originated locally)\n- Highest in BGP path selection algorithm\n- Cisco proprietary\n- Configuration:\n\\`\\`\\`\n\nroute-map SET_WEIGHT\n\nmatch ip address\\|ip as-path ...\n\nset weight 100\n\n!\n\nrouter bgp 100\n\nneighbor \\<ip\\> route-map SET_WEIGHT in\n\n\\`\\`\\`\n##### Local Preference\n- Locally significant (to the AS), does not transit outside AS.\n- Used to affect outbound routing.\n- Higher value is better - defaults to 100\n- Configuration:\n\\`\\`\\`\n\nroute-map SET_LP\n\nmatch ip address\\|ip as-path ...\n\nset local-preference 1000\n\n!\n\nrouter bgp 100\n\nneighbor \\<ip\\> route-map SET_LP in\n\n\\`\\`\\`\n##### AS-PATH\n- Changed for each AS prefix transits through\n- Used to affect inbound routing\n- Can be used to influence path selection with as-path prepending\n- Can be ignored with `bgp bestpath as-path ignore` - this is dangerous and not recommended\n- Can be limited in length with `bgp maxas-limit <#>`\n- Configuration:\n\\`\\`\\`\n\nroute-map PREPEND\n\nmatch ip address\\|ip as-path ...\n\nset as-path prepend 100 100 100\n\n    !\n\nrouter bgp 100\n\nneighbor \\<ip\\> route-map PREPEND out\n\n\\`\\`\\`\n##### Origin Code\n- Rarely used to influence path selection - inflexible\n- IGP > EGP > Incomplete\n- Could affect inbound or outbound routing\n- Configuration:\n\\`\\`\\`\n\nroute-map ORIGIN\n\nmatch ip address\\|ip as-path ...\n\nset origin \\[igp\\|egp\\|incomplete\\]\n\n\n\nrouter bgp 100\n\nneighbor \\<ip\\> route-map ORIGIN out\n\n\\`\\`\\`\n##### MED\n- By default only compared when originating from same AS\n- Lowest is best - defaults to 0\n- Used to affect inbound routing\n- Can use `bgp always-compare-med` under router BGP to allow comparison of MED between different ASs\n- Configuration:\n\\`\\`\\`\n\nroute-map MED\n\nmatch ip address\\|ip as-path ...\n\nset metric 1000\n\n\n\nrouter bgp 100\n\nneighbor \\<ip\\> route-map MED out\n\n\\`\\`\\`"
  },
  {
    "objectID": "AAA.html",
    "href": "AAA.html",
    "title": "AAA",
    "section": "",
    "text": "General Notes\n\nAuthentication, authorization and accounting\nFramework for controlling access to resources, monitoring usage, ensuring correct permissions\nif-authenticated\n\nUsed with the aaa authorization command as a suffix to allow access to higher privilege commands even if the AAA server is unreachable\nwithout the if-authenticated suffix, the device will continually try to poll the AAA server for authorization and running any commands will be a painfully slow process\n\n\n\n\n\nUseful Debugs\n\ndebug aaa authentication - Debug all AAA auth\ndebug radius authentication - Debug for radius auth\ndebug tacacs authentication - Debug for tacacs auth\ndebug aaa protocol local - Debug local authentication\n\n\n\n\nStandard AAA Config\nusername <user> privilege 15 secret <pass> ! good idea to have local auth as backup\n!\naaa new-model\naaa group server tacacs+ <group-name>\n server-private 10.20.5.35 single-connection key <key>\n ip vrf forwarding Mgmt-intf\n ip tacacs source-interface GigabitEthernet0\n!\n! alternatively can define the server like this\n!\ntacacs server <serv-name>\n address ipv4 10.20.5.35\n key <key>\naaa group server tacacs+ <group-name>\n server name <serv-name>\n ip tacacs source-interface GigabitEthernet0\n!\naaa authentication login <list-name> group <group-name> local\naaa authorization exec <list-name> group <group-name> local if-authenticated\naaa authorization commands 15 <list-name> group <group-name> local if-authenticated\naaa accounting commands 1 <list-name> start-stop group <group-name>\naaa accounting commands 15 <list-name> start-stop group <group-name>\naaa session-id common\n!\n! using the list-name 'default' will apply the AAA methods to all lines without additional config\n!\nline vty 0 4\nlogin authentication <list-name>"
  },
  {
    "objectID": "DMVPN.html",
    "href": "DMVPN.html",
    "title": "DMVPN",
    "section": "",
    "text": "General Notes\n\nUsed for large-scale, scalable deployment of mGRE tunnels in a hub-and-spoke topology\nCan establish connectivity through NAT, DHCP\nUtilizes NHRP (Next Hop Resolution Protocol)\n\nNHS (next-hop server) is statically defined on the spoke routers\nEach spoke router then dynamically registers with the hub(s) and forms tunnel to hub(s)\nHub will populate NHRP cache with spoke information and allow communication between all nodes\nIn phase 2, 3, hub will assist with spoke-to-spoke tunnels by sending resolution, redirect NHRP messages to spokes\n\nCommon to advertise summary route from hub, keep all spokes as stubs\nFront door VRFs used to bypass recursive routing issues with overlay\n\n\n\n\nDMVPN Phases\n\nPhase 1\n\nAll traffic between spokes in this design must transit the hub, no spoke-spoke tunnels are formed\n\nPhase 2\n\nAllows spoke-to-spoke traffic by making all tunnels (including spokes) multipoint\nThis allows spokes to form tunnels directly to each other\nMust not have routing protocol use next-hop-self or the tunnels will not form\nDoes NOT work with summarization - since the RIB will not have a route to the other spokes, all traffic will transit the hub\nIf using OSPF, network type must be broadcast or non-broadcast to prevent changing next-hops\n\nIn this scenario the spokes must be set at priority 0 to prevent them becoming DRs - if spokes become DRs the network will not function as they cannot multicast between each other\n\n\nPhase 3\n\nAllows spoke-to-spoke traffic by using NHRP redirect and shortcut commands that allow NHRP to rewrite next hops in the RIB\nMain benefit over phase 2 is allowing summarization from hubs to spokes - spokes will still be able to form tunnels to each other in phase 3 even with a default route from the hub\n\n\n\n\n\nUseful show commands\n\nshow dmvpn [detail] - shows tunnel status, peers, up/down time, etc\nshow ip nhrp [brief] - shows NHRP cache, NHRP-specific details useful for phase 2, 3\nshow ip route next-hop-override - shows NH overrides for DMVPN phase 3\nshow crypto isakmp sa; show crypto ike2 sa; show crypto ipsec sa - for troubleshooting IPsec when used with DMVPN\n\n\n\n\nConfig\n\nDMVPN Phase 1 Configuration (No IPsec)\nHub Config\n! Essential\ninterface Tunnel100\nip address 192.168.100.11 255.255.255.0\nip nhrp map multicast dynamic\nip nhrp network-id 100\ntunnel source GigabitEthernet0/1\ntunnel mode gre multipoint\n\n! Discretionary\nbandwidth 4000\nip mtu 1400\nip tcp adjust-mss 1360\nip nhrp authentication NHRPAUTH\nno ip split-horizon eigrp 100 ! necessary for EIGRP\ntunnel key 100 ! necessary in multi-hub designs\nSpoke Config\ninterface Tunnel100\nip address 192.168.100.31 255.255.255.0\nip nhrp network-id 100\nip nhrp nhs <TunnelIP> nbma <PublicIP> multicast\ntunnel source GigabitEthernet0/1\ntunnel destination <PublicIP>\n\n! Discretionary\nbandwidth 4000\nip mtu 1400\nip tcp adjust-mss 1360\nip nhrp authentication NHRPAUTH\ntunnel key 100 ! necessary in multi-hub designs\n\n\nDMVPN Phase 2 Configuration (No IPsec)\nHub Config\n!same as Phase 1, but including:\n\nno ip next-hop-self eigrp 100\n\n!so that hub doesn't list itself as NH for spokes\nSpoke Config\n!same as Phase 1, but including:\n\ntunnel mode gre multipoint\n\n!so that spokes can form direct tunnels\n\n\nDMVPN Phase 3 Configuration (No IPsec)\nHub Config\n!same as Phase 1, but including:\n\nip nhrp redirect\n\n!so that hub will forward redirect messages to spokes after initial traffic, \nallowing spoke-to-spoke tunnels to form\nSpoke Config\n!same as Phase 1, but including:\n\nip nhrp shortcut\ntunnel mode gre multipoint\n\n!to allow the spokes to install NHRP next hops into the routing table and form direct tunnels\n\n\nDMVPN IKEv1 IPsec Configuration\nVRFless\ncrypto isakmp policy 10\n encr aes 128\n hash sha256\n authentication pre-share\n group 16\n!\ncrypto isakmp key DMVPN_PSK address 0.0.0.0  \n!\ncrypto ipsec transform-set ESP-AES-256-SHA-512 esp-aes 256 esp-sha512-hmac \n mode transport\n!\ncrypto ipsec profile DMVPN_PROFILE\n set transform-set ESP-AES-256-SHA-512\n!\ninterface Tunnel0\n tunnel protection ipsec profile DMVPN_PROFILE\nFVRF\n!same as above, but instead of crypto isakmp key:\ncrypto keyring VRF_AWARE_PSK vrf UNDERLAY_TRANSPORT \n  pre-shared-key address 0.0.0.0 0.0.0.0 key DMVPN_PSK\n\n\nDMVPN IKEv2 IPsec Configuration (See IPsec page for deep dive)\nVRFless\ncrypto ikev2 keyring DMVPN-KEYRING \npeer ANY\naddress 0.0.0.0 0.0.0.0\npre-shared-key CISCO456\n!\ncrypto ikev2 profile DMVPN-IKE\nmatch identity remote address 0.0.0.0\nauthentication remote pre-share\nauthentication local pre-share\nkeyring local DMVPN-KEYRING\n!\ncrypto ipsec transform-set SET1 esp-aes 256 esp-sha-hmac\nmode transport\n!\ncrypto ipsec profile DMVPN-IPSEC\nset transform-set SET1\nset ikev2-profile DMVPN-IKE\n!\ninterface Tunnel0\ntunnel protection ipsec profile DMVPN-IPSEC\nFVRF\n!Same as above, but under crypto ikev2 profile:\n match fvrf INET\n\n\nSee VRF page for FVRF config details"
  },
  {
    "objectID": "IPsec.html",
    "href": "IPsec.html",
    "title": "IPSec",
    "section": "",
    "text": "Include:\n\nData origin authentication\n\nVerifying where packet came from\n\nData integity\n\nEnsuring packet wasn’t changed in transit\n\nConfidentiality\n\nEncryption, preventing packet from being intercepted and read\nPrevented by limited allowed window\n\nConfidentiality is the mainly thought-of core feature\n\nIPSec uses symmetric key encryption\nPoint-to-point tunnels in almost all cases, GETVPN can be P2MP\nTunnel keys dynamically negotiated through IKE\nIKEv2 is superior but not supported by all platforms"
  },
  {
    "objectID": "index.html#education",
    "href": "index.html#education",
    "title": "Brendan’s Networking Notes",
    "section": "Education",
    "text": "Education\nUniversity of California, San Diego | San Diego, CA PhD in Mathematics | Sept 2011 - June 2015\nMacalester College | St. Paul MA B.A in Economics | Sept 2007 - June 2011"
  },
  {
    "objectID": "index.html#experience",
    "href": "index.html#experience",
    "title": "Brendan’s Networking Notes",
    "section": "Experience",
    "text": "Experience\nWengo Analytics | Head Data Scientist | April 2018 - present\nGeoScynce | Chief Analyst | Spet 2012 - April 2018"
  },
  {
    "objectID": "BGP.html#origin-code",
    "href": "BGP.html#origin-code",
    "title": "BGP",
    "section": "Origin Code",
    "text": "Origin Code\n\nRarely used to influence path selection - inflexible\nIGP > EGP > Incomplete\nCould affect inbound or outbound routing\nConfiguration:\n\n    route-map ORIGIN\n     match ip address|ip as-path ...\n     set origin [igp|egp|incomplete]\n        \n    router bgp 100\n     neighbor <ip> route-map ORIGIN out\n\nMED\n\nBy default only compared when originating from same AS\nLowest is best - defaults to 0\nUsed to affect inbound routing\nCan use bgp always-compare-med under router BGP to allow comparison of MED between different ASs\nConfiguration:\n\n    route-map MED\n     match ip address|ip as-path ...\n     set metric 1000\n        \n    router bgp 100\n     neighbor <ip> route-map MED out"
  },
  {
    "objectID": "index.html#about-me",
    "href": "index.html#about-me",
    "title": "Bren’s Networking Notes",
    "section": "About me",
    "text": "About me\nI’m a network engineer with a passion for learning based in beautiful British Columbia, Canada. Aside from tech, I love weightlifting, hiking and gaming. You can find me on my LinkedIn or on my YouTube channel below."
  },
  {
    "objectID": "BGP.html#bgp-attributes",
    "href": "BGP.html#bgp-attributes",
    "title": "BGP",
    "section": "BGP Attributes",
    "text": "BGP Attributes\n\nWeight\n\nOnly used on the router where it is configured\nUsed to affect outbound routing.\nHigher value is better - default is 0 (32768 if originated locally)\nHighest in BGP path selection algorithm\nCisco proprietary\nConfiguration:\n\n    route-map SET_WEIGHT\n     match ip address|ip as-path ...\n     set weight 100\n    !\n    router bgp 100\n     neighbor <ip> route-map SET_WEIGHT in\n\n\nLocal Preference\n\nLocally significant (to the AS), does not transit outside AS.\nUsed to affect outbound routing.\nHigher value is better - defaults to 100\nConfiguration:\n\n    route-map SET_LP\n     match ip address|ip as-path ...\n     set local-preference 1000\n     !\n    router bgp 100\n     neighbor <ip> route-map SET_LP in\n\n\nAS-PATH\n\nChanged for each AS prefix transits through\nUsed to affect inbound routing\nCan be used to influence path selection with as-path prepending\nCan be ignored with bgp bestpath as-path ignore - this is dangerous and not recommended\nCan be limited in length with bgp maxas-limit <#>\nConfiguration:\n\n    route-map PREPEND\n     match ip address|ip as-path ...\n     set as-path prepend 100 100 100\n        !\n    router bgp 100\n     neighbor <ip> route-map PREPEND out\n\n\nOrigin Code\n\nRarely used to influence path selection - inflexible\nIGP > EGP > Incomplete\nCould affect inbound or outbound routing\nConfiguration:\n\n    route-map ORIGIN\n     match ip address|ip as-path ...\n     set origin [igp|egp|incomplete]\n        \n    router bgp 100\n     neighbor <ip> route-map ORIGIN out\n\nMED\n\nBy default only compared when originating from same AS\nLowest is best - defaults to 0\nUsed to affect inbound routing\nCan use bgp always-compare-med under router BGP to allow comparison of MED between different ASs\nConfiguration:\n\n    route-map MED\n     match ip address|ip as-path ...\n     set metric 1000\n        \n    router bgp 100\n     neighbor <ip> route-map MED out"
  },
  {
    "objectID": "BGP.html#key-features",
    "href": "BGP.html#key-features",
    "title": "BGP",
    "section": "Key Features",
    "text": "Key Features\n\nSummarization\n\nPrimarily done with the aggregate address <prefix> <mask> command\n\nOnly works for prefixes already in BGP table\nRouter performing summary installs null route into table for aggregate\nShould be used with as-set suffix - this will include AS-PATH information and prevent loops/suboptimal routes\n\nInherits community values of any specific prefixes\nFor example, if one of four specific prefixes has a no-export community, summary with as-set will as well\nThese can be modified or stripped with attribute-map suffix\nCan also use advertise-map suffix to select specific prefix which will determine attributes of summary\n\nBy default does not suppress specific prefixes - summary-only at the end of command will\nPrefixes summarized in this way have ATOMIC_AGGREGATE attribute assigned\nAlso assigned AGGREGATOR attribute specifying AS number and RID of aggregator\nCan selectively suppress specifc prefixes with suppress-map - all prefixes in map will be suppressed:\n\n      ip prefix-list SUPPRESS_PREFIX 150.1.1.0/24\n      !\n      route-map SUPPRESS_MAP permit 10\n       match ip address prefix-list SUPPRESS_PREFIX\n      !\n      router bgp 200  \n       aggregate-address 150.1.0.0 mask 255.255.0.0 suppress-map SUPPRESS_MAP as-set\n\nCan also use unsuppress-map combined with summary-only to advertise specific prefixes ^66c6ab\nSince this is per-neighbor it can be used for inbound path manipulation:\n\n      ip prefix-list NET_1 permit 10.0.1.0/24 \n      !\n      route-map UNSUPPRESS_MAP permit 10\n       match ip address prefix-list NET_1\n      !       \n      router bgp 200\n       aggregate-address 10.0.0.0 255.255.252.0 summary-only as-set\n       neighbor 155.1.37.7 unsuppress-map UNSUPPRESS_MAP\nAlternatively, can advertise a summary prefix in IGP with the network command - commonly done with a static null route\n\nRoute Reflection\n\nUsed to bypass full mesh requirement in iBGP\nConfigured with neighbor <ip> route-reflector-client on route reflector\nReflector must have full mesh if full reachability is required (unless using multiple reflectors)\nAbide by following 3 rules:\n\n\nRoutes learned from EBGP peers can be sent to other EBGP peers, clients, and non-clients.\nRoutes learned from client peers can be sent to EBGP peers, other client peers, and non-clients.\nRoutes learned from non-client peers can be sent to EBGP peers, and client peers, but not other non-clients.\n\n\nFunctions like DR/BDR in [[OSPF]] by default - does not insert itself into transit path\nCan be forced to transit RR with next-hop-self command if desired\n\nCommunities\n\nActivated for transport to peers with neighbor <ip> send-community\nMade more readable with global config command ip bgp-community new-format\nApplied to prefixes with set community <value1> <value2> ... <valueN> in route-map\nTo add communities without affecting existing, use set community additive <value1> <value2> ... <valueN>\nMatched with community-lists - like ACLs, both standard and expanded (extended) versions\n\nStandard version uses 1-99, only permits or denies communities\n\n  ip community-list 1 permit 100:10 100:20\n  ip community-list 1 deny no-export\n\nStandard version uses AND logic with multiple communities in one line, OR logic with multiple lines\nExpanded version functions the same but adds regular expression functionality\n\nSample config of setting community:\n\n          ip as-path access-list 1 permit 60$\n          !\n          route-map SET_COMMUNITY permit 10\n           match as-path 1\n           set community 100:200\n          !\n          route-map SET_COMMUNITY permit 100\n          !\n          router bgp 200\n           neighbor 155.1.45.4 send-community\n           neighbor 155.1.45.4 route-map SET_COMMUNITY out\n\nSample config of matching community:\n\n          ip community-list standard 100:200 permit 100:200\n          !\n          route-map SET_LOCAL_PREFERENCE permit 10\n           match community 100:200\n           set local-preference 200\n          !\n          route-map SET_LOCAL_PREFERENCE permit 100\n          !\n          router bgp 100\n           neighbor 155.1.13.3 route-map SET_LOCAL_PREFERENCE in\n\nWell-known communities:\n\nno-advertise\n\nSet with set community no-advertise\nSignals to not advertise the prefix with this community to any peer\n\nno-export\n\nSet with set community no-export\nSignals to not export this prefix from the AS - can be advertised within AS only\n\nlocal-as\n\nSet with set community local-as\nFunctions the same as no-export but also disallows advertisement between confederation sub-as\n\n\nDeleting communities done with a community-list referencing community to be deleted, then using set comm-list <comlist> delete under route-map\n\nConfederation\n\nUsed to reduce full-mesh BGP requirements by splitting one public AS into smaller sub-as\nSub-as use eBGP advertisement rules between each other, removing full mesh requirement\nNotable exception to eBGP behavior is that next-hop is not modified between confederation peers\nConfigured by using sub-as with router bgp command and using bgp confederation identifier <as> under router bgp\nOther sub-as defined with bgp confederation peers <sub-as> under router bgp\nCan be used in combination with route reflection\n\nNext-hop modification\n\nOther than next-hop-self, you can also manually define next-hop with a route-map:\n\n      route-map SET_NEXT_HOP_FROM_R8 permit 10\n      set ip next-hop 155.1.58.8\n      !\n      router bgp 100\n      neighbor 155.1.58.8 route-map SET_NEXT_HOP_FROM_R8 in\nBGP regexp ^f8087d\n\nCan be used to search for specifc AS-PATHs in table - for example: show ip bgp regexp ^$\nAbove will show prefixes originated locally with the AS. Cheat sheet here.\nCan be used to filter with ACLs with ip as-path: ip as-path access-list 1 permit _54$\nThen use match as-path under a route-map to apply modifications\n\nBGP backdoor\n\nCreated to prefer links via IGP over eBGP (raises AD of specific prefix to 200)\nConfigured with network <subnet> mask <netmask> backdoor under router BGP\n\nConditional Advertising\n\nAllows advertising based on existence of another prefix in table\nConfigured with neighbor <IP> advertise-map MAP1 [non-exist|exist-map] MAP2\nFirst map is prefix to advertise, second is prefix to monitor\nBGP checks on existence of MAP2 every 60 seconds\n\nConditional Route Injection\n\nFunctions similar to [[BGP#^66c6ab|unsuppress map]] in allowing specific prefix advertisement from aggregate\nDifference is it can be configured on routers not originating the aggregate route\nOne map matches aggregate and router originating summary, other map matches specific prefix to advertise\nConfiguration:\n\n      ip prefix-list INJECT_PREFIX permit 10.0.1.0/24\n      ip prefix-list AGGREGATE permit 10.0.0.0/22\n      ip prefix-list ROUTE_SOURCE permit 155.1.37.3/32\n      !\n      route-map INJECT_MAP permit 10\n       set ip address prefix-list INJECT_PREFIX\n       set origin igp\n      !\n      route-map EXIST_MAP permit 10\n       match ip address prefix-list AGGREGATE\n       match ip route-source prefix-list ROUTE_SOURCE\n      ! \n      router bgp 300\n       bgp inject-map INJECT_MAP exist-map EXIST_MAP\nRoute Filtering\n\nPreferably done per-neighbor with route-maps, but can be applied directly with prefix list or ACL\nneighbor 155.1.79.9 route-map FROM_R9 in for a route-map, with a deny in the route-map\nneighbor 192.10.1.254 prefix-list BLOCK_222 in for prefix-list\nneighbor 192.10.1.254 distribute-list BLOCK_222 in can be used for ACL filtering, not recommended\n\nMaximum prefix\n\nmaximum-prefix can be used to limit allowed prefix # from a peer\nBy default shuts down connection, can use warning-only or restart <minutes> prefixes if desired\nFor example: neighbor 155.1.108.10 maximum-prefix 20 80 restart 3\n\nBGP Dampening\n\nCan be used to prevent table instability from flapping routes\nAssigned to all prefixes with bgp dampening [<Half_Life> <ReuseLimit> <SuppressLimit> <MaximumSuppressTime>]\nCan also be assigned to specific prefixes with route-maps:\n\n      ip as-path access-list 100 permit _100$\n      !\n      route-map DAMPENING\n       match as-path 100\n       set dampening 4 750 2000 16\n      !\n      router bgp 200\n       bgp dampening route-map DAMPENING\nBGP Outbound Route Filtering\n\nAllows you to push a route filter to a remote neighbor\nBenefit is decrease in unnecessary route information as filtering occurs on neighbor before prefixes sent\nBoth peers must have orf capability enabled for it to function\nVerified locally with: show ip bgp neighbors <ip>, remotely with: show ip bgp neighbors <ip> received prefix-filter\n\n      ip prefix-list ORF deny 112.0.0.0/8\n      ip prefix-list ORF permit 0.0.0.0/0 le 32\n      !\n      router bgp 100\n       neighbor 155.1.45.5 capability orf prefix-list both\n       neighbor 155.1.45.5 prefix-list ORF in\nSee Redistribution for details on that\n\n\n\nUseful debugs\n\ndebug ip bgp\ndebug ip bgp updates"
  },
  {
    "objectID": "IPsec.html#useful-showdebug-commands",
    "href": "IPsec.html#useful-showdebug-commands",
    "title": "IPSec",
    "section": "Useful show/debug commands",
    "text": "Useful show/debug commands\n\nPhases:\n\nPhase 1:\n\nshow crypto isakmp sa - should show QM_IDLE as state and status as ACTIVE\ndebug crypto isakmp, or debug crypto condition peer ipv4 <IP> to debug for one specific peer\n\nPhase 2:\n\nshow crypto ipsec sa [<peer IP>]\ndebug crypto ipsec"
  },
  {
    "objectID": "IPsec.html#crypto-profile-ipsec-config-w-ikev1-with-without-gre",
    "href": "IPsec.html#crypto-profile-ipsec-config-w-ikev1-with-without-gre",
    "title": "IPSec",
    "section": "Crypto Profile IPSec Config w/ IKEv1 (with & without GRE)",
    "text": "Crypto Profile IPSec Config w/ IKEv1 (with & without GRE)\n    interface Tunnel0  \n     ip address <ip & mask>\n     tunnel source <ip>\n     tunnel destination <ip>\n      \n    crypto isakmp policy 10\n     encryption aes 256\n     hash md5\n     authentication pre-share\n     group 14\n     lifetime 3600 \n    !\n    crypto isakmp key <PSK> address <remote outside interface IP with subnet mask>\n    !\n    crypto ipsec transform-set <ts-name> esp-3des esp-md5-hmac\n     mode transport\n     !mode tunnel if using VTI\n    \n    crypto ipsec profile <profile-name>\n     set transform-set <ts-name>\n      \n    interface Tunnel0\n     tunnel protection ipsec profile <profile-name>\n     ip mtu 1400\n     ip tcp adjust-mss 1360\n     !optionally can define tunnel mode as ipsec to bypass GRE and use VTI - 'tunnel mode ipsec ipv4'\n    \n    !note that routing through tunnel must exist for ipsec sa to form - routing not included in config\n    !can do underlay and overlay routing protocols, static routing, front door vrfs, many options"
  },
  {
    "objectID": "IPsec.html#crypto-profile-ipsec-config-w-ikev2-with-without-gre",
    "href": "IPsec.html#crypto-profile-ipsec-config-w-ikev2-with-without-gre",
    "title": "IPSec",
    "section": "Crypto Profile IPSec Config w/ IKEv2 (with & without GRE)",
    "text": "Crypto Profile IPSec Config w/ IKEv2 (with & without GRE)\n    interface Tunnel0  \n     ip address <ip & mask>\n     tunnel source <ip>\n     tunnel destination <ip>\n      \n    crypto ikev2 keyring <keyring-name>\n     peer ANY\n     address 0.0.0.0 0.0.0.0 ! any host for DMVPN, specific host for site-to-site\n     pre-shared-key <psk>\n    !\n    crypto ikev2 profile <ike-prof-name>\n     match identity remote address 0.0.0.0 ! any host for DMVPN, specific host for site-to-site\n     authentication remote pre-share\n     authentication local pre-share\n     keyring local <keyring-name>\n    !\n    crypto ipsec transform-set <ts-name> esp-aes 256 esp-sha-hmac\n     mode transport\n     !mode tunnel if using VTI\n    !\n    crypto ipsec profile <profile-name>\n     set transform-set <ts-name>\n     set ikev2-profile <ike-prof-name>\n    !\n    interface Tunnel0\n     tunnel protection ipsec profile <profile-name>\n     !optionally can define tunnel mode as ipsec to bypass GRE and use VTI - 'tunnel mode ipsec ipv4'\n    \n    !note that routing through tunnel must exist for ipsec sa to form - routing not included in config\n    !can do underlay and overlay routing protocols, static routing, front door vrfs, many options"
  },
  {
    "objectID": "IPsec.html#crypto-map-ipsec-config-w-ikev1-with-gre",
    "href": "IPsec.html#crypto-map-ipsec-config-w-ikev1-with-gre",
    "title": "IPSec",
    "section": "Crypto Map IPSec Config w/ IKEv1 (with GRE)",
    "text": "Crypto Map IPSec Config w/ IKEv1 (with GRE)\n    interface Tunnel0  \n    ip address <ip & mask>\n    tunnel source <ip>\n    tunnel destination <ip>\n    ip mtu 1400\n    ip tcp adjust-mss 1360\n      \n    crypto isakmp policy 10\n     encryption aes 256\n     hash md5\n     authentication pre-share\n     group 14\n     lifetime 180 \n    !\n    crypto isakmp key <PSK> address <remote outside interface IP with 32 bit subnet mask>\n    !\n    crypto ipsec transform-set <ts-name> esp-3des esp-md5-hmac\n        mode transport\n    !\n    access-list 120 permit gre host <local outside interface ip> host <remote outside interface IP>\n      \n    crypto map <cm-name> 10 ipsec-isakmp   \n    set peer <ip>\n    set transform-set <ts-name> \n    match address 120  \n      \n    interface Ethernet0/0   \n    crypto map <cm-name>\n\nSee DMVPN page for details on DMVPN IPsec config"
  },
  {
    "objectID": "IPsec.html#see-dmvpn-page-for-details-on-dmvpn-ipsec-config",
    "href": "IPsec.html#see-dmvpn-page-for-details-on-dmvpn-ipsec-config",
    "title": "IPSec",
    "section": "See DMVPN page for details on DMVPN IPsec config",
    "text": "See DMVPN page for details on DMVPN IPsec config"
  },
  {
    "objectID": "IPsec.html#phases",
    "href": "IPsec.html#phases",
    "title": "IPSec",
    "section": "Phases",
    "text": "Phases\n- Phase one establishes ISAKMP SA, secure tunnel to negotiate phase two through\n- Phase two establishes IPsec SA, tunnel used to protect actual data traffic\n- **In Phase 1:**\n    - Auth usually either PSK (Pre-shared key) or certificate based\n    - DH^[Diffie Hellman - asymmetric key algorithm used for IPsec, SSL, SSH and others. Peers create public and private keys, exchange public key and generate symmetric key (shared secret) with peer's private key^[[images/DH.png|See Example]]] used to exchange crypto keys\n        - Higher DH number is more secure\n    - Encryption algorithms used to protect traffic\n        - Possibilities include DES, 3DES, AES-128, AES-256, etc\n    - Authentication hashes used to ensure packet wasn't modified in transit\n        - IKEv1 supports MD5, SHA-1\n    - IKE parameters *must match* in order for phase 1 to complete successfully\n    - Main mode and aggressive mode both options for completing this step\n        - Main mode preferred as aggressive has security issues\n- **In Phase 2, following are negotiated:**\n    - Security protocol\n        - ESP (Encapsulating Security Payload) or AH (Authentication Header)\n        - AH does not support encryption, rarely used\n    - Encapsulation modes\n        - Tunnel or transport\n        - Tunnel adds new IP header, used for actually tunneling traffic\n        - Transport mode used for host-to-host applications or combined with GRE which does the tunneling itself\n    - Encryption (used for actual data traffic, not just tunnel)\n        - DES, 3DES, AES-128, AES-256, etc\n    - Authentication (hashing)\n        - MD5, SHA, etc\n    - Combination of the above called IPsec **Transform Set**\n    - Only performed in QM (quick mode)\n\nUDP 500, 4500 are ports used to establish control plane\n\n4500 is only used with NAT-T1\n\nIPsec dataplane uses ports 50 (ESP), 51 (AH) or 4500 with NAT-T"
  },
  {
    "objectID": "IPsec.html#ipsec-phases",
    "href": "IPsec.html#ipsec-phases",
    "title": "IPSec",
    "section": "IPsec Phases",
    "text": "IPsec Phases\n\nTwo phases:\n\nPhase one establishes ISAKMP SA, secure tunnel to negotiate phase two through\nPhase two establishes IPsec SA, tunnel used to protect actual data traffic\nIn Phase 1:\n\nAuth usually either PSK (Pre-shared key) or certificate based\nDH1 used to exchange crypto keys\n\nHigher DH number is more secure\n\nEncryption algorithms used to protect traffic\n\nPossibilities include DES, 3DES, AES-128, AES-256, etc\n\nAuthentication hashes used to ensure packet wasn’t modified in transit\n\nIKEv1 supports MD5, SHA-1\n\nIKE parameters must match in order for phase 1 to complete successfully\nMain mode and aggressive mode both options for completing this step\n\nMain mode preferred as aggressive has security issues\n\n\nIn Phase 2, following are negotiated:\n\nSecurity protocol\n\nESP (Encapsulating Security Payload) or AH (Authentication Header)\nAH does not support encryption, rarely used\n\nEncapsulation modes\n\nTunnel or transport\nTunnel adds new IP header, used for actually tunneling traffic\nTransport mode used for host-to-host applications or combined with GRE which does the tunneling itself\n\nEncryption (used for actual data traffic, not just tunnel)\n\nDES, 3DES, AES-128, AES-256, etc\n\nAuthentication (hashing)\n\nMD5, SHA, etc\n\nCombination of the above called IPsec Transform Set\nOnly performed in QM (quick mode)\n\n\nUDP 500, 4500 are ports used to establish control plane\n\n4500 is only used with NAT-T2\n\nIPsec dataplane uses ports 50 (ESP), 51 (AH) or 4500 with NAT-T"
  },
  {
    "objectID": "BackupBGP.html",
    "href": "BackupBGP.html",
    "title": "BackupBGP",
    "section": "",
    "text": "AD 200 for iBGP, 20 for eBGP\nForms connection over TCP port 179\nOnly advertises best routes, all others not advertised\nBest-path Algorithm\n\nWeight (Highest)\nLocal Preference (Highest)\nOriginated locally\nAS_PATH (Shortest)\nOrigin code (IGP > EGP > ?)\nMED (Lowest)\nPath (eBGP > iBGP)\nIGP metric (Lowest)\nRoute age (Oldest, only compared when routes from different eBGP peers)\nRID (Lowest)\n\n\nWe Love Oranges AS Oranges Mean Pure Refreshment\n\niBGP\n\nTTL of 255 by default\nDoes not change next-hop by default - can be changed with neighbor <ip-address | peer-group-name> next-hop-self\nUses split horizon1 for loop prevention\n\neBGP\n\nTTL of 1 by default - can be increased with neighbor <ip> ebgp-multihop 255\nCan also use neighbor <ip> ttl-security hops <hop-count>\nDifference between above is that eBGP-multihop sets the maximum range allowed, whereas TTL-security sets the exact range\nIf peering with different update source but not through additional hops, can use neighbor <ip> disable-connected-check\nDoes change next-hop by default\n\nPeer groups\n\nCan be used when multiple neighbors have the same requirements\nUse neighbor <name> peer-group to set up peer-group, then perform config under neighbor <name> <command>\nPeer groups applied to neighbor with neighbor <ip> peer-group <name>\nCan check with show ip bgp peer-group\nPeer groups are natively set up on the back end to limit CPU usage - only purpose is simplification of config\n\nECMP\n\nCan enable load-balancing with maximum paths <path#> command\nOnly takes effect when many parameters on routes match - Weight, local preference, AS-PATH (both numbers and lengths), origin code, MED, IGP metric\n\nExact match of prefix in route table required for advertisement - configuring null route to prefix common\nGood idea to change update source to a loopback interface with neighbor <ip> update-source <loopback>\nclear ip bgp * soft useful to refresh route table without tearing down neighborships\nSelectively advertise default route with neighbor <IP> default-originate [route-map <CONDITION>]\nAdvertise a different AS to a peer than router bgp AS with neighbor <IP> local-as <OldAS> - useful in migration\nneighbor <IP> fall-over can be used to immediately tear down session if IGP route to neighbor disappears"
  },
  {
    "objectID": "BackupBGP.html#key-features",
    "href": "BackupBGP.html#key-features",
    "title": "BackupBGP",
    "section": "Key Features",
    "text": "Key Features\n\nSummarization\n\nPrimarily done with the aggregate address <prefix> <mask> command\n\nOnly works for prefixes already in BGP table\nRouter performing summary installs null route into table for aggregate\nShould be used with as-set suffix - this will include AS-PATH information and prevent loops/suboptimal routes\n\nInherits community values of any specific prefixes\nFor example, if one of four specific prefixes has a no-export community, summary with as-set will as well\nThese can be modified or stripped with attribute-map suffix\nCan also use advertise-map suffix to select specific prefix which will determine attributes of summary\n\nBy default does not suppress specific prefixes - summary-only at the end of command will\nPrefixes summarized in this way have ATOMIC_AGGREGATE attribute assigned\nAlso assigned AGGREGATOR attribute specifying AS number and RID of aggregator\nCan selectively suppress specifc prefixes with suppress-map - all prefixes in map will be suppressed:\n\n      ip prefix-list SUPPRESS_PREFIX 150.1.1.0/24\n      !\n      route-map SUPPRESS_MAP permit 10\n       match ip address prefix-list SUPPRESS_PREFIX\n      !\n      router bgp 200  \n       aggregate-address 150.1.0.0 mask 255.255.0.0 suppress-map SUPPRESS_MAP as-set\n\nCan also use unsuppress-map combined with summary-only to advertise specific prefixes ^66c6ab\nSince this is per-neighbor it can be used for inbound path manipulation:\n\n      ip prefix-list NET_1 permit 10.0.1.0/24 \n      !\n      route-map UNSUPPRESS_MAP permit 10\n       match ip address prefix-list NET_1\n      !       \n      router bgp 200\n       aggregate-address 10.0.0.0 255.255.252.0 summary-only as-set\n       neighbor 155.1.37.7 unsuppress-map UNSUPPRESS_MAP\nAlternatively, can advertise a summary prefix in IGP with the network command - commonly done with a static null route\n\nRoute Reflection\n\nUsed to bypass full mesh requirement in iBGP\nConfigured with neighbor <ip> route-reflector-client on route reflector\nReflector must have full mesh if full reachability is required (unless using multiple reflectors)\nAbide by following 3 rules:\n\n\nRoutes learned from EBGP peers can be sent to other EBGP peers, clients, and non-clients.\nRoutes learned from client peers can be sent to EBGP peers, other client peers, and non-clients.\nRoutes learned from non-client peers can be sent to EBGP peers, and client peers, but not other non-clients.\n\n\nFunctions like DR/BDR in [[OSPF]] by default - does not insert itself into transit path\nCan be forced to transit RR with next-hop-self command if desired\n\nCommunities\n\nActivated for transport to peers with neighbor <ip> send-community\nMade more readable with global config command ip bgp-community new-format\nApplied to prefixes with set community <value1> <value2> ... <valueN> in route-map\nTo add communities without affecting existing, use set community additive <value1> <value2> ... <valueN>\nMatched with community-lists - like ACLs, both standard and expanded (extended) versions\n\nStandard version uses 1-99, only permits or denies communities\n\n  ip community-list 1 permit 100:10 100:20\n  ip community-list 1 deny no-export\n\nStandard version uses AND logic with multiple communities in one line, OR logic with multiple lines\nExpanded version functions the same but adds regular expression functionality\n\nSample config of setting community:\n\n          ip as-path access-list 1 permit 60$\n          !\n          route-map SET_COMMUNITY permit 10\n           match as-path 1\n           set community 100:200\n          !\n          route-map SET_COMMUNITY permit 100\n          !\n          router bgp 200\n           neighbor 155.1.45.4 send-community\n           neighbor 155.1.45.4 route-map SET_COMMUNITY out\n\nSample config of matching community:\n\n          ip community-list standard 100:200 permit 100:200\n          !\n          route-map SET_LOCAL_PREFERENCE permit 10\n           match community 100:200\n           set local-preference 200\n          !\n          route-map SET_LOCAL_PREFERENCE permit 100\n          !\n          router bgp 100\n           neighbor 155.1.13.3 route-map SET_LOCAL_PREFERENCE in\n\nWell-known communities:\n\nno-advertise\n\nSet with set community no-advertise\nSignals to not advertise the prefix with this community to any peer\n\nno-export\n\nSet with set community no-export\nSignals to not export this prefix from the AS - can be advertised within AS only\n\nlocal-as\n\nSet with set community local-as\nFunctions the same as no-export but also disallows advertisement between confederation sub-as\n\n\nDeleting communities done with a community-list referencing community to be deleted, then using set comm-list <comlist> delete under route-map\n\nConfederation\n\nUsed to reduce full-mesh BGP requirements by splitting one public AS into smaller sub-as\nSub-as use eBGP advertisement rules between each other, removing full mesh requirement\nNotable exception to eBGP behavior is that next-hop is not modified between confederation peers\nConfigured by using sub-as with router bgp command and using bgp confederation identifier <as> under router bgp\nOther sub-as defined with bgp confederation peers <sub-as> under router bgp\nCan be used in combination with route reflection\n\nNext-hop modification\n\nOther than next-hop-self, you can also manually define next-hop with a route-map:\n\n      route-map SET_NEXT_HOP_FROM_R8 permit 10\n      set ip next-hop 155.1.58.8\n      !\n      router bgp 100\n      neighbor 155.1.58.8 route-map SET_NEXT_HOP_FROM_R8 in\nBGP regexp ^f8087d\n\nCan be used to search for specifc AS-PATHs in table - for example: show ip bgp regexp ^$\nAbove will show prefixes originated locally with the AS. Cheat sheet here.\nCan be used to filter with ACLs with ip as-path: ip as-path access-list 1 permit _54$\nThen use match as-path under a route-map to apply modifications\n\nBGP backdoor\n\nCreated to prefer links via IGP over eBGP (raises AD of specific prefix to 200)\nConfigured with network <subnet> mask <netmask> backdoor under router BGP\n\nConditional Advertising\n\nAllows advertising based on existence of another prefix in table\nConfigured with neighbor <IP> advertise-map MAP1 [non-exist|exist-map] MAP2\nFirst map is prefix to advertise, second is prefix to monitor\nBGP checks on existence of MAP2 every 60 seconds\n\nConditional Route Injection\n\nFunctions similar to [[BGP#^66c6ab|unsuppress map]] in allowing specific prefix advertisement from aggregate\nDifference is it can be configured on routers not originating the aggregate route\nOne map matches aggregate and router originating summary, other map matches specific prefix to advertise\nConfiguration:\n\n      ip prefix-list INJECT_PREFIX permit 10.0.1.0/24\n      ip prefix-list AGGREGATE permit 10.0.0.0/22\n      ip prefix-list ROUTE_SOURCE permit 155.1.37.3/32\n      !\n      route-map INJECT_MAP permit 10\n       set ip address prefix-list INJECT_PREFIX\n       set origin igp\n      !\n      route-map EXIST_MAP permit 10\n       match ip address prefix-list AGGREGATE\n       match ip route-source prefix-list ROUTE_SOURCE\n      ! \n      router bgp 300\n       bgp inject-map INJECT_MAP exist-map EXIST_MAP\nRoute Filtering\n\nPreferably done per-neighbor with route-maps, but can be applied directly with prefix list or ACL\nneighbor 155.1.79.9 route-map FROM_R9 in for a route-map, with a deny in the route-map\nneighbor 192.10.1.254 prefix-list BLOCK_222 in for prefix-list\nneighbor 192.10.1.254 distribute-list BLOCK_222 in can be used for ACL filtering, not recommended\n\nMaximum prefix\n\nmaximum-prefix can be used to limit allowed prefix # from a peer\nBy default shuts down connection, can use warning-only or restart <minutes> prefixes if desired\nFor example: neighbor 155.1.108.10 maximum-prefix 20 80 restart 3\n\nBGP Dampening\n\nCan be used to prevent table instability from flapping routes\nAssigned to all prefixes with bgp dampening [<Half_Life> <ReuseLimit> <SuppressLimit> <MaximumSuppressTime>]\nCan also be assigned to specific prefixes with route-maps:\n\n      ip as-path access-list 100 permit _100$\n      !\n      route-map DAMPENING\n       match as-path 100\n       set dampening 4 750 2000 16\n      !\n      router bgp 200\n       bgp dampening route-map DAMPENING\nBGP Outbound Route Filtering\n\nAllows you to push a route filter to a remote neighbor\nBenefit is decrease in unnecessary route information as filtering occurs on neighbor before prefixes sent\nBoth peers must have orf capability enabled for it to function\nVerified locally with: show ip bgp neighbors <ip>, remotely with: show ip bgp neighbors <ip> received prefix-filter\n\n      ip prefix-list ORF deny 112.0.0.0/8\n      ip prefix-list ORF permit 0.0.0.0/0 le 32\n      !\n      router bgp 100\n       neighbor 155.1.45.5 capability orf prefix-list both\n       neighbor 155.1.45.5 prefix-list ORF in\nSee Redistribution for details on that\n\n\n\nUseful debugs\n\ndebug ip bgp\ndebug ip bgp updates"
  },
  {
    "objectID": "BackupBGP.html#bgp-attributes",
    "href": "BackupBGP.html#bgp-attributes",
    "title": "BackupBGP",
    "section": "BGP Attributes",
    "text": "BGP Attributes\n\nWeight\n\nOnly used on the router where it is configured\nUsed to affect outbound routing.\nHigher value is better - default is 0 (32768 if originated locally)\nHighest in BGP path selection algorithm\nCisco proprietary\nConfiguration:\n\n    route-map SET_WEIGHT\n     match ip address|ip as-path ...\n     set weight 100\n    !\n    router bgp 100\n     neighbor <ip> route-map SET_WEIGHT in\n\n\nLocal Preference\n\nLocally significant (to the AS), does not transit outside AS.\nUsed to affect outbound routing.\nHigher value is better - defaults to 100\nConfiguration:\n\n    route-map SET_LP\n     match ip address|ip as-path ...\n     set local-preference 1000\n     !\n    router bgp 100\n     neighbor <ip> route-map SET_LP in\n\n\nAS-PATH\n\nChanged for each AS prefix transits through\nUsed to affect inbound routing\nCan be used to influence path selection with as-path prepending\nCan be ignored with bgp bestpath as-path ignore - this is dangerous and not recommended\nCan be limited in length with bgp maxas-limit <#>\nConfiguration:\n\n    route-map PREPEND\n     match ip address|ip as-path ...\n     set as-path prepend 100 100 100\n        !\n    router bgp 100\n     neighbor <ip> route-map PREPEND out\n\n\nOrigin Code\n\nRarely used to influence path selection - inflexible\nIGP > EGP > Incomplete\nCould affect inbound or outbound routing\nConfiguration:\n\n    route-map ORIGIN\n     match ip address|ip as-path ...\n     set origin [igp|egp|incomplete]\n        \n    router bgp 100\n     neighbor <ip> route-map ORIGIN out\n\nMED\n\nBy default only compared when originating from same AS\nLowest is best - defaults to 0\nUsed to affect inbound routing\nCan use bgp always-compare-med under router BGP to allow comparison of MED between different ASs\nConfiguration:\n\n    route-map MED\n     match ip address|ip as-path ...\n     set metric 1000\n        \n    router bgp 100\n     neighbor <ip> route-map MED out"
  },
  {
    "objectID": "BackupIPsec.html",
    "href": "BackupIPsec.html",
    "title": "BackupIPSec",
    "section": "",
    "text": "Include:\n\nData origin authentication\n\nVerifying where packet came from\n\nData integity\n\nEnsuring packet wasn’t changed in transit\n\nConfidentiality\n\nEncryption, preventing packet from being intercepted and read\nPrevented by limited allowed window\n\nConfidentiality is the mainly thought-of core feature\n\nIPSec uses symmetric key encryption\nPoint-to-point tunnels in almost all cases, GETVPN can be P2MP\nTunnel keys dynamically negotiated through IKE\nIKEv2 is superior but not supported by all platforms"
  },
  {
    "objectID": "BackupIPsec.html#ipsec-phases",
    "href": "BackupIPsec.html#ipsec-phases",
    "title": "BackupIPSec",
    "section": "IPsec Phases",
    "text": "IPsec Phases\n\nTwo phases:\n\nPhase one establishes ISAKMP SA, secure tunnel to negotiate phase two through\nPhase two establishes IPsec SA, tunnel used to protect actual data traffic\nIn Phase 1:\n\nAuth usually either PSK (Pre-shared key) or certificate based\nDH1 used to exchange crypto keys\n\nHigher DH number is more secure\n\nEncryption algorithms used to protect traffic\n\nPossibilities include DES, 3DES, AES-128, AES-256, etc\n\nAuthentication hashes used to ensure packet wasn’t modified in transit\n\nIKEv1 supports MD5, SHA-1\n\nIKE parameters must match in order for phase 1 to complete successfully\nMain mode and aggressive mode both options for completing this step\n\nMain mode preferred as aggressive has security issues\n\n\nIn Phase 2, following are negotiated:\n\nSecurity protocol\n\nESP (Encapsulating Security Payload) or AH (Authentication Header)\nAH does not support encryption, rarely used\n\nEncapsulation modes\n\nTunnel or transport\nTunnel adds new IP header, used for actually tunneling traffic\nTransport mode used for host-to-host applications or combined with GRE which does the tunneling itself\n\nEncryption (used for actual data traffic, not just tunnel)\n\nDES, 3DES, AES-128, AES-256, etc\n\nAuthentication (hashing)\n\nMD5, SHA, etc\n\nCombination of the above called IPsec Transform Set\nOnly performed in QM (quick mode)\n\n\nUDP 500, 4500 are ports used to establish control plane\n\n4500 is only used with NAT-T2\n\nIPsec dataplane uses ports 50 (ESP), 51 (AH) or 4500 with NAT-T"
  },
  {
    "objectID": "BackupIPsec.html#useful-showdebug-commands",
    "href": "BackupIPsec.html#useful-showdebug-commands",
    "title": "BackupIPSec",
    "section": "Useful show/debug commands",
    "text": "Useful show/debug commands\n\nPhases:\n\nPhase 1:\n\nshow crypto isakmp sa - should show QM_IDLE as state and status as ACTIVE\ndebug crypto isakmp, or debug crypto condition peer ipv4 <IP> to debug for one specific peer\n\nPhase 2:\n\nshow crypto ipsec sa [<peer IP>]\ndebug crypto ipsec"
  },
  {
    "objectID": "BackupIPsec.html#crypto-profile-ipsec-config-w-ikev1-with-without-gre",
    "href": "BackupIPsec.html#crypto-profile-ipsec-config-w-ikev1-with-without-gre",
    "title": "BackupIPSec",
    "section": "Crypto Profile IPSec Config w/ IKEv1 (with & without GRE)",
    "text": "Crypto Profile IPSec Config w/ IKEv1 (with & without GRE)\n    interface Tunnel0  \n     ip address <ip & mask>\n     tunnel source <ip>\n     tunnel destination <ip>\n      \n    crypto isakmp policy 10\n     encryption aes 256\n     hash md5\n     authentication pre-share\n     group 14\n     lifetime 3600 \n    !\n    crypto isakmp key <PSK> address <remote outside interface IP with subnet mask>\n    !\n    crypto ipsec transform-set <ts-name> esp-3des esp-md5-hmac\n     mode transport\n     !mode tunnel if using VTI\n    \n    crypto ipsec profile <profile-name>\n     set transform-set <ts-name>\n      \n    interface Tunnel0\n     tunnel protection ipsec profile <profile-name>\n     ip mtu 1400\n     ip tcp adjust-mss 1360\n     !optionally can define tunnel mode as ipsec to bypass GRE and use VTI - 'tunnel mode ipsec ipv4'\n    \n    !note that routing through tunnel must exist for ipsec sa to form - routing not included in config\n    !can do underlay and overlay routing protocols, static routing, front door vrfs, many options"
  },
  {
    "objectID": "BackupIPsec.html#crypto-profile-ipsec-config-w-ikev2-with-without-gre",
    "href": "BackupIPsec.html#crypto-profile-ipsec-config-w-ikev2-with-without-gre",
    "title": "BackupIPSec",
    "section": "Crypto Profile IPSec Config w/ IKEv2 (with & without GRE)",
    "text": "Crypto Profile IPSec Config w/ IKEv2 (with & without GRE)\n    interface Tunnel0  \n     ip address <ip & mask>\n     tunnel source <ip>\n     tunnel destination <ip>\n      \n    crypto ikev2 keyring <keyring-name>\n     peer ANY\n     address 0.0.0.0 0.0.0.0 ! any host for DMVPN, specific host for site-to-site\n     pre-shared-key <psk>\n    !\n    crypto ikev2 profile <ike-prof-name>\n     match identity remote address 0.0.0.0 ! any host for DMVPN, specific host for site-to-site\n     authentication remote pre-share\n     authentication local pre-share\n     keyring local <keyring-name>\n    !\n    crypto ipsec transform-set <ts-name> esp-aes 256 esp-sha-hmac\n     mode transport\n     !mode tunnel if using VTI\n    !\n    crypto ipsec profile <profile-name>\n     set transform-set <ts-name>\n     set ikev2-profile <ike-prof-name>\n    !\n    interface Tunnel0\n     tunnel protection ipsec profile <profile-name>\n     !optionally can define tunnel mode as ipsec to bypass GRE and use VTI - 'tunnel mode ipsec ipv4'\n    \n    !note that routing through tunnel must exist for ipsec sa to form - routing not included in config\n    !can do underlay and overlay routing protocols, static routing, front door vrfs, many options"
  },
  {
    "objectID": "BackupIPsec.html#crypto-map-ipsec-config-w-ikev1-with-gre",
    "href": "BackupIPsec.html#crypto-map-ipsec-config-w-ikev1-with-gre",
    "title": "BackupIPSec",
    "section": "Crypto Map IPSec Config w/ IKEv1 (with GRE)",
    "text": "Crypto Map IPSec Config w/ IKEv1 (with GRE)\n    interface Tunnel0  \n    ip address <ip & mask>\n    tunnel source <ip>\n    tunnel destination <ip>\n    ip mtu 1400\n    ip tcp adjust-mss 1360\n      \n    crypto isakmp policy 10\n     encryption aes 256\n     hash md5\n     authentication pre-share\n     group 14\n     lifetime 180 \n    !\n    crypto isakmp key <PSK> address <remote outside interface IP with 32 bit subnet mask>\n    !\n    crypto ipsec transform-set <ts-name> esp-3des esp-md5-hmac\n        mode transport\n    !\n    access-list 120 permit gre host <local outside interface ip> host <remote outside interface IP>\n      \n    crypto map <cm-name> 10 ipsec-isakmp   \n    set peer <ip>\n    set transform-set <ts-name> \n    match address 120  \n      \n    interface Ethernet0/0   \n    crypto map <cm-name>\n\nSee DMVPN page for details on DMVPN IPsec config"
  },
  {
    "objectID": "Netflow.html",
    "href": "Netflow.html",
    "title": "Netflow",
    "section": "",
    "text": "General Notes\n\nUsed to sample and observe network flow information\nTypically exported to a netflow collector which will display the information graphically with reports\nFlexible netflow\n\nUsed to allow more customization of the traffic parameters to be captured\nConsists of records, exporters, samplers and monitors\nRecords\n\nDefine what parameters will be captured by netflow\nCan use pre-defined records or define your own\n\nExporters\n\nUsed to set up exportation of the netflow information to the flow collector\n\nSamplers\n\nUsed to limit the number of monitored packets if desired for performance reasons\n\nMonitors\n\nUsed to apply netflow records to desired interfaces\nReferences specific flow record and flow exporter\n\n\n\n\n\n\nUseful show commands\n\nshow ip cache flow - Shows netflow information locally\nshow ip flow interface - Shows interfaces participating in netflow\nshow ip flow export - Shows information on exported flows\nshow flow record - Displays basic information about each flow record (flexible netflow)\nshow flow monitor - Displays basic information about each flow monitor (flexible netflow)\nshow flow exporter - Displays basic information about each flow exporter (flexible netflow)\n\n\n\n\nConfig\n\nBasic Netflow Configuration\nint fa 0/0\n ip flow [ingress|egress]\n exit\nip flow-export source lo 0\nip flow-export version [5|9]\nip flow-export destination <collector-ip> 5000\n\n\nFlexible Netflow Configuration\nflow exporter EXPORTER\n destination <Collector-IP>\n export-protocol netflow-v9\n source Vlan100\n transport udp 2055\n!\nflow record RECORD\n match ipv4 tos\n match ipv4 protocol\n match ipv4 source address\n match ipv4 destination address\n match transport source-port\n match transport destination-port\n match interface input\n collect interface output\n collect counter bytes\n collect counter packets\n!\nflow monitor IPv4_NETFLOW\n record RECORD\n exporter EXPORTER\n cache timeout active 60\n!\ninterface fa0/0\n ip flow monitor IPv4_NETFLOW input"
  },
  {
    "objectID": "CoPP.html",
    "href": "CoPP.html",
    "title": "CoPP",
    "section": "",
    "text": "General Notes\n\nStands for Control Plane Policing\nUsed to protect the control plane of network equipment from being saturated with less preferred traffic, DOS attempts, etc\nPolicy-maps function in top-down fashion like ACLs\nclass-default will match all traffic not matched earlier in a policy-map\nMatch any vs Match all\n\nUsed in class-maps, behavior differenet when matching multiple access groups\nMatch any functions as boolean OR, match all functions as boolean AND\n\n\n\n\n\nUseful show commands\n\nshow policy-map control-plane input - Verify number of packets hitting COPP policy\n\n\n\n\nStandard CoPP Config\n! Identify traffic with ACLs\n!\nip access-list extended COPP-ICMP-ACL-EXAMPLE\n permit udp any any range 33434 33463 ttl eq 1\n permit icmp any any unreachable\n permit icmp any any echo\n permit icmp any any echo-reply\n permit icmp any any ttl-exceeded\n exit\nip access-list extended COPP-MGMT-TRAFFIC-ACL-EXAMPLE\n permit udp any eq ntp any\n permit udp any any eq snmp\n permit tcp any any eq 22\n permit tcp any eq 22 any established\n permit tcp any any eq 23\n exit\nip access-list extended COPP-ROUTING-PROTOCOLS-ACL-EXAMPLE\n permit tcp any eq bgp any established\n permit eigrp any host 224.0.0.10\n permit ospf any host 224.0.0.5\n permit ospf any host 224.0.0.6\n permit pim any host 224.0.0.13\n permit igmp any any\n!\n! Create class maps to define traffic classes\n!\nclass-map match-all COPP-ICMP-CLASSMAP-EXAMPLE\n match access-group name COPP-ICMP-ACL-EXAMPLE\nclass-map match-all COPP-MGMT-TRAFFIC-CLASSMAP-EXAMPLE\n match access-group name COPP-MGMT-TRAFFIC-ACL-EXAMPLE\nclass-map match-all COPP-ROUTING-PROTOCOLS-CLASSMAP-EXAMPLE\n match access-group name COPP-ROUTING-PROTOCOLS-ACL-EXAMPLE\n!\n! Create policy map to define service policy\n!\npolicy-map COPP-POLICYMAP-EXAMPLE\n class COPP-MGMT-TRAFFIC-CLASSMAP-EXAMPLE\n  police 32000 conform-action transmit exceed-action transmit violate-action transmit\n class COPP-ROUTING-PROTOCOLS-CLASSMAP-EXAMPLE\n  police 34000 conform-action transmit exceed-action transmit violate-action transmit\n class COPP-ICMP-CLASSMAP-EXAMPLE\n  police 8000 conform-action transmit exceed-action transmit violate-action drop\n!\n! Apply policy to control plane\n!\ncontrol-plane\n service-policy input COPP-POLICYMAP-EXAMPLE"
  },
  {
    "objectID": "DHCP.html",
    "href": "DHCP.html",
    "title": "DHCP",
    "section": "",
    "text": "General Notes\n\nUsed to assign IP addresses to hosts without requiring static assignments locally\nCan operate outside of subnet with ip helper-address on interface to forward DHCP requests to the server\n\nThis also exists in v6 as ipv6 dhcp relay destination <v6-IP>\n\nWith IPv6, both stateful and stateless DHCP exist\n\nStateful advertises IPv6 addresses, prefixes, gateways etc like a typical DHCP server in v4\nStateless allows hosts to configure their own address, gateway etc locally with SLAAC and only advertises other information such as DNS, TFTP server, etc\nStateless DHCP is configured with ipv6 nd other-config-flag under interface on segment that will advertise the information\n\nDORA\n\nDiscover - Broadcast by client discover DHCP server on segment using port 67\nOffer - Server responds offering IP, SN Mask, gateway, DNS using port 68\nRequest - Client requests to use offered information\nAcknowledge - Server acknowledges and agrees, records information\n\nSARR - IPv6 DORA equivalent\n\nSolicit - Client sends v6 DHCP request to all-DHCPv6-server solicit node multicast address FF02::1:2\nAdvertise - Server responds with unicast ADVERTISE message to client\nRequest - Client requests to use offered information\nReply - Server acknowledges and agrees, records information (if stateful)\n\n\n\n\n\nUseful show commands/debugs\n\nshow ip dhcp binding - When using a local DHCP server on a router, see DHCP binding info\nshow ip dhcp conflict - Show any IPs conflicting with DHCP\ndebug ip dhcp server packet - See DHCP traffic in flow\nshow ipv6 dhcp binding - Same but for v6\nshow ipv6 dhcp interface - Show interfaces advertising v6 address information\n\n\n\n\nStandard DHCP Config\nIPV4\nip dhcp excluded-address 10.8.8.1 10.8.8.10\n!\nip dhcp pool POOL-A\nnetwork 10.8.8.0 255.255.255.0\ndefault-router 10.8.8.1\ndns-server 192.168.1.1\nIPv6\nipv6 dhcp pool DHCPV6POOL\naddress prefix 2001:DB8:A:A::/64\ndns-server 2001:DB8:B:B::1\ndomain-name cisco.com\n!\ninterface GigabitEthernet0/0\nipv6 dhcp server DHCPV6POOL ! required to advertise IPs in v6 unlike v4"
  },
  {
    "objectID": "EIGRP.html",
    "href": "EIGRP.html",
    "title": "EIGRP",
    "section": "",
    "text": "General Notes\n\nAD 90 internal, 170 external\nMulticast 224.0.0.10 standard for hellos, port number 88\nUses DUAL (Diffusing Update Algorithm)\nK values (metric parameters) must match for neighbor relationship to form\n\nK values set with the metric weights command - should be left default\nBy default uses bandwidth (slowest in path) & delay (cumulative) to compose metric\n\nOnly advertises best routes, all others not advertised\nHello and hold timers do not need to match for adjacency (unlike OSPF)\nCan manually define neighbors (like in BGP) to send hellos unicast instead of multicast\nSuccessor route - best path\nSuccessor - First next-hop along successor route\nConfig can be performed classic (route eigrp 100) or named (router eigrp <name>) modes\n\nCan convert to named mode with eigrp upgrade-cli, hitless conversion\n\nOnly IGP that can do unequal cost load-balancing\n\nAll routes must meet feasibility condition\nCandidacy for routes can be modified with variance command\n\nFeasibility condition:\n\nReported distance (RD - neighbor’s distance to node) must be shorter than feasible distance (FD - distance locally) to prevent loops\nIf conditions passed, route is considered feasible successor and included in EIGRP topology table for fast failover in reconvergence event\n\nWhen using named-mode in IPv6, all interfaces automatically advertised into EIGRP when address-family initiated\n\nCan be shut down individually or under af-interface default with shutdown, then no shutdown under interfaces you want advertised\n\n\n\n\n\nFeatures\n\nAuthentication\n\nSupports both MD5 & SHA-256 auth (named) or just MD5 (classic)\nMD5 configuration done with key chain in global config\nKey-id numbers must match for successful auth\nApplied under physical interfaces in classic mode or af-interfaces in named mode\n\nkey chain MD5_KEYS\n key 1\n  key-string MD5_PASS\n!\nrouter eigrp MULTI-AF\n !\n address-family ipv4 unicast autonomous-system 100\n  !\n  af-interface default\n   authentication mode hmac-sha-256 SHA_DEFAULT\n  exit-af-interface\n  !\n  af-interface GigabitEthernet1.58\n   authentication mode md5\n   authentication key-chain MD5_KEYS\n  exit-af-interface\n\n\nSummarization\n\nPossible anywhere in topology\nConfigured with summary-address <network> <mask> under af-interface in named mode, under physical interface in classic mode\nLeak map can be used to leak longer mask prefixes included in summary\n\nsummary-address 0.0.0.0 0.0.0.0 leak-map <route-map>\n\nNull0 installed on router to match summary address to prevent loops\nCan define metric on summary-address with the summary-metric command under topology base\n\n\n\nRoute filtering\n\nPossible anywhere in topology\nCommonly performed with distribute-list prefix <prefix-list> <in/out> <interface>\nCan also use route-maps to match on tags, metric\n\nFor example:\n\nroute-map FILTER_ON_TAGS deny 10\n match tag 4\n!\nroute-map FILTER_ON_TAGS permit 20\n!\nrouter eigrp 100\n distribute-list route-map FILTER_ON_TAGS in\n\n\n\nSplit horizon\n\nPrevents advertisements of prefixes out same interface they’re received\nUsed for loop prevention (along with feasibility condition, router-id)\nCan turn off (useful for hub & spoke) with no ip split-horizon eigrp <AS>\n\n\n\nDefault routing\n\nCan be advertised with quad 0 summary route under interface\nCan also be redistributed from static route\n\n\n\nStub\n\nPrevents advertisment of anything other than connected routes by default\nPrevents site from being used for transit\nBreaks query domain\nBest used when sites have no downstream neighbors\nCan use leak-maps to advertise normally suppressed routes\n\n\n\nStub-site\n\nAllows advertisement of routes learned on LAN but not WAN interfaces\nLimits EIGRP query-domain and prevents site from being used for transit\nEnabled with eigrp stub-site\n\nMutually exclusive with eigrp stub\n\nInterfaces towards hub/WAN identified with stub-site wan-interface under af-interface\n\n\n\nOffset-lists\n\nCan be used to increase metric for a specific route/interface\nConfigured under topology base with:\n\noffset-list <access-list> in <metric> <interface>\n\nSee Redistribution page for details on that\n\n\n\n\n\nUseful debug/show commands\n\nshow ip eigrp interface brief - Displays interfaces participating in EIGRP, RTT, pending routes, etc\nshow ip eigrp neighbors - Displays neighbors and neighbor states\nshow ip eigrp topology all-links - Displays EIGRP topology table, successors, feasible successors\nshow ip protocols - Shows various information about active routing protocols\ndebug eigrp packet - Debugs basically everything EIGRP\naccess-list 111 permit eigrp any any, followed by debug ip packet detail 111 - for packet debugging\n\n\n\n\nStandard EIGRP Config\nrouter eigrp NAME\n !\n address-family ipv4 unicast autonomous-system 100\n  !\n  af-interface default\n   passive-interface\n  exit-af-interface\n  !\n  af-interface GigabitEthernet0/1\n   no passive-interface\n  exit-af-interface\n  !\n  topology base\n  exit-af-topology\n  network 10.1.1.2 255.255.255.255\n  eigrp router-id 150.1.5.5\n exit-address-family"
  },
  {
    "objectID": "IP SLA & Tracking.html",
    "href": "IP SLA & Tracking.html",
    "title": "IP SLA & Tracking",
    "section": "",
    "text": "General Notes\n\nAllows monitoring of network performance and network availability testing with probes\nTrack objects allow you to dynamically control things like static routes, FHRP priorities, etc\nPossibilities for object tracking include:\n\nIP SLA instances\nInterface status\nGroups of objects\n\n\n\n\n\nUseful show commands\n\nshow ip sla configuration - Shows configuration for all IP SLAs set up on device\nshow ip sla statistics - Shows statistics for all IP SLAs set up on device\nshow track - Shows configuration and status of tracking object\n\n\n\n\nStandard IP SLA w/ track for HSRP Config\n! Tracking line protocols of WAN interfaces\ntrack 11 interface GigabitEthernet8 line-protocol\ntrack 12 interface FastEthernet0 line-protocol\n! Tracking ip routing status of tunnel interfaces for backup route\ntrack 21 interface Tunnel1 ip routing\ntrack 22 interface Tunnel2 ip routing\n! Track 23 will be up if both tunnels are not routing - set up for backup route to be installed\ntrack 23 list boolean and\n object 21 not\n object 22 not\n! Tracking for IP SLA 101\ntrack 100 ip sla 101 reachability\n delay down 15 up 60\n! Decrementing HSRP based on IP SLA and line protocols of WAN interfaces\nint vlan 100\n standby 1 track 11 decrement 10\n standby 1 track 12 decrement 10\n standby 1 track 100 decrement 10\n! Routing management traffic to secondary router if neither tunnel is routing\nip route 10.100.100.0 255.255.255.0 10.1.174.253 track 23\n! Testing reachability over DMVPN overlay and starting SLA\nip sla 101\n icmp-echo 172.16.1.254 source-interface Tunnel1\n request-data-size 100\n frequency 5\nip sla schedule 101 life forever start-time now"
  },
  {
    "objectID": "IPsec & GRE VPN.html",
    "href": "IPsec & GRE VPN.html",
    "title": "IPsec & GRE VPN",
    "section": "",
    "text": "General Notes\n\nGRE\n\nStands for Generic Route Encapsulation\nTunneling method that can tunnel many different protocols inside GRE header\nUsed as default encapsulation method for Cisco tunnel interfaces\nIP protocol type 47 used in IP header\n\nSecurity features of IPSec\n\nData origin authentication\n\nVerifying where packet came from\n\nData integrity\n\nEnsuring packet wasn’t changed in transit\n\nConfidentiality\n\nEncryption, preventing packet from being intercepted and read\nPrevented by limited allowed window\n\nConfidentiality is the mainly thought-of core feature\n\nIPSec uses symmetric key encryption\nPoint-to-point tunnels in almost all cases, GETVPN can be P2MP\nTunnel keys dynamically negotiated through IKE\nIKEv2 is superior but not supported by all platforms\n\n\nPhases\n\nPhase one establishes ISAKMP SA, secure tunnel to negotiate phase two through\nPhase two establishes IPsec SA, tunnel used to protect actual data traffic\nIn Phase 1:\n\nAuthentication either PSK (Pre-shared key) or certificate based\nDH1 used to exchange crypto keys\n\nHigher DH group number is more secure\n\nEncryption algorithms used to protect traffic\n\nPossibilities include DES, 3DES, AES-128, AES-256, etc\n\nHash algorithm used to ensure packet wasn’t modified in transit\n\nIKEv1 supports MD5, SHA-1\n\nTunnel lifetime is negotiated\nIKE parameters must match in order for phase 1 to complete successfully\nMain mode and aggressive mode both options for completing this step\n\nMain mode preferred as aggressive has security issues\n\n\nIn Phase 2, following are negotiated:\n\nSecurity protocol\n\nESP (Encapsulating Security Payload) or AH (Authentication Header)\nAH does not support encryption, rarely used\n\nEncapsulation modes\n\nTunnel or transport\nTunnel adds new IP header, used for actually tunneling traffic\nTransport mode used for host-to-host applications or combined with GRE which does the tunneling itself\n\nEncryption (used for actual data traffic, not just tunnel)\n\nDES, 3DES, AES-128, AES-256, etc\n\nAuthentication (hashing)\n\nMD5, SHA, etc\n\nCombination of the above called IPsec Transform Set\nOnly performed in QM (quick mode)\n\nUDP 500 (ISAKMP), 4500 (NAT-T) are ports used to establish control plane\n\n4500 is only used with NAT-T2\n\nIPsec data plane uses IP protocol 50 (ESP), 51 (AH) in the IP header\n\n\n\n\n\nUseful show/debug commands\n\nPhase 1:\n\nshow crypto isakmp sa - should show QM_IDLE as state and status as ACTIVE\ndebug crypto isakmp, or debug crypto condition peer ipv4 <IP> to debug for one specific peer\n\nPhase 2:\n\nshow crypto ipsec sa [<peer IP>]\ndebug crypto ipsec\n\n\n\n\n\nConfig\n\nCrypto Profile IPSec Config w/ IKEv1 (with & without GRE)\ninterface Tunnel0  \n ip address <ip & mask>\n tunnel source <ip>\n tunnel destination <ip>\n   \ncrypto isakmp policy 10\n encryption aes 256\n hash md5\n authentication pre-share\n group 14\n lifetime 3600 \n !\ncrypto isakmp key <PSK> address <remote outside interface IP with subnet mask>\n !\ncrypto ipsec transform-set <ts-name> esp-3des esp-md5-hmac\n mode transport\n!mode tunnel if using VTI\n\ncrypto ipsec profile <profile-name>\n set transform-set <ts-name>\n   \ninterface Tunnel0\n tunnel protection ipsec profile <profile-name>\n ip mtu 1400\n ip tcp adjust-mss 1360\n!optionally can define tunnel mode as ipsec to bypass GRE and use VTI - 'tunnel mode ipsec ipv4'\n!note that routing through tunnel must exist for ipsec sa to form - routing not included in config\n!can do underlay and overlay routing protocols, static routing, front door vrfs, many options\n\n\nCrypto Profile IPSec Config w/ IKEv2 (with & without GRE)\ninterface Tunnel0  \n ip address <ip & mask>\n tunnel source <ip>\n tunnel destination <ip>\n    \ncrypto ikev2 keyring <keyring-name>\n peer ANY\n address 0.0.0.0 0.0.0.0 ! any host for DMVPN, specific host for site-to-site\n pre-shared-key <psk>\n!\ncrypto ikev2 profile <ike-prof-name>\n match identity remote address 0.0.0.0 ! any host for DMVPN, specific host for site-to-site\n authentication remote pre-share\n authentication local pre-share\n keyring local <keyring-name>\n!\ncrypto ipsec transform-set <ts-name> esp-aes 256 esp-sha-hmac\n mode transport\n !mode tunnel if using VTI\n!\ncrypto ipsec profile <profile-name>\n set transform-set <ts-name>\n set ikev2-profile <ike-prof-name>\n!\ninterface Tunnel0\n tunnel protection ipsec profile <profile-name>\n !optionally can define tunnel mode as ipsec to bypass GRE and use VTI - 'tunnel mode ipsec ipv4'\n\n!note that routing through tunnel must exist for ipsec sa to form - routing not included in config\n!can do underlay and overlay routing protocols, static routing, front door vrfs, many options\n\n\nCrypto Map IPSec Config w/ IKEv1 (with GRE)\ninterface Tunnel0  \n ip address <ip & mask>\n tunnel source <ip>\n tunnel destination <ip>\n ip mtu 1400\n ip tcp adjust-mss 1360\n   \ncrypto isakmp policy 10\n encryption aes 256\n hash md5\n authentication pre-share\n group 14\n lifetime 180 \n !\ncrypto isakmp key <PSK> address <remote outside interface IP with 32 bit subnet mask>\n !\ncrypto ipsec transform-set <ts-name> esp-3des esp-md5-hmac\n mode transport\n !\naccess-list 120 permit gre host <local outside interface ip> host <remote outside interface IP>\n   \ncrypto map <cm-name> 10 ipsec-isakmp   \n set peer <ip>\n set transform-set <ts-name> \n match address 120  \n   \ninterface Ethernet0/0   \n crypto map <cm-name>\n\n\nSee DMVPN page for details on DMVPN IPsec config\n\n\n\n\n\n\nFootnotes\n\n\nDiffie Hellman - asymmetric key algorithm used for IPsec, SSL, SSH and others. Peers create public and private keys, exchange public key and generate symmetric key (shared secret) with their own private key and peer’s public key[[DH.png|See Example]]↩︎\nNAT-Traversal add an additional UDP header which encapsulates the IPsec ESP header. Since this header is not encrypted it allows NAT without breaking packet integrity requirements of IPsec [[NAT-T.png|See Example]]↩︎"
  },
  {
    "objectID": "IPv6 First Hop Security.html",
    "href": "IPv6 First Hop Security.html",
    "title": "IPv6 First Hop Security",
    "section": "",
    "text": "General Notes\n\nFeatures to increase IPv6 layer 2 security, typically applied on switches\nNo broadcasts, but certain packets almost always flooded in IPv6 networks\n\nFF02::1 (All IPv6 hosts)\nFF02::2 (All IPv6 routers)\n\nFirst-hop security features assist in preventing exploits around common multicast addresses used by NDP, DHCPv6\n\n\n\n\nFeatures\n\nRA Guard\n\nAnalyzes RAs and filters traffic from unauthorized devices\nDoes not rely on binding table\nConfigured with ipv6 nd raguard attach-policy [policy-name] under interface\n\nDHCP v6 Guard\n\nBasically DHCP snooping in IPv6\nDoes not rely on binding table\nConfigured with ipv6 dhcp guard attach-policy [policy-name] under interface\n\nIPv6 Snooping\n\nRequired for following features that rely on the IPv6 binding table\nGlean populates bind table without verifying messages\nInspect gleans addresses and validates messages\nGuard gleans and inspects messages, drops RA and DHCP messages by default\nConfigured like:\n\nipv6 snooping policy <name>\n security-level [glean|inspect|guard]\n!\nint gi0/1\n ipv6 snooping attach-policy <name>\nND inspection\n\nInspects neighbor discovery messages and drops messages from hosts that already exist in the bind table but on different hardware addresses, preventing address spoofing\nRelies on IPv6 snooping\nConfigured with ipv6 nd inspection under interfaces\n\nSource/Prefix Guard\n\nBlocks traffic that does not come from an IPv6 address already known in the binding table\nRelies on IPv6 snooping\nConfigured with ipv6 source-guard under interfaces\n\n\n\n\n\nUseful show commands\n\nshow ipv6 nd raguard policy - Shows RA Guard details\nshow ipv6 dhcp guard policy - Shows DHCP v6 details\nshow ipv6 neighbors binding - Shows IPv6 bind table\n\n\n\n\nConfig\n\nStandard RA Guard Config\nipv6 nd raguard policy <policy-name>\n device-role host\n!\nint gi0/0\n ipv6 nd raguard attach-policy <policy-name>\n!\n!This will block all RAs on this port\n\n\nStandard DHCP v6 Guard Config\nipv6 dhcp guard policy DHCP_SERVER\n device-role server\nipv6 dhcp guard policy DHCP_CLIENT\n device-role client\n!\ninterface GigabitEthernet 0/1\n ipv6 dhcp guard attach-policy DHCP_SERVER\ninterface range GigabitEthernet 0/2 - 3\n ipv6 dhcp guard attach-policy DHCP_CLIENT\n!\n!This will only allow DHCP offers from the server ports"
  },
  {
    "objectID": "MPLS.html",
    "href": "MPLS.html",
    "title": "MPLS",
    "section": "",
    "text": "General Notes\n\nUses shim headers inserted between IP and MAC headers to switch packets - labels\nAllows for BGP-free core in SP network where connectivity between BGP nodes is achieved by label switching\nMPLS labels switched hop by hop (think ethernet, not IP)\nLDP - Label Distribution Protocol used for MPLS operation\n\nUses all-routers multicast (224.0.0.2), TCP port 646 src and dst for Hellos, unicast to neighbors once TCP session established\nUDP also used for initial discovery messages\nLDP requires CEF in order to exchange labels\nOnly IGP-learned or local routes are labelled, BGP routes not assigned a label\n\nPHP\n\nPenultimate Hop Popping - popping MPLS label on second to last router to avoid unnecessary overhead (processing shim header & IP)\nIn order to facilitate this, LDP routers advertise routes they own with an implicit null/POP label (label value of 3) that tells neighbors to pop LDP labels before sending for these routes\n\nLIB - Label Information Base - functions like L3 RIB\nLFIB - Label Forward Information Base - functions like L3 FIB\nLSR - Label Switched Router - any router that participates in MPLS\nLSP - Label Switched Path - path through LSRs labelled packet takes throughout MPLS domain\nMP-BGP (VPNv4) used with VRFs and LDP to form MPLS L3VPNs\nRSVP - Resource Reservation Protocol - used for traffic engineering\nMPLS packet format\n\nProtocol identifier (PID) in layer-2 frame specifies that an MPLS packet will follow\nBottom-of-stack bit in shim header indicates whether additional labels follow\nNesting of LDP labels used for MPLS VPN, MPLS TE (Traffic Engineering)\n\nRDs and RTs explained here\n\n\n\n\nMPLS L3VPN\n\nHigh level steps\n\nEstablish LSP between PEs using an IGP and LDP\nExchange routes with customer between PE-CE using IGP or BGP\nExchange customer routes between PEs with iBGP and an MPLS VPN label using VPNv4 AF (address family)\nLabel switch between the PE routers using LDP transport label\n\nMPLS L3VPN details\n\nUses MP-BGP between PE (provider edge) routers which tag packets with VPNv4 address\nUses VRFs to peer with customers over BGP or IGP\nIf using IGP instead of BGP for CE peering, must redistribute into BGP VPNv4 AF\nVPNv4 address family in iBGP used to form neighborships and share VPNv4 routes\nVPNv4 neighbor relationships must be formed from a loopback with a /32 mask\nnext-hop-self not required when running VPNv4 address family, does it for you automatically\nCombination of RD (route distinguisher) and IPv4 address makes up VPNv4 address\nVPNv4 address only used by MP-BGP, transparent to P routers in core\nPE routers tag traffic with two MPLS labels, inner VPN label defining customer and outer LDP label used for label switching\nP (provider) routers perform label switching along LSP but do not require MP-BGP, do not read VPN labels, only read outer LDP label\nCE (customer edge) routers - do not see MPLS labels, connect to PE routers\nRoute reflectors function in the exact same way, still needed for iBGP peering using VPNv4 if not running a full mesh topology\nIn order to load balance when using RRs in L3VPN, both routes to the same destination must be using different RDs, otherwise only one best path is chosen\nWhen running L3VPN via OSPF & CE router is using a VRF with OSPF, capability vrf-lite must be entered under router OSPF process or routes will not be installed by OSPF - this is because they have a special ‘downward’ bit flagged when transiting L3VPN that disallows them to be installed to vrf-aware OSPF to prevent loops in VPNv4 backbone\n\nOSPF Domain-ID\n\nOSPF routes redistributed from VRF into VPNv4 BGP will show up as inter-area routes when learned by peers - by default BGP redistributed routes would show up as E2\nHowever, the above is only true if your OSPF process id (router ospf <x>) matches or you manually set the domain-ID\nDomain-ID set with domain-id <x> under router ospf\nWith domain-ID not matching, OSPF routes will show up as E2\nCan be used for traffic engineering if CE is peering with multiple PEs, as OSPF will always prefer IA routes over E2 routes\n\nOSPF Sham Link\n\nUsed to allow OSPF routes across L3VPN to show up as intra-area instead of inter-area\nUsed in scenarios where CE has a backdoor route to another network connected to the MPLS & MPLS should be preferred\nConfigured by creating a /32 loopback route on both PEs, advertising this into BGP within the VRF (NOT VPNv4) and using the area 1 sham-link <SRC><DST> cost X command under OSPF\nThe loopbacks used for the sham link must not be advertised into the OSPF process\n\n\n\n\n\nUseful show commands/debugs\n\nshow mpls interfaces - shows interfaces participating in LDP\nshow mpls ldp neighbor - shows LDP neighbors\nshow mpls ldp binding - shows LDP label bindings to prefixes\nshow mpls forwarding-table - shows LFIB\nshow bgp vpnv4 unicast all - checking that VPNv4 routes being sent/received\ndebug mpls ldp transport events - self-explanatory\ndebug bgp vpnv4 unicast updates - useful for troubleshooting VPNv4 issues\n\n\n\n\nConfig\n\nStandard MPLS Config\nrouter ospf 1\n mpls ldp autoconfig\n\n\nExtended MPLS Config\nmpls ldp router-id Loopback0 force\n!\nint gi0/1\nmpls ip\nmpls ldp discovery transport-address interface\n!\nmpls ldp password required\nmpls ldp neighbor 150.1.5.5 password CISCO\nmpls ldp neighbor 150.1.6.6 password CISCO\n!\naccess-list 10 permit 150.1.0.0 0.0.255.255\n!\nno mpls ldp advertise-labels\nmpls ldp advertise-labels for 10\n\n\nStandard L3VPN MPLS Config (PE config, OSPF to CE)\nip vrf VPN_A\n rd 1:1\n route-target export 1:1\n route-target import 1:1\n\ninterface Loopback0\n ip address 150.1.7.7 255.255.255.255\n!\n!\ninterface GigabitEthernet0/2\n ip vrf forwarding VPN_A\n ip address 155.1.79.7 255.255.255.0\n!\nrouter ospf 10 vrf VPN_A\n redistribute bgp 100 subnets\n network 0.0.0.0 255.255.255.255 area 0\n!\nrouter ospf 1\n mpls ldp autoconfig\n router-id 150.1.7.7\n network 0.0.0.0 255.255.255.255 area 0\n!\nrouter bgp 100\n bgp log-neighbor-changes\n no bgp default ipv4-unicast\n neighbor 150.1.5.5 remote-as 100\n neighbor 150.1.5.5 update-source Loopback0\n !\n address-family vpnv4\n  neighbor 150.1.5.5 activate\n  neighbor 150.1.5.5 send-community extended\n exit-address-family\n !\n address-family ipv4 vrf VPN_A\n  redistribute ospf 10\n exit-address-family\n\n\nL3VPN Internet Access Config\ninterface GigabitEthernet0/0\ndescription INTERNET_EXAMPLE\n ip address 10.0.0.1 255.255.255.252\n!\nip route vrf VPN_A 0.0.0.0 0.0.0.0 GigabitEthernet 0/0 10.0.0.2 global\nip route 0.0.0.0 0.0.0.0 GigabitEthernet 0/0 10.0.0.2\n!\nrouter bgp 100\naddress-family ipv4 vrf VPN_A\n default-information originate\n redistribute static\n!\nrouter ospf 10 vrf VPN_A\n default-information originate\n!\ninterface GigabitEthernet0/0\n ip nat outside\n!\ninterface GigabitEthernet0/1\n ip nat inside\n!\ninterface GigabitEthernet0/2\n ip nat inside\n!\nip access-list standard VPN_LOOPBACKS\n permit 150.1.0.0 0.0.255.255\n!\nip nat inside source list VPN_LOOPBACKS interface GigabitEthernet0/0 vrf VPN_A overload\n\n\nMPLS Config Explanation\n\nmpls ip - used to enable LDP on an interface or globally on the router\nmpls ldp router-id Loopback0 force - used to force the router-id used for LDP\nrouter ospf 1; mpls ldp autoconfig - used to automatically enable LDP on OSPF interfaces\nmpls ldp discovery transport-address interface - used to enable TCP connection over the physical interface IP instead of router-id\nmpls ldp neighbor <IP> password <password>; mpls ldp password required - configuring a password and making the password a requirement\nno mpls ldp advertise-labels; mpls ldp advertise-labels for 10 - only allow labels to be generated for a specific ACL (10 in this case)"
  },
  {
    "objectID": "OSPF.html",
    "href": "OSPF.html",
    "title": "OSPF",
    "section": "",
    "text": "General Notes\n\nAD 110 for internal & external\nMulticast 224.0.0.5 for all OSPF routers, 224.0.0.6 for all DR/BDRs, port number 89\nAdvertises all routes to all nodes in area to build a topology before deciding best path\nHello and hold timers must match for adjacency (unlike EIGRP)\nAdjacency formed, DBD (database descriptor) packet sent describing LSDB (link-state database)\n\nOnce other neighbor determines which LSAs they’re missing, LSR (link-state request) packet sent to ask for missing LSAs and sync database\nAll OSPF routers in an area must share a common view of the database for OSPF to function\n\nDR/BDR Election\n\nNo real prepending - the only way to ensure a node does not become DR is by removing it from the election\nThis is done with ip ospf priority 0 under the interface you don’t want to become DR/BDR\n\nOSPF LSA Types\n\nType 1 - Router LSA\n\nGenerated by all OSPF routers, advertised intra-area, describes routers’ own interfaces, neighbors\n\nType 2 - Network LSA\n\nGenerated by DRs, advertised intra-area, describes routers on its segment\n\nType 3 - Summary LSA\n\nGenerated by ABRs, advertised inter-area to describe reachable networks to another area\n\nType 4 - ASBR Summary LSA\n\nGenerated by ABRs, adverised inter-area to describe how to reach an ASBR advertising external networks\n\nType 5 - External Summary LSA\n\nGenerated by ASBRs, advertised inter-area to describe external routes\n\nType 7 - NSSA External Summary LSA\n\nSame as above but generated in a NSSA where Type 5 LSAs are not allowed, reflooded as a Type 5 LSA if recieved by an ABR\n\n\nUse show ip ospf border-routers to see both ABRs, ASBRs in the OSPF process\nFor point-to-point links, add ip ospf network point-to-point under interface to save overhead on DR/BDR election\n\nNull output after the slash in State column of show ip ospf neighbor indicates point-to-point link\n\nLoopbacks automatically advertised as /32s regardless of subnet mask\n\nCan make the loopback point-to-point to advertise the full subnet\n\nBy default all links greater than 100Mbps will have the same reference cost\n\nTo change this, change reference bandwidth under router ospf config with auto-cost reference bandwidth <value>\nThis should match on all devices in topology to prevent loops, but is not required for adjacency\n\nMetric can be modified directly with cost on interface (ip ospf cost <cost>), or indirectly by changing interface bandwidth\nCost can also be configured per-neighbor under router ospf with neighbor <ip> cost <cost>\nTo form a neighborship, area, SN mask, stub flag, authentication and hello/dead timers must match\nNeighborships in a good state in 2-way for drothers on broadcast segments or Full for all other links\n\nAll other states indicate an issue if they persist\nStuck in ExStart, Exchange states usually indicates an MTU issue\n\n\n\n\n\nFeatures\n\nAuthentication\n\nSupports plaintext (pointless), MD5 & HMAC-SHA auth\nHMAC-SHA configuration done with key chain in global config\nMD5 configuration done under interface or for an entire area under router ospf\nKey-id numbers must match for successful auth\n\nkey chain OSPF_KEYS\n key 1\n  key-string <psk>\n  cryptographic-algorithm hmac-sha-256\n!\nint gi0/0\nip ospf authentication message-digest\nip ospf message-digest-key 1 md5 <psk>\n!\nint gi0/1\nip ospf authentication key-chain OSPF_KEYS\n\n\nSummarization\n\nPossible only at ABRs, ASBRs\nTo summarize LSA 3 as originated by ABR, use area <area#> range <ip & mask>\n\nThe area used in the above command is the area the prefix is originated in - the summary will apply to all areas aside from this\nCan add not-advertise prefix to prevent advertising prefixes in range, form of route filtering ^ffa496\n\nTo summarize LSA 5 at ASBR, use summary-address <ip & mask>\nLeak map can be used to leak longer mask prefixes included in summary\n\nsummary-address 0.0.0.0 0.0.0.0 leak-map <route-map>\n\nNull0 installed on router to match summary address for both LSA 3 and LSA 5 summaries\n\n\n\nRoute filtering\n\nInter-area filtering possible only at ABRs, filtering LSA3s\nPerformed with area <area#> filter-list prefix <prefix-list> [in|out]\nInter-area filtering also possible with area range and not-advertise flag as described above\nCan also use distribute lists to filter inbound into the RIB, not the OSPF database\n\nCan match on many values with route-maps, such as interface, ip address, ip next-hop, ip route-source, metric, route-type and tag\nFor example:\n\naccess-list 3 permit 155.1.146.0\naccess-list 4 permit 155.1.0.4\n!\nroute-map DENY_VLAN146_FROM_R4 deny 10\n match ip address 3\n match ip next-hop 4\n!         \nroute-map DENY_VLAN146_FROM_R4 permit 20\n!\nrouter ospf 1\n distribute-list route-map DENY_VLAN146_FROM_R4 in\n\nNote again distribute-lists ONLY AFFECTS LOCAL RIB, not OSPF database\nEasy to create traffic black holes if not careful with this feature\n\n\n\n\nDefault routing\n\nCan be advertised with default-information originate [always]\nalways flag allows advertisement even if default not in local route table\n\n\n\nStub areas\n\nTwo types, stubby and totally stubby\n\nStubby prevents advertisement of LSA 5 (Externals) into the area\n\nConfigured with area <area#> stub under router ospf\n\nTotally stubby prevents advertisements of LSA 3 (summary) & LSA 5 into the area\n\nConfigured with area <area#> stub no-summary under router ospf\n\nOnly ABR needs no-summary, rest of area just stub\n\n\n\nABR advertises default route into stub area for reachability\nMust be configured on all routers in stub area\n\n\n\nNSSA\n\nTwo types, NSSA and totally NSSA\n\nNSSA prevents LSA5 advertisements but allows redistribution of externals\n\nConfigured with area <area#> nssa under router ospf\nDoes not advertise default route from ABR by default\nCan use area <area#> nssa default-information-originate to advertise default\n\nTotally NSSA prevents LSA3, 5 but allows redistribution of externals\n\nConfigured with area <area#> nssa no-summary under router ospf\nAdvertises default route from ABR\n\n\nExternals originated in these areas will be LSA7s instead of LSA5s, translated to LSA5 at ABR\n\n\n\nVirtual links\n\nCan be used to repair discontiguous networks or for traffic engineering\nUnder OSPF, configure area <area#> virtual-link <neighbor RID> on both nodes\nThe IP used is the router ID, not the address used for OSPF peering\nTo keep virtual-links stable, it’s a good idea to manually define the router ID (as is best practice anyways)\nSee Redistribution page for details on that\n\n\n\n\n\nUseful debugs/show commands\n\nshow ip ospf interface brief - Displays interfaces participating in OSPF, areas, cost, etc\nshow ip ospf neighbors - Displays neighbors and neighbor states\nshow ip ospf database - Displays OSPF database information\nshow ip ospf database router self-originate - Useful to see routes advertised by local device\nshow ip ospf - Displays detailed information about OSPF protocols, timers, metric reference values, etc\nshow ip protocols - Shows various information about active routing protocols\ndebug ip ospf adj - OSPF adjacency formation\ndebug ip ospf packet - All OSPF packets\n\n\n\n\nStandard OSPF Config\nint gi0\nip ospf network point-to-point\nip ospf 1 area 0\n\nrouter ospf 1\n router-id 1.1.1.1\n passive-interface default\n no passive-interface gi0\n network 150.1.5.0 0.0.0.255 area 0"
  },
  {
    "objectID": "PBR.html",
    "href": "PBR.html",
    "title": "PBR",
    "section": "",
    "text": "General Notes\n\nConditional forwarding of packets based on something other than destination IP\nPossible filters include source IP, source & destination IP, protocol type (TCP, UDP, ICMP)\nDownsides are operational complexity, increased load on router\nCan specify multiple next-hops - when done the first will be used if the next-hop is adjacent, otherwise it will use the second, third, etc\nIf you want to use a non-adjacent route, you must use the recursive flag when configuring the route-map set statement\nUsing the default flag will cause the next-hop value to be set only for routes not within the router’s RIB\nCan also combine PBR with [[IP SLA & Tracking]] to ensure reachability of next-hops\nLocal PBR\n\nThis is a PBR for traffic sourcing from the router (normally not subject to policy routing)\nConfiguration is the same as a typical PBR but applied with ip local policy route-map <rm-name>\n\n\n\n\n\nUseful show/debug commands\n\nshow ip policy - Show PBR details\nshow ip local policy - Show local PBR details\ndebug ip policy - Shows policy-based decisions in real time\n\n\n\n\nStandard PBR Config\nip access-list extended AL_PBR\n permit ip 10.1.1.0 0.0.0.255 10.5.5.0 0.0.0.255\n!\nroute-map RM_PBR-TRANSIT permit 10\n match ip address ACL-PBR\n set ip [default] next-hop 10.23.1.3 <optional second IP>\n!\ninterface GigabitEthernet0/1\n ip policy route-map PBR-TRANSIT\n\n\nPBR with IP SLA & Tracking Config\nip sla 1\nicmp-echo 10.3.3.2\nip sla schedule 1 life forever start-time now\n!\ntrack 1 ip sla 1 reachability\n!\nip access-list standard ACL\n permit ip 10.2.2.0/24 10.1.1.1/32\n!\nroute-map PBR\n match ip address ACL\n set ip next-hop verify-availability 10.3.3.2 track 1\n!\ninterface GigabitEthernet0/1\n ip policy route-map PBR-TRANSIT"
  },
  {
    "objectID": "Redistribution.html",
    "href": "Redistribution.html",
    "title": "Redistribution",
    "section": "",
    "text": "General Notes\n\nRouters doing mutual redistribution will not readvertise routes between protocols (Ex: EIGRP > OSPF > EIGRP)\nRoutes will not be redistributed if they don’t exist in the RIB\nNot possible to create loops with a single redistribution point\nEIGRP and OSPF will not accept routes advertised from their own router ID for loop prevention\nTags can be used to prevent loops caused by advertising routes from one domain back into the same domain\nModifying AD can prevent loops caused by higher AD protocols being redistributed into lower AD protocols and then preferred through that protocol\nNormally applied with route-map to advertise specific routes, set tags, etc\n\n\n\n\nRedistribution per Protocol\n\nEIGRP\n\nRedistribution into EIGRP can be done anywhere in the topology\nRedistributed routes are marked external, AD of 170\nWhen redistributing into EIGRP, must assign metric either directly or with the default-metric command\n\nOSPF\n\nRedistribution can happen anywhere aside from stubby, totally stubby networks - redistributing router becomes ASBR and has type 4 LSA advertised to any areas outside of its own local area to ensure reachability to border router\nExternal routes will be LSA 5 in regular area, LSA 7 in NSSA and translated to type 5 at ABR\nBy default routes will be external type 2, e1 always preferred over e2 in OSPF algorithm\nMust use the subnets flag or only classful routes will be redistributed\n\nBGP\n\nRedistribution from BGP can be dangerous if using eBGP as IGPs will not be able to handle a full BGP table\nMust manually match externals if redistributing OSPF, otherwise only internal routes redistributed\n\n\n\n\n\nUseful show commands\n\nip route profile - Shows changes in routing topology, useful to see route flapping\n\n\n\n\nStandard Redistribution Config\nRouteMaps\nip prefix-list PL_REDIST seq 5 permit 10.10.10.0/24 ge 28\n!\nroute-map RM_REDIST permit 10  \nmatch ip address prefix-list PL_REDIST \nset tag 100\n!\nredistribute connected route-map RM_REDIST\nEIGRP\nredistribute connected\nredistribute static\nredistribute ospf 1 metric 10000 100 255 1 1500\ndefault-metric 10000 100 255 1 1500\nOSPF\nredistribute connected metric 10 subnets\nredistribute static metric 200 metric-type 1 subnets\nredistribute eigrp 1 metric 100 subnets\ndistance ospf external 171 ! for AD manipulation if required\nBGP\nredistribute connected\nredistribute static\nredistribute ospf 1 match external 1 external 2s"
  },
  {
    "objectID": "SNMP.html",
    "href": "SNMP.html",
    "title": "SNMP",
    "section": "",
    "text": "General Notes\n\nStands for Simple Network Management Protocol\nMain versions in-use are v2c and v3\nv2c does not support encryption and uses a community string for authentication\nv3 supports both mode advanced authentication and data encryption\nSNMP traps are unreliable, SNMP informs are reliable and must be confirmed by receiving host\nGood article on v3 SNMP\nifindex persist\n\nUsed to prevent SNMP index IDs from changing when devices are rebooted or new line cards are attached\nConfigured with snmp ifmib ifindex persist\n\n\n\n\n\nUseful show commands\n\nshow snmp host - Displays the SNMP notifications sent as traps, the version of SNMP, and the host IP address of the notifications\nshow snmp group - Displays SNMP group information (v3)\nshow snmp user - Displays SNMP user information (v3)\n\n\n\n\nConfig\n\nStandard SNMP v2c Config\nsnmp ifmib ifindex persist\nsnmp-server location <location> \nsnmp-server contact <contact-details>\nsnmp-server community <community-string> [RO|RW] [ACL]\nsnmp-server enable traps\nsnmp-server host 10.1.100.100 [traps|informs] version 2c <community-string>\n\n\nStandard SNMP v3 Config\nsnmp ifmib ifindex persist\nsnmp-server location <location> \nsnmp-server contact <contact-details>\nno snmp-server system-shutdown ! prevents device being shutdown via SNMP\nsnmp-server view <view-name> iso included ! iso included allows all values\nsnmp-server group <group-name> v3 priv read <view-name> write <view-name>\nsnmp-server user <user-name> <group-name> v3 auth sha <password> priv aes 256 <password>\nsnmp-server host 10.1.100.100 version 3 priv <user-name>"
  },
  {
    "objectID": "Syslog.html",
    "href": "Syslog.html",
    "title": "Syslog",
    "section": "",
    "text": "General Notes\n\nUsed to manage system logs and alerts\nCan be stored locally, sent to vty, console lines, or forwarded to an external syslog server\nLogging levels\n\nFor the logging trap command, these are the levels & their associated numbers Emergency: 0\nAlert: 1\nCritical: 2\nError: 3\nWarning: 4\nNotice: 5\nInformational: 6\nDebug: 7\n\n\n\n\n\nUseful show commands\n\nshow logging - Shows information on local and external syslog\n\n\n\nStandard Syslog Config\nlogging buffered 90000 - ! Increase local logging buffer size\nlogging <logging-server>\nservice timestamps debug datetime localtime show-timezone msec\nservice timestamps log datetime localtime show-timezone msec\nlogging trap warning ! includes this level of message and all below\nlogging source-interface loopback0\nexit\n!\nshow logging"
  },
  {
    "objectID": "uRPF.html",
    "href": "uRPF.html",
    "title": "uRPF",
    "section": "",
    "text": "General Notes\n\nStands for Unicast Reverse Path Forwarding\nUsed to eliminate spoofed packets on a network by validating the return network path of ingress traffic\nRequires CEF to be enabled on the device\n\n\n\n\nuRPF Modes\n\nStrict mode\n\nIf the return path to the source IP of the traffic does not match the ingress interface, the traffic will be discarded\nConfigured with the rx flag on the ip verify unicast source command\n\nLoose mode\n\nIf a return path to the source IP of the traffic does not exist in the routing table, the traffic will be discarded\nConfigured with the any flag on the ip verify unicast source command\n\nAllow-default\n\nUsed to allow a default route to be used as a return path - by default this is not allowed with uRPF\nConfigured with the allow-default flag on the ip verify unicast source command\n\n\n\n\n\nUseful debugs\n\nshow cef interface <interface-name> - Will show whether CEF, uRPF is enabled\n\n\n\n\nStandard uRPF Config\nint gi0/0\nip verify unicast source reachable-via [rx | any] [allow-default]"
  },
  {
    "objectID": "VRF.html",
    "href": "VRF.html",
    "title": "VRF",
    "section": "",
    "text": "General Notes\n\nAllows separation of routing tables into distinct virtual tables\nCan be applied to interfaces, routing protocols, used for advanced techniques like MPLS L3VPNs\nFront door VRFs (FVRF)\n\nUsed to prevent recursive routing over tunnels without requiring separate routing protocols for under & overlay\nUnderlay networking kept in VRF table, overlay can freely form associations in global table or another VRF\nVery useful in DMVPN environments\nGreat article here\n\n\n\n\n\nUseful show/debug commands\n\nshow ip vrf <name> [detail] - Verify existing VRFs & their status\nshow ip vrf interfaces <name> Show interfaces participating in VRF table\nshow ip route vrf <vrf-name> - VRF routing table\nIn enable, routing-context vrf <name> - Puts you in config mode with all typical commands applying to that VRF, for example show ip route would show the table for the selected VRF\nPlenty more, as tons of commands have VRF flags\n\n\n\n\nStandard VRF-lite config\nvrf definition <vrf-name>\n address-family ipv4\n\ninterface gi0/0\n vrf forwarding <vrf-name>\n ip address !must be reassigned after attaching interface to VRF\n!\nrouter eigrp <name>\n address-family ipv4 unicast vrf <vrf-name> autonomous-system <as>\n  network 0.0.0.0\n!\nrouter ospf <as> vrf <vrf-name>\n network 0.0.0.0\n!\nrouter bgp 100\n neighbor 150.1.5.5 remote-as 100\n !\n address-family ipv4 vrf <vrf-name>\n  neighbor 150.1.5.5 activate\n\n\nStandard Front-door VRF config (FVRF)\nvrf definition <vrf-name>\n address-family ipv4\n!\nint gi0/0\n description WAN INTERFACE\n vrf forwarding <vrf-name>\n!\nint tu0\n tunnel vrf <vrf-name>\n!\n!if running IKEv1:\n!\ncrypto keyring VRF_AWARE_PSK vrf INET\n!\n!if running IKEv2:\n!\ncrypto ikev2 profile IKE-PROFILE\nmatch fvrf INET"
  }
]